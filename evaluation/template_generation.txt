11 cuda:5
11
12
loaded cam
text_generator_for_out /notebook/cqas/generation/gpt-2-Pytorch
exist1
exist2
exist5
exist6
metadata
exist7
cuda:5
loaded gpt2
will be loaded
loading gpu 5
extract_objects_predicates gpu 5
loaded extractor
0 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'next-gen', 'console', 'is', 'the', 'best', 'nitendo', 'sonys', 'ps3', '-', 'microsoft', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
1 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['wich', 'is', 'better,', 'the', 'sony', 'play', 'station', 'or', 'the', 'microsoft', 'xbox?']
['sony', 'microsoft']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'potential', 'stupider'] ['faster', 'quicker', 'easier', 'quicker to its missteps']
2
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
type  templates
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
self predicate  better
answer begin:  The sony is better than microsoft. The reason are smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, potential, stupider
smarter, potential, stupider
winner_aspects_string1  and smarter
looser_aspects_string1 faster, quicker and quicker to its missteps
make response  It's simple! Sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
gen templates 3 It's simple! Sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
full answer  It's simple! Sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
It's simple! Sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
2 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'do', 'you', 'think', 'will', 'win', 'the', 'next-gen', 'war', 'sony(ps3)', 'or', 'microsoft(xbox', '360)', 'or', 'nintendo(revolution)?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Who', 'do', 'you', 'think', 'will', 'win', 'the', 'next', '-', 'gen', 'war', 'Sony(PS3', ')', 'or', 'Microsoft(Xbox', '360', ')', 'or', 'Nintendo(revolution', ')', '?']
We can't recognize objects for comparision
3 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'prefer', "sony's", 'ps3', 'or', "microsoft's", 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'do', 'you', 'prefer', 'Sony', "'s", 'PS3', 'or', 'Microsoft', "'s", 'Xbox', '360', '?']
We can't recognize objects for comparision
4 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', 'or', 'x-box', '360?', 'we', 'all', 'know', 'that', 'these', 'are', 'the', 'latest', 'platforms', 'by', 'sony', 'and', 'microsoft.', 'but', 'which', 'is', 'better?']
['sony', 'microsoft.']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'potential', 'stupider'] ['faster', 'quicker', 'easier', 'quicker to its missteps']
2
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
type  templates
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
self predicate  better
answer begin:  The sony is better than microsoft. The reason are smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, potential, stupider
smarter, potential, stupider
winner_aspects_string1  and smarter
looser_aspects_string1 faster, quicker and quicker to its missteps
make response  It's simple! Sony is better, because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
gen templates 3 It's simple! Sony is better, because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
full answer  It's simple! Sony is better, because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
It's simple! Sony is better, because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
5 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'has', 'the', 'best', 'video', 'games?', 'nintendo?', 'microsoft', 'or', 'sony?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'has', 'the', 'best', 'video', 'games', '?', 'NINTENDO', '?', 'MICROSOFT', 'or', 'SONY', '?']
aspects []
weights []
get url
params {'objectA': 'MICROSOFT', 'objectB': 'SONY', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'greater', 'lither', 'stupider'] ['quicker', 'faster', 'easier', 'quicker to its missteps']
2
winnder: sony  other: microsoft
acpect winner  greater and smarter
acpect other  faster, quicker and quicker to its missteps
type  templates
winnder: sony  other: microsoft
acpect winner  greater and smarter
acpect other  faster, quicker and quicker to its missteps
self predicate  better
answer begin:  The sony is better than microsoft. The reason are greater and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, greater, lither, stupider
smarter, greater, lither, stupider
winner_aspects_string1 greater and smarter
looser_aspects_string1 faster, quicker and quicker to its missteps
make response  Looks like sony is better, because of greater and smarter. But you should know that microsoft is faster, quicker and quicker to its missteps.
gen templates 3 Looks like sony is better, because of greater and smarter. But you should know that microsoft is faster, quicker and quicker to its missteps.
full answer  Looks like sony is better, because of greater and smarter. But you should know that microsoft is faster, quicker and quicker to its missteps.
Looks like sony is better, because of greater and smarter. But you should know that microsoft is faster, quicker and quicker to its missteps.
6 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['sony', 'ps3', 'vs', 'microsoft', 'xbox', '360', 'vs', 'nintendo', 'wii?']
['sony']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Sony', 'Ps3', 'vs', 'Microsoft', 'Xbox', '360', 'vs', 'Nintendo', 'wii', '?']
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'Microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'potential', 'stupider'] ['faster', 'quicker', 'easier', 'quicker to its missteps']
2
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
type  templates
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
self predicate  better
answer begin:  The sony is better than microsoft. The reason are smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, potential, stupider
smarter, potential, stupider
winner_aspects_string1  and smarter
looser_aspects_string1 faster, quicker and quicker to its missteps
make response  I would prefer to use sony because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
gen templates 3 I would prefer to use sony because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
full answer  I would prefer to use sony because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
I would prefer to use sony because of  and smarter. Microsoft is faster, quicker and quicker to its missteps.
7 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'worth', 'buying', 'the', 'sony', 'ps3', 'or', 'the', 'microsoft', 'xbox', '360?????????']
['sony', 'microsoft']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'potential', 'stupider'] ['faster', 'quicker', 'easier', 'quicker to its missteps']
2
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
type  templates
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
self predicate  better
answer begin:  The sony is better than microsoft. The reason are smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, potential, stupider
smarter, potential, stupider
winner_aspects_string1  and smarter
looser_aspects_string1 faster, quicker and quicker to its missteps
make response  After much thought, I realized that  sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
gen templates 3 After much thought, I realized that  sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
full answer  After much thought, I realized that  sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
After much thought, I realized that  sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
8 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'sony', 'vs', 'microsoft,', 'who', 'will', 'win?', 'thanks.?']
['sony', 'microsoft,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'potential', 'stupider'] ['faster', 'quicker', 'easier', 'quicker to its missteps']
2
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
type  templates
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
self predicate  better
answer begin:  The sony is better than microsoft. The reason are smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, potential, stupider
smarter, potential, stupider
winner_aspects_string1  and smarter
looser_aspects_string1 faster, quicker and quicker to its missteps
make response  I would prefer to use sony because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
gen templates 3 I would prefer to use sony because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
full answer  I would prefer to use sony because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
I would prefer to use sony because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
9 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'difference', 'between', 'rat', 'and', 'mouse?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
10 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'a', 'rat', 'and', 'a', 'mouse?']
['rat']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'rat', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'smarter', 'bigger', 'enamel'] ['stronger', 'greater', 'easier to set', 'sewer']
winnder: and  other: rat
acpect winner  smarter, quicker and bigger
acpect other  greater, stronger and easier to set
type  templates
rat has undeniable advantages. They are smarter, quicker and bigger.
11 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['mouse', 'vs', 'hamster', 'vs', 'rat?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['mouse', 'vs', 'hamster', 'vs', 'rat', '?']
or simple split_sent 1
mouse hamster
aspects []
weights []
get url
params {'objectA': 'mouse', 'objectB': 'hamster', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to catch', 'easier'] ['greater', 'higher']
2
winnder: hamster  other: mouse
acpect winner  easier and easier to catch
acpect other  greater and higher
type  templates
winnder: hamster  other: mouse
acpect winner  easier and easier to catch
acpect other  greater and higher
self predicate  better
answer begin:  The hamster is better than mouse. The reason are easier and easier to catch. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to catch, easier
easier to catch, easier
winner_aspects_string1 easier and easier to catch
looser_aspects_string1 greater and higher
make response  Looks like hamster is better, because of easier and easier to catch. But you should know that mouse is greater and higher.
gen templates 3 Looks like hamster is better, because of easier and easier to catch. But you should know that mouse is greater and higher.
full answer  Looks like hamster is better, because of easier and easier to catch. But you should know that mouse is greater and higher.
Looks like hamster is better, because of easier and easier to catch. But you should know that mouse is greater and higher.
12 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'need', 'to', 'know', 'identifiable', 'differencess', 'between', 'a', 'baby', 'rat', 'and', 'baby', 'mouse', '...to', 'know', 'which', 'one', 'im', 'raising?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
13 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'between', 'a', 'mouse', 'and', 'a', 'rat?']
['mouse']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'mouse', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'easier to use', 'faster to use', 'older'] ['greater', 'lighter', 'stronger', 'richer']
winnder: and  other: mouse
acpect winner  older, faster to use and easier to use
acpect other  lighter, greater and stronger
type  templates
mouse has undeniable advantages. They are older, faster to use and easier to use.
14 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'difference', 'between', 'rat', 'and', 'mouse?']
['rat']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'rat', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'smarter', 'bigger', 'enamel'] ['stronger', 'greater', 'easier to set', 'sewer']
winnder: and  other: rat
acpect winner  smarter, quicker and bigger
acpect other  greater, stronger and easier to set
type  templates
rat has undeniable advantages. They are smarter, quicker and bigger.
15 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'between', 'a', 'rat', 'and', 'a', 'mouse?']
['rat']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'rat', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'smarter', 'bigger', 'enamel'] ['stronger', 'greater', 'easier to set', 'sewer']
winnder: and  other: rat
acpect winner  smarter, quicker and bigger
acpect other  greater, stronger and easier to set
type  templates
rat has undeniable advantages. They are smarter, quicker and bigger.
16 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'animal', 'makes', 'the', 'best', 'pet-', 'mouse,', 'rat,', 'hamster,', 'or', 'gerbil?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'animal', 'makes', 'the', 'best', 'pet-', 'mouse', ',', 'rat', ',', 'hamster', ',', 'or', 'gerbil', '?']
or simple split_sent 12
, gerbil
We can't recognize objects for comparision
17 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'brief', 'summary', 'of', 'the', 'differences', 'and', 'similarities', 'between', 'apple', 'and', 'ibm?']
['apple']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'friendlier', 'safer', 'windows'] ['cooler', 'greater', 'easier to access', 'access']
winnder: apple  other: and
acpect winner  safer, friendlier and smarter
acpect other  greater and easier to access
type  templates
apple has undeniable advantages. They are safer, friendlier and smarter.
18 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'computer?', 'dell', 'or', 'apple', 'or', 'ibm?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'computer', '?', 'dell', 'or', 'apple', 'or', 'ibm', '?']
or simple split_sent 7
dell apple
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
gen templates 3 I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
full answer  I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
19 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'an', 'ibm', 'or', 'and', 'ibook(apple)?']
['ibm']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'an', 'IBM', 'or', 'and', 'ibook(Apple', ')', '?']
or simple split_sent 5
IBM and
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'IBM', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'shoppingfor', 'cooler', 'denser'] ['safer', 'lighter', 'easier to use', 'cheaperfasterbetter']
2
winnder: ibm  other: and
acpect winner  easier
acpect other  lighter, safer and easier to use
type  templates
winnder: ibm  other: and
acpect winner  easier
acpect other  lighter, safer and easier to use
self predicate  b
answer begin:  The ibm is b than and. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, shoppingfor, cooler, denser
easier, shoppingfor, cooler, denser
winner_aspects_string1  and easier
looser_aspects_string1 lighter, safer and easier to use
make response  It's simple! Ibm is better, because of  and easier. But you should know that and is lighter, safer and easier to use.
gen templates 3 It's simple! Ibm is better, because of  and easier. But you should know that and is lighter, safer and easier to use.
full answer  It's simple! Ibm is better, because of  and easier. But you should know that and is lighter, safer and easier to use.
It's simple! Ibm is better, because of  and easier. But you should know that and is lighter, safer and easier to use.
20 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'computer', 'is', 'better,', 'pc', '(ibm', 'compatible)', 'or', 'apple?']
[]
['better,']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'computer', 'is', 'better', ',', 'PC', '(', 'IBM', 'compatible', ')', 'or', 'Apple', '?']
We can't recognize objects for comparision
21 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'for', 'educational', 'use', 'an', 'ibm', 'thinkpad', 'or', 'an', 'apple', 'macbook', 'pro?', 'why?']
['ibm', 'apple']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'ibm', 'objectB': 'apple', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'cheaper', 'faster', 'easier to mount'] ['ibms', 'easier to understand', 'warranty', 'conditions']
2
winnder: apple  other: ibm
acpect winner  easier, easier to mount and faster
acpect other  easier to understand
type  templates
winnder: apple  other: ibm
acpect winner  easier, easier to mount and faster
acpect other  easier to understand
self predicate  better
answer begin:  The apple is better than ibm. The reason are easier, easier to mount and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, cheaper, faster, easier to mount
easier, cheaper, faster, easier to mount
winner_aspects_string1 easier, easier to mount and faster
looser_aspects_string1  and easier to understand
make response  It's simple! Apple is better, because of easier, easier to mount and faster. But it will be useful for you to know that ibm is  and easier to understand.
gen templates 3 It's simple! Apple is better, because of easier, easier to mount and faster. But it will be useful for you to know that ibm is  and easier to understand.
full answer  It's simple! Apple is better, because of easier, easier to mount and faster. But it will be useful for you to know that ibm is  and easier to understand.
It's simple! Apple is better, because of easier, easier to mount and faster. But it will be useful for you to know that ibm is  and easier to understand.
22 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'notebook', 'brand', 'and', 'why?', 'dell,', 'sony', 'vaio,', 'apple,', 'toshiba,', 'ibm,', '...', '?', '(in', 'general', 'comparison)']
['dell,', 'ibm,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
gen templates 3 I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
full answer  I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
23 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'laptop', 'company', 'is', 'better', 'sony', 'hp', 'ibm', 'or', 'apple?']
['sony', 'ibm']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'more for a better build quality'] ['easier', 'programmer']
2
winnder: sony  other: ibm
acpect winner  faster and more for a better build quality
acpect other  easier
type  templates
winnder: sony  other: ibm
acpect winner  faster and more for a better build quality
acpect other  easier
self predicate  better
answer begin:  The sony is better than ibm. The reason are faster and more for a better build quality. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, more for a better build quality
faster, more for a better build quality
winner_aspects_string1 faster and more for a better build quality
looser_aspects_string1  and easier
make response  After much thought, I realized that  sony is better, because of faster and more for a better build quality. But you should know that ibm is  and easier.
gen templates 3 After much thought, I realized that  sony is better, because of faster and more for a better build quality. But you should know that ibm is  and easier.
full answer  After much thought, I realized that  sony is better, because of faster and more for a better build quality. But you should know that ibm is  and easier.
After much thought, I realized that  sony is better, because of faster and more for a better build quality. But you should know that ibm is  and easier.
24 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'laptop', 'to', 'buy(here', 'are', 'my', 'choices):', 'apple,', 'dell,', 'and', 'ibm.', 'i', 'not', 'for', 'sure', 'which', 'is', 'the', 'best.?']
['laptop', 'apple,', 'ibm.']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'laptop', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'bigger', 'thinner'] ['cheaper', 'richer', 'faster to stream itunes content', 'easier to perform on a mobile device']
2
winnder: apple  other: laptop
acpect winner  lighter, easier and thinner
acpect other  faster to stream itunes content, richer and easier to perform on a mobile device
type  templates
winnder: apple  other: laptop
acpect winner  lighter, easier and thinner
acpect other  faster to stream itunes content, richer and easier to perform on a mobile device
self predicate  better
answer begin:  The apple is better than laptop. The reason are lighter, easier and thinner. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, bigger, thinner
lighter, easier, bigger, thinner
winner_aspects_string1 lighter, easier and thinner
looser_aspects_string1 faster to stream itunes content, richer and easier to perform on a mobile device
make response  Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
gen templates 3 Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
full answer  Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
25 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'should', 'i', 'get', 'for', 'christmas', 'a', 'new', 'cellphone', 'or', 'an', 'ipod?']
['christmas']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'should', 'I', 'get', 'for', 'Christmas', 'a', 'new', 'cellphone', 'or', 'an', 'ipod', '?']
or simple split_sent 9
cellphone an
aspects []
weights []
get url
params {'objectA': 'cellphone', 'objectB': 'an', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to see and easier to clean', 'easier', 'faster', 'android'] ['quicker', 'computers', 'track', 'repeats']
2
winnder: an  other: cellphone
acpect winner  easier, easier to see and easier to clean and faster
acpect other  quicker
type  templates
winnder: an  other: cellphone
acpect winner  easier, easier to see and easier to clean and faster
acpect other  quicker
self predicate  better
answer begin:  The an is better than cellphone. The reason are easier, easier to see and easier to clean and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to see and easier to clean, easier, faster, android
easier to see and easier to clean, easier, faster, android
winner_aspects_string1 easier, easier to see and easier to clean and faster
looser_aspects_string1  and quicker
make response  I would prefer to use an because of easier, easier to see and easier to clean and faster. But i should tell you that cellphone is  and quicker.
gen templates 3 I would prefer to use an because of easier, easier to see and easier to clean and faster. But i should tell you that cellphone is  and quicker.
full answer  I would prefer to use an because of easier, easier to see and easier to clean and faster. But i should tell you that cellphone is  and quicker.
I would prefer to use an because of easier, easier to see and easier to clean and faster. But i should tell you that cellphone is  and quicker.
26 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'bettera', 'cell', 'phone', 'or', 'an', 'ipod.?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 's', 'bettera', 'cell', 'phone', 'or', 'an', 'ipod', '.', '?']
or simple split_sent 5
phone an
aspects []
weights []
get url
params {'objectA': 'phone', 'objectB': 'an', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['safer', 'smarter', 'smoother', 'easier to read'] ['lighter', 'bigger', 'thinner', 'faster']
2
winnder: an  other: phone
acpect winner  safer, easier to read and smarter
acpect other  lighter, faster and thinner
type  templates
winnder: an  other: phone
acpect winner  safer, easier to read and smarter
acpect other  lighter, faster and thinner
self predicate  better
answer begin:  The an is better than phone. The reason are safer, easier to read and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
safer, smarter, smoother, easier to read
safer, smarter, smoother, easier to read
winner_aspects_string1 safer, easier to read and smarter
looser_aspects_string1 lighter, faster and thinner
make response  It's simple! An is better, because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
gen templates 3 It's simple! An is better, because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
full answer  It's simple! An is better, because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
It's simple! An is better, because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
27 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'gadget', 'would', 'you', 'prefer', '-', 'mp4/ipod', 'or', 'cam', 'phone?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'gadget', 'would', 'you', 'prefer', '-', 'mp4/iPod', 'or', 'cam', 'phone', '?']
or simple split_sent 7
mp4/iPod cam
aspects []
weights []
get url
params {'objectA': 'mp4/iPod', 'objectB': 'cam', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: cam  other: mp4/ipod
acpect winner  
acpect other  
type  templates
winnder: cam  other: mp4/ipod
acpect winner  
acpect other  
self predicate  better
answer begin:  The cam is better than mp4/ipod. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer cam than mp4/ipod.
full answer  I would prefer cam than mp4/ipod.
I would prefer cam than mp4/ipod.
28 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'thinks', 'better,', 'ipod', 'nano,', 'or', 'cell', 'phone?']
[]
['better,']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'thinks', 'better', ',', 'ipod', 'nano', ',', 'or', 'cell', 'phone', '?']
or simple split_sent 9
, cell
We can't recognize objects for comparision
29 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'u', 'like', 'interacting', 'with', 'most:ipod,cell', 'phone,or', 'cd', 'player?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
30 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'an', 'ipod', 'or', 'an', 'mp3', 'phone?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'get', 'an', 'iPod', 'or', 'an', 'mp3', 'phone', '?']
or simple split_sent 5
iPod an
aspects []
weights []
get url
params {'objectA': 'iPod', 'objectB': 'an', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['power', 'limitation', 'greater', 'simpler'] ['safer', 'lighter', 'faster', 'faster to achieve an end result']
2
winnder: an  other: ipod
acpect winner  greater and simpler
acpect other  lighter, safer and faster
type  templates
winnder: an  other: ipod
acpect winner  greater and simpler
acpect other  lighter, safer and faster
self predicate  better
answer begin:  The an is better than ipod. The reason are greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
power, limitation, greater, simpler
power, limitation, greater, simpler
winner_aspects_string1 greater and simpler
looser_aspects_string1 lighter, safer and faster
make response  I came to the conclusion that an is better, because of greater and simpler. But it will be useful for you to know that ipod is lighter, safer and faster.
gen templates 3 I came to the conclusion that an is better, because of greater and simpler. But it will be useful for you to know that ipod is lighter, safer and faster.
full answer  I came to the conclusion that an is better, because of greater and simpler. But it will be useful for you to know that ipod is lighter, safer and faster.
I came to the conclusion that an is better, because of greater and simpler. But it will be useful for you to know that ipod is lighter, safer and faster.
31 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['would', 'you', 'rather', 'have', 'an', 'ipod', 'or', 'a', 'psp', 'or', 'a', 'cell', 'phone!?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Would', 'you', 'rather', 'have', 'an', 'iPod', 'or', 'a', 'PSP', 'or', 'a', 'Cell', 'Phone', '!', '?']
We can't recognize objects for comparision
32 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'an', 'ipod', 'nano', 'or', 'cell', 'phone?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Should', 'i', 'get', 'an', 'ipod', 'nano', 'or', 'cell', 'phone', '?']
or simple split_sent 6
nano cell
aspects []
weights []
get url
params {'objectA': 'nano', 'objectB': 'cell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to review in sunbeam', 'easier', 'setting', 'pocket'] ['wires', 'better for highspeed memory applications']
2
winnder: nano  other: cell
acpect winner  easier to review in sunbeam and easier
acpect other  better for highspeed memory applications
type  templates
winnder: nano  other: cell
acpect winner  easier to review in sunbeam and easier
acpect other  better for highspeed memory applications
self predicate  better
answer begin:  The nano is better than cell. The reason are easier to review in sunbeam and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to review in sunbeam, easier, setting, pocket
easier to review in sunbeam, easier, setting, pocket
winner_aspects_string1 easier to review in sunbeam and easier
looser_aspects_string1  and better for highspeed memory applications
make response  After much thought, I realized that  nano is better, because of easier to review in sunbeam and easier. But you should know that cell is  and better for highspeed memory applications.
gen templates 3 After much thought, I realized that  nano is better, because of easier to review in sunbeam and easier. But you should know that cell is  and better for highspeed memory applications.
full answer  After much thought, I realized that  nano is better, because of easier to review in sunbeam and easier. But you should know that cell is  and better for highspeed memory applications.
After much thought, I realized that  nano is better, because of easier to review in sunbeam and easier. But you should know that cell is  and better for highspeed memory applications.
33 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'an', 'cell', 'phone', 'or', 'an', 'ipod', 'video?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['should', 'i', 'get', 'an', 'cell', 'phone', 'or', 'an', 'ipod', 'video', '?']
or simple split_sent 6
phone an
aspects []
weights []
get url
params {'objectA': 'phone', 'objectB': 'an', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['safer', 'smarter', 'smoother', 'easier to read'] ['lighter', 'bigger', 'thinner', 'faster']
2
winnder: an  other: phone
acpect winner  safer, easier to read and smarter
acpect other  lighter, faster and thinner
type  templates
winnder: an  other: phone
acpect winner  safer, easier to read and smarter
acpect other  lighter, faster and thinner
self predicate  better
answer begin:  The an is better than phone. The reason are safer, easier to read and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
safer, smarter, smoother, easier to read
safer, smarter, smoother, easier to read
winner_aspects_string1 safer, easier to read and smarter
looser_aspects_string1 lighter, faster and thinner
make response  I would prefer to use an because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
gen templates 3 I would prefer to use an because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
full answer  I would prefer to use an because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
I would prefer to use an because of safer, easier to read and smarter. But i should tell you that phone is lighter, faster and thinner.
34 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better?', 'honda', 'cr-v', 'or', 'toyota', 'rav4?']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', '?', 'Honda', 'CR', '-', 'V', 'or', 'Toyota', 'RAV4', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Honda CR-V', 'objectB': 'Toyota', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'head', 'legroom', 'honda'] ['older', 'crash', 'tests', 'engineering']
2
winnder: toyota  other: honda cr-v
acpect winner  greater
acpect other  older
type  templates
winnder: toyota  other: honda cr-v
acpect winner  greater
acpect other  older
self predicate  b
answer begin:  The toyota is b than honda cr-v. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, head, legroom, honda
greater, head, legroom, honda
winner_aspects_string1  and greater
looser_aspects_string1  and older
make response  It's simple! Toyota is better, because of  and greater. Honda cr-v is  and older.
gen templates 3 It's simple! Toyota is better, because of  and greater. Honda cr-v is  and older.
full answer  It's simple! Toyota is better, because of  and greater. Honda cr-v is  and older.
It's simple! Toyota is better, because of  and greater. Honda cr-v is  and older.
35 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better,', 'a', 'honda', 'accord', 'or', 'a', 'toyota', 'camry?']
['honda', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
gen templates 3 Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
full answer  Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
36 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better:', 'a', 'honda', 'or', 'a', 'toyota?']
['honda']
['better:']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', ':', 'a', 'Honda', 'or', 'a', 'Toyota', '?']
len(obj1) > 0 and len(obj2) == 0
aspects ['better:']
weights [1]
get url
params {'objectA': 'Honda', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better:', 'weight1': 1}
create fro json predicates ['better:']
create fro json self.predicates better:
aspects  ['safer', 'cooler', 'bigger', 'easier to use and have better io and communications'] ['cheaper', 'feistier', 'easier to use for my application', 'lighter']
winnder: honda  other: and
acpect winner  safer, easier to use and have better io and communications and bigger
acpect other  lighter, easier to use for my application and feistier
type  templates
honda has undeniable advantages. They are safer, easier to use and have better io and communications and bigger.
37 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better?', 'honda', 'pilot', 'or', 'toyota', '4runner?']
['honda', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  It's simple! Toyota is better, because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
gen templates 3 It's simple! Toyota is better, because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
full answer  It's simple! Toyota is better, because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
It's simple! Toyota is better, because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
38 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'there', 'was', 'only', 'two', 'car', 'companies', 'in', 'the', 'world,', 'toyota', 'and', 'honda,', 'which', 'one', 'would', 'you', 'pick', 'and', 'why?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
39 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['better', 'japanese', 'cars:', 'toyota', 'or', 'honda?']
['toyota']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Better', 'Japanese', 'cars', ':', 'Toyota', 'or', 'Honda', '?']
aspects Better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Toyota', 'objectB': 'Honda', 'fs': 'true', 'aspect1': 'B', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates Better
create fro json self.predicates B
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  B
answer begin:  The honda is B than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
gen templates 3 It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
full answer  It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
40 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'minivan', 'between', 'honda', 'odessy', 'and', 'toyota', 'sienna?']
['honda', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  I would prefer to use toyota because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
gen templates 3 I would prefer to use toyota because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
full answer  I would prefer to use toyota because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
I would prefer to use toyota because of faster, easier and easier to drive. But it will be useful for you to know that honda is weaker, easier to find and earlier.
41 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'the', 'best', 'automobie???', 'toyota?', 'honda?', 'ford?', 'porsche?']
['ford?']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
42 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'in', 'mpg,', 'toyota,', 'honda,', 'mazda', 'or', 'nissan?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'in', 'MPG', ',', 'Toyota', ',', 'Honda', ',', 'Mazda', 'or', 'Nissan', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Mazda', 'objectB': 'Nissan', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'bigger', 'lighter', 'lbs'] ['base', 'car', 'kilos', 'better to drive']
2
winnder: nissan  other: mazda
acpect winner  lighter, greater and bigger
acpect other  better to drive
type  templates
winnder: nissan  other: mazda
acpect winner  lighter, greater and bigger
acpect other  better to drive
self predicate  b
answer begin:  The nissan is b than mazda. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, lbs
greater, bigger, lighter, lbs
winner_aspects_string1 lighter, greater and bigger
looser_aspects_string1  and better to drive
make response  It's simple! Nissan is better, because of lighter, greater and bigger. But you should know that mazda is  and better to drive.
gen templates 3 It's simple! Nissan is better, because of lighter, greater and bigger. But you should know that mazda is  and better to drive.
full answer  It's simple! Nissan is better, because of lighter, greater and bigger. But you should know that mazda is  and better to drive.
It's simple! Nissan is better, because of lighter, greater and bigger. But you should know that mazda is  and better to drive.
43 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'car', 'company', 'is', 'better', 'hyundai', 'or', 'toyota', 'or', 'honda.?']
['hyundai']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'car', 'company', 'is', 'better', 'Hyundai', 'or', 'Toyota', 'or', 'Honda', '.', '?']
aspects ['better']
weights [1]
get url
params {'objectA': 'Hyundai', 'objectB': 'Toyota', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['higher', 'greater', 'faster', 'horsepower to its wheels'] ['radius', 'ft', 'smoother', 'quicker']
2
winnder: hyundai  other: toyota
acpect winner  greater, higher and faster
acpect other  quicker
type  templates
winnder: hyundai  other: toyota
acpect winner  greater, higher and faster
acpect other  quicker
self predicate  better
answer begin:  The hyundai is better than toyota. The reason are greater, higher and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, greater, faster, horsepower to its wheels
higher, greater, faster, horsepower to its wheels
winner_aspects_string1 greater, higher and faster
looser_aspects_string1  and quicker
make response  I would prefer to use hyundai because of greater, higher and faster. But i should tell you that toyota is  and quicker.
gen templates 3 I would prefer to use hyundai because of greater, higher and faster. But i should tell you that toyota is  and quicker.
full answer  I would prefer to use hyundai because of greater, higher and faster. But i should tell you that toyota is  and quicker.
I would prefer to use hyundai because of greater, higher and faster. But i should tell you that toyota is  and quicker.
44 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'car,', 'toyota,', 'nissan', 'or', 'honda?']
['nissan']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'car', ',', 'Toyota', ',', 'Nissan', 'or', 'Honda', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Nissan', 'objectB': 'Honda', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['richer', 'higher', 'longer', 'more to'] ['greater', 'head', 'legroom', 'lighter']
2
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
type  templates
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
self predicate  b
answer begin:  The honda is b than nissan. The reason are longer, higher and more to. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
richer, higher, longer, more to
richer, higher, longer, more to
winner_aspects_string1 longer, higher and more to
looser_aspects_string1 lighter and greater
make response  It's simple! Honda is better, because of longer, higher and more to. Nissan is lighter and greater.
gen templates 3 It's simple! Honda is better, because of longer, higher and more to. Nissan is lighter and greater.
full answer  It's simple! Honda is better, because of longer, higher and more to. Nissan is lighter and greater.
It's simple! Honda is better, because of longer, higher and more to. Nissan is lighter and greater.
45 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'car', 'to', 'by', 'with', 'high', 'mileage,', 'nissan,', 'honda,', 'toyota?']
['nissan,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'stronger', 'easier to manage'] ['bigger', 'heavier', 'easier to live with', 'larger']
winnder: nissan  other: and
acpect winner  stronger, longer and easier to manage
acpect other  heavier, larger and easier to live with
type  templates
nissan has undeniable advantages. They are stronger, longer and easier to manage.
46 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['toyota', 'corolla', 'or', 'honda', 'civic.', 'which', 'is', 'faster?']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['toyota', 'corolla', 'or', 'honda', 'civic', '.', 'which', 'is', 'faster', '?']
or simple split_sent 2
corolla honda
aspects faster
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'corolla', 'objectB': 'honda', 'fs': 'true', 'aspect1': 'f', 'aspect2': 'a', 'aspect3': 's', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates faster
create fro json self.predicates f
aspects  ['faster', 'greater', 'bigger', 'easier'] ['happier', 'heavier', 'lighter', 'marketing']
2
winnder: honda  other: corolla
acpect winner  faster, easier and greater
acpect other  happier, heavier and lighter
type  templates
winnder: honda  other: corolla
acpect winner  faster, easier and greater
acpect other  happier, heavier and lighter
self predicate  f
answer begin:  The honda is f than corolla. The reason are faster, easier and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, bigger, easier
faster, greater, bigger, easier
winner_aspects_string1 faster, easier and greater
looser_aspects_string1 happier, heavier and lighter
make response  I would prefer to use honda because of faster, easier and greater. But i should tell you that corolla is happier, heavier and lighter.
gen templates 3 I would prefer to use honda because of faster, easier and greater. But i should tell you that corolla is happier, heavier and lighter.
full answer  I would prefer to use honda because of faster, easier and greater. But i should tell you that corolla is happier, heavier and lighter.
I would prefer to use honda because of faster, easier and greater. But i should tell you that corolla is happier, heavier and lighter.
47 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['honda', 'or', 'toyota-', 'which', 'is', 'better', 'make', 'of', 'auto', 'and', 'most', 'roadworthy?']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Honda', 'or', 'Toyota-', ' ', 'which', 'is', 'better', 'make', 'of', 'auto', 'and', 'most', 'roadworthy', '?']
or simple split_sent 1
Honda Toyota-
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Honda', 'objectB': 'Toyota-', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'easier to drive', 'easier', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota-  other: honda
acpect winner  easier to drive, faster and easier
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota-  other: honda
acpect winner  easier to drive, faster and easier
acpect other  weaker, easier to find and earlier
self predicate  b
answer begin:  The toyota- is b than honda. The reason are easier to drive, faster and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, easier to drive, easier, faster
smoother, easier to drive, easier, faster
winner_aspects_string1 easier to drive, faster and easier
looser_aspects_string1 weaker, easier to find and earlier
make response  I came to the conclusion that toyota- is better, because of easier to drive, faster and easier. But you should know that honda is weaker, easier to find and earlier.
gen templates 3 I came to the conclusion that toyota- is better, because of easier to drive, faster and easier. But you should know that honda is weaker, easier to find and earlier.
full answer  I came to the conclusion that toyota- is better, because of easier to drive, faster and easier. But you should know that honda is weaker, easier to find and earlier.
I came to the conclusion that toyota- is better, because of easier to drive, faster and easier. But you should know that honda is weaker, easier to find and earlier.
48 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'a', 'better', 'car', '2006', 'toyota', 'sienna', 'or', 'honda', 'odysee', 'and', 'how', 'to', 'get', 'a', 'better', 'deal', 'on', 'these', 'in', 'ca?']
['toyota', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
gen templates 3 I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
full answer  I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
49 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'buy,', 'a', 'honda', 'accord', 'or', 'a', 'toyota', 'camry?']
['honda', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  I would prefer to use toyota because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
gen templates 3 I would prefer to use toyota because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
full answer  I would prefer to use toyota because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
I would prefer to use toyota because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
50 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'option-', 'toyota', 'or', 'honda?']
['toyota']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'option-', 'Toyota', 'or', 'Honda', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Toyota', 'objectB': 'Honda', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  b
answer begin:  The honda is b than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
gen templates 3 After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
full answer  After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
51 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'car', 'is', 'good', 'toyota', 'camry', 'or', 'honda', 'accord?']
['toyota', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
gen templates 3 It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
full answer  It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
52 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'car', 'should', 'i', 'buy?', 'toyota', 'or', 'honda?']
['toyota']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'car', 'should', 'I', 'buy', '?', 'Toyota', 'or', 'Honda', '?']
aspects []
weights []
get url
params {'objectA': 'Toyota', 'objectB': 'Honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  I would prefer to use honda because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
gen templates 3 I would prefer to use honda because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
full answer  I would prefer to use honda because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
I would prefer to use honda because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
53 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['why', 'car', 'do', 'u', 'think', 'would', 'be', 'the', 'better', 'buy?', 'a', '2', 'door', 'honda', 'civic', 'or', 'a', 'toyota', 'scion', 't.c.?']
['honda', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
gen templates 3 I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
full answer  I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
54 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'make', 'of', 'car', 'is', 'better', 'all', 'around,', 'honda', 'or', 'toyota?']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'make', 'of', 'car', 'is', 'better', 'all', 'around', ',', 'Honda', 'or', 'Toyota', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Honda', 'objectB': 'Toyota', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  b
answer begin:  The toyota is b than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
gen templates 3 I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
full answer  I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
I would prefer to use toyota because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
55 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'better', '-', 'new', 'honda', 'civic', 'hybrid', 'or', 'toyota', 'prius???']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', "'s", 'better', '-', ' ', 'new', 'honda', 'civic', 'hybrid', 'or', 'toyota', 'prius', '?', '?', '?']
or simple split_sent 9
hybrid toyota
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'hybrid', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'smoother', 'larger', 'faster'] ['simpler', 'cheaper', 'older', 'greater']
2
winnder: toyota  other: hybrid
acpect winner  lighter, larger and faster
acpect other  greater, simpler and older
type  templates
winnder: toyota  other: hybrid
acpect winner  lighter, larger and faster
acpect other  greater, simpler and older
self predicate  b
answer begin:  The toyota is b than hybrid. The reason are lighter, larger and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, smoother, larger, faster
lighter, smoother, larger, faster
winner_aspects_string1 lighter, larger and faster
looser_aspects_string1 greater, simpler and older
make response  It's simple! Toyota is better, because of lighter, larger and faster. Hybrid is greater, simpler and older.
gen templates 3 It's simple! Toyota is better, because of lighter, larger and faster. Hybrid is greater, simpler and older.
full answer  It's simple! Toyota is better, because of lighter, larger and faster. Hybrid is greater, simpler and older.
It's simple! Toyota is better, because of lighter, larger and faster. Hybrid is greater, simpler and older.
56 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better....honda', 'or', 'toyota?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', '....', 'Honda', 'or', 'Toyota', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Honda', 'objectB': 'Toyota', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  b
answer begin:  The toyota is b than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
gen templates 3 It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
full answer  It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
57 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['compare', 'and', 'contrast', 'honda', 'fit', 'and', 'toyota', 'yaris.', 'which', 'is', 'better?', 'mileage', 'and', 'storage', 'space', 'wise?']
['honda']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'honda', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['safer', 'cooler', 'bigger', 'easier to use and have better io and communications'] ['cheaper', 'easier to use for my application', 'feistier', 'lighter']
winnder: honda  other: and
acpect winner  safer, easier to use and have better io and communications and bigger
acpect other  lighter, easier to use for my application and feistier
type  templates
honda has undeniable advantages. They are safer, easier to use and have better io and communications and bigger.
58 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'car', 'is', 'better', 'honda', 'accord', 'or', 'toyota', 'camry?']
['honda']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'car', 'is', 'better', 'honda', 'accord', 'or', 'toyota', 'camry', '?']
or simple split_sent 6
accord toyota
aspects ['better']
weights [1]
get url
params {'objectA': 'accord', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'greater', 'smoother', 'quieter'] ['faster', 'higher', 'quicker', 'fuel']
2
winnder: toyota  other: accord
acpect winner  easier and greater
acpect other  faster, higher and quicker
type  templates
winnder: toyota  other: accord
acpect winner  easier and greater
acpect other  faster, higher and quicker
self predicate  better
answer begin:  The toyota is better than accord. The reason are easier and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, greater, smoother, quieter
easier, greater, smoother, quieter
winner_aspects_string1 easier and greater
looser_aspects_string1 faster, higher and quicker
make response  I came to the conclusion that toyota is better, because of easier and greater. But it will be useful for you to know that accord is faster, higher and quicker.
gen templates 3 I came to the conclusion that toyota is better, because of easier and greater. But it will be useful for you to know that accord is faster, higher and quicker.
full answer  I came to the conclusion that toyota is better, because of easier and greater. But it will be useful for you to know that accord is faster, higher and quicker.
I came to the conclusion that toyota is better, because of easier and greater. But it will be useful for you to know that accord is faster, higher and quicker.
59 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'does', 'honda,', 'toyota', 'or', 'nissan', 'have', 'a', 'better', 'track', 'record', 'of', 'reliability?']
['nissan']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'does', 'honda', ',', 'Toyota', 'or', 'Nissan', 'have', 'a', 'better', 'track', 'record', 'of', 'reliability', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Toyota', 'objectB': 'Nissan', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'faster', 'lighter', 'simpler'] ['easier', 'smarter', 'easier to park', 'corners']
2
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
type  templates
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
self predicate  b
answer begin:  The nissan is b than toyota. The reason are lighter, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, lighter, simpler
greater, faster, lighter, simpler
winner_aspects_string1 lighter, greater and faster
looser_aspects_string1 easier, easier to park and smarter
make response  Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
gen templates 3 Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
full answer  Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
60 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'suv', 'is', 'better,', 'the', 'honda', 'pilot', 'or', 'the', 'toyota', 'hylander?']
['suv', 'honda', 'toyota']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'suv', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['roomier', 'greater', 'faster', 'expedition'] ['accord', 'easier to see out of this car', 'easier', 'car']
2
winnder: honda  other: suv
acpect winner  greater, faster and roomier
acpect other  easier and easier to see out of this car
type  templates
winnder: honda  other: suv
acpect winner  greater, faster and roomier
acpect other  easier and easier to see out of this car
self predicate  better
answer begin:  The honda is better than suv. The reason are greater, faster and roomier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
roomier, greater, faster, expedition
roomier, greater, faster, expedition
winner_aspects_string1 greater, faster and roomier
looser_aspects_string1 easier and easier to see out of this car
make response  After much thought, I realized that  honda is better, because of greater, faster and roomier. But you should know that suv is easier and easier to see out of this car.
gen templates 3 After much thought, I realized that  honda is better, because of greater, faster and roomier. But you should know that suv is easier and easier to see out of this car.
full answer  After much thought, I realized that  honda is better, because of greater, faster and roomier. But you should know that suv is easier and easier to see out of this car.
After much thought, I realized that  honda is better, because of greater, faster and roomier. But you should know that suv is easier and easier to see out of this car.
61 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'car', 'is', 'better', 'for', 'afamily', 'of', 'four', 'living', 'in', 'the', 'bay', 'area', 'of', 'san', 'fran', 'sisco?', 'ford,honda,lexus', 'or', 'a', 'toyota?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'car', 'is', 'better', 'for', 'afamily', 'of', 'four', 'living', 'in', 'the', 'bay', 'area', 'of', 'San', 'Fran', 'Sisco', '?', 'Ford', ',', 'honda', ',', 'lexus', 'or', 'a', 'toyota', '?']
We can't recognize objects for comparision
62 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['toyota', 'or', 'honda?', 'most', 'dependable', 'suv...4', 'cylinder.', 'does', 'the', 'honda', 'pilot', 'measure', 'up', 'with', 'the', 'rav', '4?']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Toyota', 'or', 'Honda', '?', ' ', 'Most', 'dependable', 'SUV', '...', '4', 'cylinder', '.', ' ', 'Does', 'the', 'Honda', 'Pilot', 'measure', 'up', 'with', 'the', 'Rav', '4', '?']
aspects []
weights []
get url
params {'objectA': 'Toyota', 'objectB': 'Honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
gen templates 3 After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
full answer  After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
After much thought, I realized that  honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
63 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'car', 'is', 'better', 'honda', 'or', 'toyota???', 'am', 'looking', 'to', 'buy', 'one.', 'am', '19', 'm..?']
['honda']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'car', 'is', 'better', 'honda', 'or', 'toyota', '?', '?', '?', 'am', 'looking', 'to', 'buy', 'one', '.', 'am', '19', 'm', '..', '?']
or simple split_sent 5
honda toyota
aspects ['better']
weights [1]
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
gen templates 3 It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
full answer  It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
It's simple! Toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
64 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'would', 'be', 'better', 'to', 'buy', 'a', 'toyota', 'matrix', 'or', 'a', 'honda', 'cr-v?']
['toyota', 'honda']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'toyota', 'objectB': 'honda', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'bigger', 'nicer', 'weaker'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, nicer, weaker
quicker, bigger, nicer, weaker
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  It's simple! Honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
gen templates 3 It's simple! Honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
full answer  It's simple! Honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
It's simple! Honda is better, because of weaker, quicker and bigger. But you should know that toyota is lighter, easier and faster.
65 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'i', 'want', 'the', 'best', '&', 'can', 'only', 'afford', '1', 'which', 'suv', 'should', 'i', 'buy?', 'nissan', 'xterra,', 'honda', 'crv,', 'or', 'toyota', 'rav?']
['suv', 'nissan', 'honda']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'suv', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'bigger', 'smoother'] ['greater', 'engine', 'quicker', 'seating']
2
winnder: nissan  other: suv
acpect winner  lighter, easier and bigger
acpect other  greater and quicker
type  templates
winnder: nissan  other: suv
acpect winner  lighter, easier and bigger
acpect other  greater and quicker
self predicate  better
answer begin:  The nissan is better than suv. The reason are lighter, easier and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, bigger, smoother
lighter, easier, bigger, smoother
winner_aspects_string1 lighter, easier and bigger
looser_aspects_string1 greater and quicker
make response  It's simple! Nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
gen templates 3 It's simple! Nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
full answer  It's simple! Nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
It's simple! Nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
66 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['your', 'choice', 'of', 'minivan', '--', 'toyota', 'sienna', 'vs.', 'honda', 'odyssey?']
['toyota', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
gen templates 3 It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
full answer  It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
67 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'like', 'more', '------->', 'toyota', 'or', 'honda?']
['toyota']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'do', 'you', 'like', 'more', '-------', '>', 'TOYOTA', 'or', 'HONDA', '?']
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'TOYOTA', 'objectB': 'HONDA', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  m
answer begin:  The honda is m than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
gen templates 3 It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
full answer  It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
It's simple! Honda is better, because of weaker, quicker and bigger. But it will be useful for you to know that toyota is lighter, easier and faster.
68 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'car', 'honda', 'civic', '(1.4', 'l)', 'make', '1998', 'or', 'toyota', 'avensis(1.8l)', 'make', '1998?']
['honda', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
gen templates 3 After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
full answer  After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
69 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['i', 'would', 'like', 'to', 'know', 'what', 'is', 'better', 'a', 'honda', 'or', 'toyota?']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I', 'would', 'like', 'to', 'know', 'what', 'is', 'better', ' ', 'a', 'Honda', 'or', 'Toyota', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Honda', 'objectB': 'Toyota', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  b
answer begin:  The toyota is b than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
gen templates 3 After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
full answer  After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
70 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'vehicle', 'is', 'better', 'honda', 'or', 'toyota', 'or', 'hundayi?']
['honda', 'toyota']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
gen templates 3 Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
full answer  Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
Looks like toyota is better, because of faster, easier and easier to drive. Honda is weaker, easier to find and earlier.
71 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'car', 'is', 'better.....a', 'honda', 'or', 'a', 'toyota??']
['honda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'car', 'is', 'better', '.....', 'a', 'honda', 'or', 'a', 'toyota', '?', '?']
or simple split_sent 7
honda a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'honda', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'easier', 'easier to use or smoother manual transmission and clutch', 'greater'] ['safer', 'faster', 'olh', 'shapethis']
2
winnder: a  other: honda
acpect winner  lighter, easier and easier to use or smoother manual transmission and clutch
acpect other  safer and faster
type  templates
winnder: a  other: honda
acpect winner  lighter, easier and easier to use or smoother manual transmission and clutch
acpect other  safer and faster
self predicate  b
answer begin:  The a is b than honda. The reason are lighter, easier and easier to use or smoother manual transmission and clutch. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, easier to use or smoother manual transmission and clutch, greater
lighter, easier, easier to use or smoother manual transmission and clutch, greater
winner_aspects_string1 lighter, easier and easier to use or smoother manual transmission and clutch
looser_aspects_string1 safer and faster
make response  Looks like a is better, because of lighter, easier and easier to use or smoother manual transmission and clutch. Honda is safer and faster.
gen templates 3 Looks like a is better, because of lighter, easier and easier to use or smoother manual transmission and clutch. Honda is safer and faster.
full answer  Looks like a is better, because of lighter, easier and easier to use or smoother manual transmission and clutch. Honda is safer and faster.
Looks like a is better, because of lighter, easier and easier to use or smoother manual transmission and clutch. Honda is safer and faster.
72 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'honda', 'civic', 'better', 'than', 'toyota', 'corolla?']
['honda', 'toyota']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  Looks like toyota is better, because of faster, easier and easier to drive. But i should tell you that honda is weaker, easier to find and earlier.
gen templates 3 Looks like toyota is better, because of faster, easier and easier to drive. But i should tell you that honda is weaker, easier to find and earlier.
full answer  Looks like toyota is better, because of faster, easier and easier to drive. But i should tell you that honda is weaker, easier to find and earlier.
Looks like toyota is better, because of faster, easier and easier to drive. But i should tell you that honda is weaker, easier to find and earlier.
73 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'major', 'differences', 'between', 'a', 'honda', 'crv', 'and', 'a', 'toyota', 'rav4?']
['honda', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'easier to drive', 'faster'] ['earlier', 'weaker', 'easier to find', 'richer']
2
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
type  templates
winnder: toyota  other: honda
acpect winner  faster, easier and easier to drive
acpect other  weaker, easier to find and earlier
self predicate  better
answer begin:  The toyota is better than honda. The reason are faster, easier and easier to drive. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, easier to drive, faster
easier, smoother, easier to drive, faster
winner_aspects_string1 faster, easier and easier to drive
looser_aspects_string1 weaker, easier to find and earlier
make response  After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
gen templates 3 After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
full answer  After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
After much thought, I realized that  toyota is better, because of faster, easier and easier to drive. But you should know that honda is weaker, easier to find and earlier.
74 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['compare', 'toyota', 'vios', 'and', 'honda', 'city,', 'which', 'one', 'do', 'you', 'recommend', 'and', 'why', '?']
['toyota', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'bigger', 'weaker', 'nicer'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, weaker, nicer
quicker, bigger, weaker, nicer
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
gen templates 3 I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
full answer  I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
I came to the conclusion that honda is better, because of weaker, quicker and bigger. Toyota is lighter, easier and faster.
75 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'a', 'toyota', 'corolla', 'better', 'than', 'a', 'honda', 'accord?']
['toyota', 'honda']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'toyota', 'objectB': 'honda', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'bigger', 'nicer', 'weaker'] ['lighter', 'easier', 'faster', 'softer']
2
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
type  templates
winnder: honda  other: toyota
acpect winner  weaker, quicker and bigger
acpect other  lighter, easier and faster
self predicate  better
answer begin:  The honda is better than toyota. The reason are weaker, quicker and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, bigger, nicer, weaker
quicker, bigger, nicer, weaker
winner_aspects_string1 weaker, quicker and bigger
looser_aspects_string1 lighter, easier and faster
make response  It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
gen templates 3 It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
full answer  It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
It's simple! Honda is better, because of weaker, quicker and bigger. But i should tell you that toyota is lighter, easier and faster.
76 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'apple', 'juice', 'and', 'apple', 'cider?']
['juice']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'juice', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'greater', 'higher', 'pomegranates'] ['safer', 'body', 'detoxification', 'recovery']
winnder: and  other: juice
acpect winner  higher and greater
acpect other  safer
type  templates
juice has undeniable advantages. They are higher and greater.
77 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'difference', 'between', 'apple', 'juice', 'and', 'apple', 'cider?']
['juice']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'juice', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'greater', 'higher', 'pomegranates'] ['safer', 'body', 'detoxification', 'recovery']
winnder: and  other: juice
acpect winner  higher and greater
acpect other  safer
type  templates
juice has undeniable advantages. They are higher and greater.
78 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'apple', 'cider', 'and', 'apple', 'juice?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
79 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'between', 'apple', 'cider', 'and', 'apple', 'juice?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
80 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'between', 'apple', 'juice', 'and', 'apple', 'cider??']
['juice']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'juice', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'greater', 'higher', 'pomegranates'] ['safer', 'body', 'detoxification', 'recovery']
winnder: and  other: juice
acpect winner  higher and greater
acpect other  safer
type  templates
juice has undeniable advantages. They are higher and greater.
81 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'for', 'an', 'rpg', 'gamer', 'for', 'a', 'hand', 'held', 'system', 'for', 'xmas,', 'a', 'sony', 'psp', 'or', 'a', 'nintendo', 'ds?']
['sony', 'psp']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'greater', 'sales', 'faster'] ['bigger', 'easier', 'lighter', 'longer']
2
winnder: psp  other: sony
acpect winner  greater, faster and smarter
acpect other  lighter, easier and longer
type  templates
winnder: psp  other: sony
acpect winner  greater, faster and smarter
acpect other  lighter, easier and longer
self predicate  better
answer begin:  The psp is better than sony. The reason are greater, faster and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, greater, sales, faster
smarter, greater, sales, faster
winner_aspects_string1 greater, faster and smarter
looser_aspects_string1 lighter, easier and longer
make response  Looks like psp is better, because of greater, faster and smarter. But you should know that sony is lighter, easier and longer.
gen templates 3 Looks like psp is better, because of greater, faster and smarter. But you should know that sony is lighter, easier and longer.
full answer  Looks like psp is better, because of greater, faster and smarter. But you should know that sony is lighter, easier and longer.
Looks like psp is better, because of greater, faster and smarter. But you should know that sony is lighter, easier and longer.
82 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['nintendo', 'ds', 'or', 'psp...', 'which', 'is', 'better?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Nintendo', 'DS', 'or', 'PSP', '...', 'which', 'is', 'better', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ds', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to learn experience', 'higher', 'cooler', 'cleaner'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  cleaner, easier to learn experience and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  cleaner, easier to learn experience and higher
acpect other  easier to emulate and longer
self predicate  b
answer begin:  The psp is b than ds. The reason are cleaner, easier to learn experience and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, higher, cooler, cleaner
easier to learn experience, higher, cooler, cleaner
winner_aspects_string1 cleaner, easier to learn experience and higher
looser_aspects_string1 easier to emulate and longer
make response  It's simple! Psp is better, because of cleaner, easier to learn experience and higher. But it will be useful for you to know that ds is easier to emulate and longer.
gen templates 3 It's simple! Psp is better, because of cleaner, easier to learn experience and higher. But it will be useful for you to know that ds is easier to emulate and longer.
full answer  It's simple! Psp is better, because of cleaner, easier to learn experience and higher. But it will be useful for you to know that ds is easier to emulate and longer.
It's simple! Psp is better, because of cleaner, easier to learn experience and higher. But it will be useful for you to know that ds is easier to emulate and longer.
83 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better?', 'nintendo', 'ds', 'or', 'sony', 'psp?']
['ds', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['larger', 'psp', 'cooler', 'lighter'] ['longer', 'older', 'stronger', 'easier to make games for iphone and ipod touch']
2
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
type  templates
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
self predicate  better
answer begin:  The sony is better than ds. The reason are larger and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
larger, psp, cooler, lighter
larger, psp, cooler, lighter
winner_aspects_string1 larger and lighter
looser_aspects_string1 stronger, longer and easier to make games for iphone and ipod touch
make response  I would prefer to use sony because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
gen templates 3 I would prefer to use sony because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
full answer  I would prefer to use sony because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
I would prefer to use sony because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
84 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'buy', 'a', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'buy', 'a', 'PSP', 'or', 'Nintendo', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'Nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  better
answer begin:  The nintendo is better than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
85 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'a', 'psp', 'better', 'than', 'a', 'nintendo', 'ds', 'in', 'all', 'aspects?']
['psp', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
gen templates 3 Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
full answer  Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
86 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'nintendo', 'ds', 'or', 'psp?']
['ds']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', 'Nintendo', 'DS', 'or', 'PSP', '?']
aspects ['better']
weights [1]
get url
params {'objectA': 'DS', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to learn experience', 'cleaner', 'higher', 'cooler'] ['franchises', 'longer', 'easier to use then psp', 'easier to emulate']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cleaner, higher, cooler
easier to learn experience, cleaner, higher, cooler
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to use then psp, longer and easier to emulate
make response  I would prefer to use psp because of easier to learn experience, cleaner and higher. Ds is easier to use then psp, longer and easier to emulate.
gen templates 3 I would prefer to use psp because of easier to learn experience, cleaner and higher. Ds is easier to use then psp, longer and easier to emulate.
full answer  I would prefer to use psp because of easier to learn experience, cleaner and higher. Ds is easier to use then psp, longer and easier to emulate.
I would prefer to use psp because of easier to learn experience, cleaner and higher. Ds is easier to use then psp, longer and easier to emulate.
87 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'choose?', 'a', 'psp', 'or', 'a', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'choose', '?', 'A', 'Psp', 'or', 'a', 'Nintendo', 'Ds', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'Psp', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
88 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better:', 'the', 'nintendo', 'ds', 'or', 'the', 'sony', 'psp?']
['ds', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['larger', 'psp', 'cooler', 'lighter'] ['longer', 'older', 'stronger', 'easier to make games for iphone and ipod touch']
2
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
type  templates
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
self predicate  better
answer begin:  The sony is better than ds. The reason are larger and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
larger, psp, cooler, lighter
larger, psp, cooler, lighter
winner_aspects_string1 larger and lighter
looser_aspects_string1 stronger, longer and easier to make games for iphone and ipod touch
make response  It's simple! Sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
gen templates 3 It's simple! Sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
full answer  It's simple! Sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
It's simple! Sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
89 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'differerance', 'between', 'psp,', 'nitendo', 'ds,', 'gameboy', 'advance', 'sp?']
['psp,', 'ds,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  I came to the conclusion that ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
gen templates 3 I came to the conclusion that ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
full answer  I came to the conclusion that ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
I came to the conclusion that ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
90 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better-a', 'psp', 'or', 'a', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'better', '-', 'a', 'PSP', 'or', 'a', 'DS', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
91 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'of', 'these', 'game', 'consoles', 'should', 'i', 'be', 'better', 'off', 'buying,', 'a', 'sony', 'psp', 'or', 'nintendo', 'ds?']
['sony', 'psp']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'greater', 'sales', 'faster'] ['bigger', 'easier', 'lighter', 'longer']
2
winnder: psp  other: sony
acpect winner  greater, faster and smarter
acpect other  lighter, easier and longer
type  templates
winnder: psp  other: sony
acpect winner  greater, faster and smarter
acpect other  lighter, easier and longer
self predicate  better
answer begin:  The psp is better than sony. The reason are greater, faster and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, greater, sales, faster
smarter, greater, sales, faster
winner_aspects_string1 greater, faster and smarter
looser_aspects_string1 lighter, easier and longer
make response  Looks like psp is better, because of greater, faster and smarter. But it will be useful for you to know that sony is lighter, easier and longer.
gen templates 3 Looks like psp is better, because of greater, faster and smarter. But it will be useful for you to know that sony is lighter, easier and longer.
full answer  Looks like psp is better, because of greater, faster and smarter. But it will be useful for you to know that sony is lighter, easier and longer.
Looks like psp is better, because of greater, faster and smarter. But it will be useful for you to know that sony is lighter, easier and longer.
92 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O']
extract_objects_predicates words ['psp', 'vs', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['PSP', 'vs', 'DS', '?']
or simple split_sent 1
PSP DS
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'DS', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
gen templates 3 It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
full answer  It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
93 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'handheld', 'game', 'system,', 'the', 'sony', 'psp', 'or', 'the', 'nintendo', 'ds?']
['sony']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'the', 'best', 'handheld', 'game', 'system', ',', 'the', 'SONY', 'PSP', 'or', 'the', 'NINTENDO', 'DS', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
94 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'you', 'buy', 'a', 'psp', 'or', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'would', 'you', 'buy', 'a', 'PSP', 'or', 'DS', '?']
or simple split_sent 6
PSP DS
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'DS', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
gen templates 3 Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
full answer  Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
Looks like ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
95 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one?', 'sony', 'psp', 'or', 'nintendo', 'ds?']
['sony']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'one', '?', 'Sony', 'PSP', 'or', 'Nintendo', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'Nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'products', 'issue', 'faster'] ['smarter', 'greater', 'safer', 'worse for that']
2
winnder: nintendo  other: sony
acpect winner  faster and quicker
acpect other  safer, greater and worse for that
type  templates
winnder: nintendo  other: sony
acpect winner  faster and quicker
acpect other  safer, greater and worse for that
self predicate  better
answer begin:  The nintendo is better than sony. The reason are faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, products, issue, faster
quicker, products, issue, faster
winner_aspects_string1 faster and quicker
looser_aspects_string1 safer, greater and worse for that
make response  I came to the conclusion that nintendo is better, because of faster and quicker. Sony is safer, greater and worse for that.
gen templates 3 I came to the conclusion that nintendo is better, because of faster and quicker. Sony is safer, greater and worse for that.
full answer  I came to the conclusion that nintendo is better, because of faster and quicker. Sony is safer, greater and worse for that.
I came to the conclusion that nintendo is better, because of faster and quicker. Sony is safer, greater and worse for that.
96 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'a', 'better', 'console', 'a', 'psp,', 'nintendo', 'ds,', 'or', 'a', 'gba?']
['psp,', 'ds,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
gen templates 3 After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
full answer  After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
97 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'be', 'better', 'for', 'rpg', 'games', 'a', 'psp', 'or', 'a', 'ds??']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'would', 'be', 'better', 'for', 'rpg', 'games', 'a', 'psp', 'or', 'a', ' ', 'ds', '?', '?']
or simple split_sent 9
psp a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'psp', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['bigger', 'lighter', 'larger', 'smoother'] ['ds', 'easier to maintain a stable connection for either versus mode or coop play', 'faster', 'gamers']
2
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster and easier to maintain a stable connection for either versus mode or coop play
type  templates
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster and easier to maintain a stable connection for either versus mode or coop play
self predicate  b
answer begin:  The a is b than psp. The reason are lighter, larger and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, lighter, larger, smoother
bigger, lighter, larger, smoother
winner_aspects_string1 lighter, larger and bigger
looser_aspects_string1 faster and easier to maintain a stable connection for either versus mode or coop play
make response  After much thought, I realized that  a is better, because of lighter, larger and bigger. But i should tell you that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
gen templates 3 After much thought, I realized that  a is better, because of lighter, larger and bigger. But i should tell you that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
full answer  After much thought, I realized that  a is better, because of lighter, larger and bigger. But i should tell you that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
After much thought, I realized that  a is better, because of lighter, larger and bigger. But i should tell you that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
98 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'nintendo', 'ds', 'better', 'than', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ds', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'quicker', 'faster to play', 'smoother'] ['easier to learn experience', 'brighter', 'older', 'simpler']
winnder: and  other: ds
acpect winner  lighter, quicker and faster to play
acpect other  brighter, easier to learn experience and simpler
type  templates
ds has undeniable advantages. They are lighter, quicker and faster to play.
99 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'hand', 'held', 'system', 'is', 'better?', 'the', 'nintendo', 'ds', 'or', 'the', 'psp?why?']
['ds']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'hand', 'held', 'system', 'is', 'better', '?', 'the', 'nintendo', 'DS', 'or', 'the', 'PSP?why', '?']
or simple split_sent 10
DS the
aspects ['better?']
weights [1]
get url
params {'objectA': 'DS', 'objectB': 'the', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['easier to learn experience', 'easier', 'lighter', 'greater'] ['x360', 'richer', 'longer', 'screen']
2
winnder: the  other: ds
acpect winner  lighter, easier to learn experience and greater
acpect other  longer and richer
type  templates
winnder: the  other: ds
acpect winner  lighter, easier to learn experience and greater
acpect other  longer and richer
self predicate  better?
answer begin:  The the is better? than ds. The reason are lighter, easier to learn experience and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, easier, lighter, greater
easier to learn experience, easier, lighter, greater
winner_aspects_string1 lighter, easier to learn experience and greater
looser_aspects_string1 longer and richer
make response  It's simple! The is better, because of lighter, easier to learn experience and greater. Ds is longer and richer.
gen templates 3 It's simple! The is better, because of lighter, easier to learn experience and greater. Ds is longer and richer.
full answer  It's simple! The is better, because of lighter, easier to learn experience and greater. Ds is longer and richer.
It's simple! The is better, because of lighter, easier to learn experience and greater. Ds is longer and richer.
100 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'a', 'ds', 'or', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'a', 'DS', 'or', 'PSP', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'DS', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to learn experience', 'higher', 'cooler', 'cleaner'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  cleaner, easier to learn experience and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  cleaner, easier to learn experience and higher
acpect other  easier to emulate and longer
self predicate  b
answer begin:  The psp is b than ds. The reason are cleaner, easier to learn experience and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, higher, cooler, cleaner
easier to learn experience, higher, cooler, cleaner
winner_aspects_string1 cleaner, easier to learn experience and higher
looser_aspects_string1 easier to emulate and longer
make response  I would prefer to use psp because of cleaner, easier to learn experience and higher. But you should know that ds is easier to emulate and longer.
gen templates 3 I would prefer to use psp because of cleaner, easier to learn experience and higher. But you should know that ds is easier to emulate and longer.
full answer  I would prefer to use psp because of cleaner, easier to learn experience and higher. But you should know that ds is easier to emulate and longer.
I would prefer to use psp because of cleaner, easier to learn experience and higher. But you should know that ds is easier to emulate and longer.
101 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'portable', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'portable', 'psp', 'or', 'nintendo', 'ds', '?']
or simple split_sent 6
psp nintendo
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  better
answer begin:  The nintendo is better than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
102 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'better', 'psp', 'or', 'ds?']
['psp']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', "'s", 'better', 'PSP', 'or', 'DS', '?']
or simple split_sent 4
PSP DS
aspects ['better']
weights [1]
get url
params {'objectA': 'PSP', 'objectB': 'DS', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['lighter', 'greater', 'longer', 'franchises'] ['easier to learn experience', 'cleaner', 'higher', 'faster']
2
winnder: ds  other: psp
acpect winner  lighter, greater and longer
acpect other  easier to learn experience, cleaner and faster
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and longer
acpect other  easier to learn experience, cleaner and faster
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, longer, franchises
lighter, greater, longer, franchises
winner_aspects_string1 lighter, greater and longer
looser_aspects_string1 easier to learn experience, cleaner and faster
make response  After much thought, I realized that  ds is better, because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
gen templates 3 After much thought, I realized that  ds is better, because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
full answer  After much thought, I realized that  ds is better, because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
After much thought, I realized that  ds is better, because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
103 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'the', 'ds', 'nintendo', 'or', 'the', 'psp????']
['ds']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'the', 'DS', 'Nintendo', 'or', 'the', 'PSP', '?', '?', '?', '?']
len(obj1) > 0 and len(obj2) == 0
aspects ['better']
weights [1]
get url
params {'objectA': 'the DS Nintendo', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
create fro json predicates ['better']
create fro json self.predicates better
aspects  [] []
winnder: and  other: the ds nintendo
acpect winner  
acpect other  
type  templates
and is better.
104 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'system', 'should', 'i', 'get', 'and', 'why?', 'gameboy', 'micro,', 'nintendo', 'ds,', 'or', 'psp?']
['ds,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'system', 'should', 'i', 'get', 'and', 'why', '?', 'Gameboy', 'Micro', ',', 'Nintendo', 'DS', ',', 'or', 'PSP', '?']
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'PSP', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn experience', 'cooler', 'cleaner', 'higher'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cooler, cleaner, higher
easier to learn experience, cooler, cleaner, higher
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to emulate and longer
make response  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
gen templates 3 After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
full answer  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
105 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['when', 'it', 'comes', 'to', 'handhelds,which', 'is', 'better?', 'psp', 'or', 'nds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['When', 'it', 'comes', 'to', 'Handhelds', ',', 'which', 'is', 'better', '?', 'PSP', 'or', 'NDS', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'NDS', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['fire', 'emblem'] ['lighter', 'sales']
2
winnder: nds  other: psp
acpect winner  
acpect other  lighter
type  templates
winnder: nds  other: psp
acpect winner  
acpect other  lighter
self predicate  b
answer begin:  The nds is b than psp. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
fire, emblem
fire, emblem
smth wrong in answer generation, please try again
106 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'is', '(going', 'to', 'be)', 'better?', 'play', 'station', '3', 'or', 'xbox', '360?', 'and', 'psp', 'and', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'think', 'is', '(', 'going', 'to', 'be', ')', 'better', '?', 'Play', 'Station', '3', 'or', 'Xbox', '360', '?', ' ', 'And', 'PSP', 'and', 'Nintendo', 'DS', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': '3', 'objectB': 'Xbox 360', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'easier to use operating environment', 'higher', 'faster'] ['heavier', 'lighter', 'hardware', 'easier to harness']
2
winnder: xbox 360  other: 3
acpect winner  greater, higher and faster
acpect other  lighter, heavier and easier to harness
type  templates
winnder: xbox 360  other: 3
acpect winner  greater, higher and faster
acpect other  lighter, heavier and easier to harness
self predicate  b
answer begin:  The xbox 360 is b than 3. The reason are greater, higher and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to use operating environment, higher, faster
greater, easier to use operating environment, higher, faster
winner_aspects_string1 greater, higher and faster
looser_aspects_string1 lighter, heavier and easier to harness
make response  I came to the conclusion that xbox 360 is better, because of greater, higher and faster. But i should tell you that 3 is lighter, heavier and easier to harness.
gen templates 3 I came to the conclusion that xbox 360 is better, because of greater, higher and faster. But i should tell you that 3 is lighter, heavier and easier to harness.
full answer  I came to the conclusion that xbox 360 is better, because of greater, higher and faster. But i should tell you that 3 is lighter, heavier and easier to harness.
I came to the conclusion that xbox 360 is better, because of greater, higher and faster. But i should tell you that 3 is lighter, heavier and easier to harness.
107 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'has', 'better', 'games,', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'has', 'better', 'games', ',', 'PSP', 'or', 'Nintendo', 'DS', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'Nintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  b
answer begin:  The nintendo is b than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
108 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'better,', 'psp', 'or', 'nintendo', 'ds?']
['psp']
['better,']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', "'s", 'better', ',', 'psp', 'or', 'nintendo', 'ds', '?']
or simple split_sent 5
psp nintendo
aspects ['better,']
weights [1]
get url
params {'objectA': 'psp', 'objectB': 'nintendo', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  better,
answer begin:  The nintendo is better, than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
109 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'handheld', 'is', 'better', 'psp', 'or', 'nintendo', 'ds?why?']
['psp']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'handheld', 'is', 'better', 'PSP', 'or', 'Nintendo', 'DS?Why', '?']
aspects ['better']
weights [1]
get url
params {'objectA': 'PSP', 'objectB': 'Nintendo', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  better
answer begin:  The nintendo is better than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
110 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'psp', 'or', 'nintendo', 'ds', '?']
or simple split_sent 4
psp nintendo
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'psp', 'objectB': 'nintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  b
answer begin:  The nintendo is b than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
111 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'would', 'be', 'better', 'for', 'gaming,', 'nintendo', 'ds', 'or', 'psp?']
['ds']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'would', 'be', 'better', 'for', 'gaming', ',', 'nintendo', 'DS', 'or', 'PSP', '?']
or simple split_sent 9
DS PSP
aspects ['better']
weights [1]
get url
params {'objectA': 'DS', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to learn experience', 'cleaner', 'higher', 'cooler'] ['franchises', 'longer', 'easier to use then psp', 'easier to emulate']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cleaner, higher, cooler
easier to learn experience, cleaner, higher, cooler
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to use then psp, longer and easier to emulate
make response  I would prefer to use psp because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
gen templates 3 I would prefer to use psp because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
full answer  I would prefer to use psp because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
I would prefer to use psp because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
112 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', '-', 'nintendo', 'ds', 'or', 'psp?,', 'and', 'what', 'is', 'better', 'again,', 'revoltion,', 'ps3,', 'or', '360?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', '-', 'Nintendo', 'DS', 'or', 'PSP', '?', ',', 'and', 'what', 'is', 'better', 'again', ',', 'Revoltion', ',', 'PS3', ',', 'OR', '360', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ds', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to learn experience', 'higher', 'cooler', 'cleaner'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  cleaner, easier to learn experience and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  cleaner, easier to learn experience and higher
acpect other  easier to emulate and longer
self predicate  b
answer begin:  The psp is b than ds. The reason are cleaner, easier to learn experience and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, higher, cooler, cleaner
easier to learn experience, higher, cooler, cleaner
winner_aspects_string1 cleaner, easier to learn experience and higher
looser_aspects_string1 easier to emulate and longer
make response  Looks like psp is better, because of cleaner, easier to learn experience and higher. Ds is easier to emulate and longer.
gen templates 3 Looks like psp is better, because of cleaner, easier to learn experience and higher. Ds is easier to emulate and longer.
full answer  Looks like psp is better, because of cleaner, easier to learn experience and higher. Ds is easier to emulate and longer.
Looks like psp is better, because of cleaner, easier to learn experience and higher. Ds is easier to emulate and longer.
113 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['psp', 'ds', 'gba', 'gbc', 'ngage.', 'which', 'is', 'better?']
['psp', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
gen templates 3 After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
full answer  After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
114 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better', 'nitendo', 'ds', 'or', 'sony', 'psp?', 'which', 'one', 'will', 'you', 'recommend?']
['ds', 'sony', 'psp?']
['better']
len(objects) 3
aspects ['better']
weights [1]
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['psp', 'larger', 'nintendo', 'year'] ['longer', 'older', 'cutesy', 'hence']
2
winnder: sony  other: ds
acpect winner  larger
acpect other  longer and older
type  templates
winnder: sony  other: ds
acpect winner  larger
acpect other  longer and older
self predicate  better
answer begin:  The sony is better than ds. The reason are larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
psp, larger, nintendo, year
psp, larger, nintendo, year
winner_aspects_string1  and larger
looser_aspects_string1 longer and older
make response  It's simple! Sony is better, because of  and larger. But i should tell you that ds is longer and older.
gen templates 3 It's simple! Sony is better, because of  and larger. But i should tell you that ds is longer and older.
full answer  It's simple! Sony is better, because of  and larger. But i should tell you that ds is longer and older.
It's simple! Sony is better, because of  and larger. But i should tell you that ds is longer and older.
115 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'the', 'ds', 'or', 'the', 'psp', 'pound', 'for', 'pound?']
['ds', 'psp']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn experience', 'cooler', 'cleaner', 'higher'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cooler, cleaner, higher
easier to learn experience, cooler, cleaner, higher
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to emulate and longer
make response  I would prefer to use psp because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
gen templates 3 I would prefer to use psp because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
full answer  I would prefer to use psp because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
I would prefer to use psp because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
116 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['i', 'have', 'a', 'son', 'with', '5', 'years', 'old.', 'which', 'is', 'the', 'best', 'mobile', 'console', 'for', 'his', 'age?', 'nintendo', 'ds', 'or', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I', 'have', 'a', 'son', 'with', '5', 'years', 'old', '.', 'Which', 'is', 'the', 'best', 'mobile', 'console', 'for', 'his', 'age', '?', 'Nintendo', 'DS', 'or', 'PSP', '?']
aspects []
weights []
get url
params {'objectA': 'Nintendo DS', 'objectB': 'PSP', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to play', 'easier', 'larger'] ['bigger', 'younger', 'games', 'impression']
2
winnder: psp  other: nintendo ds
acpect winner  easier to play, greater and larger
acpect other  younger and bigger
type  templates
winnder: psp  other: nintendo ds
acpect winner  easier to play, greater and larger
acpect other  younger and bigger
self predicate  better
answer begin:  The psp is better than nintendo ds. The reason are easier to play, greater and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to play, easier, larger
greater, easier to play, easier, larger
winner_aspects_string1 easier to play, greater and larger
looser_aspects_string1 younger and bigger
make response  It's simple! Psp is better, because of easier to play, greater and larger. But i should tell you that nintendo ds is younger and bigger.
gen templates 3 It's simple! Psp is better, because of easier to play, greater and larger. But i should tell you that nintendo ds is younger and bigger.
full answer  It's simple! Psp is better, because of easier to play, greater and larger. But i should tell you that nintendo ds is younger and bigger.
It's simple! Psp is better, because of easier to play, greater and larger. But i should tell you that nintendo ds is younger and bigger.
117 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better', 'a', 'psp', 'or', 'a', 'nintedo', 'ds.?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 's', 'better', 'a', 'psp', 'or', 'a', 'nintedo', 'ds', '.', '?']
or simple split_sent 5
psp a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'psp', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['bigger', 'lighter', 'larger', 'smoother'] ['ds', 'easier to maintain a stable connection for either versus mode or coop play', 'faster', 'gamers']
2
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster and easier to maintain a stable connection for either versus mode or coop play
type  templates
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster and easier to maintain a stable connection for either versus mode or coop play
self predicate  b
answer begin:  The a is b than psp. The reason are lighter, larger and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, lighter, larger, smoother
bigger, lighter, larger, smoother
winner_aspects_string1 lighter, larger and bigger
looser_aspects_string1 faster and easier to maintain a stable connection for either versus mode or coop play
make response  I would prefer to use a because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
gen templates 3 I would prefer to use a because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
full answer  I would prefer to use a because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
I would prefer to use a because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
118 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'betterr', 'the', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'betterr', 'the', 'psp', 'or', 'nintendo', 'Ds', '?']
or simple split_sent 5
psp nintendo
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  better
answer begin:  The nintendo is better than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
119 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'have', 'a', 'ds', 'and', 'a', 'psp...my', 'friends', 'have', 'been', 'feuding...which', 'is', 'better???']
['ds']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ds', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'quicker', 'faster to play', 'smoother'] ['easier to learn experience', 'brighter', 'older', 'simpler']
winnder: and  other: ds
acpect winner  lighter, quicker and faster to play
acpect other  brighter, easier to learn experience and simpler
type  templates
ds has undeniable advantages. They are lighter, quicker and faster to play.
120 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'is', 'better', 'the', 'nintendo', 'ds', 'or', 'the', 'psp.?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'think', 'is', 'better', 'the', 'Nintendo', 'DS', 'or', 'the', 'PSP', '.', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ds', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'quicker', 'faster to play', 'smoother'] ['easier to learn experience', 'brighter', 'older', 'simpler']
winnder: and  other: ds
acpect winner  lighter, quicker and faster to play
acpect other  brighter, easier to learn experience and simpler
type  templates
ds has undeniable advantages. They are lighter, quicker and faster to play.
121 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'you', 'think', 'i', 'should', 'get', 'a', 'psp', 'or', 'a', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Do', 'you', 'think', 'I', 'should', 'get', 'a', 'PSP', 'or', 'a', 'DS', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
122 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better?', 'the', 'ds', 'or', 'the', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', '?', 'The', 'DS', 'or', 'the', 'PSP', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'DS', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'quicker', 'faster to play', 'smoother'] ['easier to learn experience', 'brighter', 'older', 'simpler']
winnder: and  other: ds
acpect winner  lighter, quicker and faster to play
acpect other  brighter, easier to learn experience and simpler
type  templates
ds has undeniable advantages. They are lighter, quicker and faster to play.
123 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'better', 'buy', 'psp', 'or', 'nintendo', 'ds', 'lite?']
['psp', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
gen templates 3 After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
full answer  After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
After much thought, I realized that  ds is better, because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
124 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'handheld', 'is', 'better', 'ds', 'lite', 'or', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'handheld', 'is', 'better', 'ds', 'lite', 'or', 'psp', '?']
or simple split_sent 6
lite psp
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'lite', 'objectB': 'psp', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['cheaper', 'slimmer'] ['greater', 'quicker']
2
winnder: psp  other: lite
acpect winner  cheaper
acpect other  greater and quicker
type  templates
winnder: psp  other: lite
acpect winner  cheaper
acpect other  greater and quicker
self predicate  b
answer begin:  The psp is b than lite. The reason are cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, slimmer
cheaper, slimmer
winner_aspects_string1  and cheaper
looser_aspects_string1 greater and quicker
make response  Looks like psp is better, because of  and cheaper. But you should know that lite is greater and quicker.
gen templates 3 Looks like psp is better, because of  and cheaper. But you should know that lite is greater and quicker.
full answer  Looks like psp is better, because of  and cheaper. But you should know that lite is greater and quicker.
Looks like psp is better, because of  and cheaper. But you should know that lite is greater and quicker.
125 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'psp', 'or', 'nitendoe', 'ds?']
['psp']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'psp', 'or', 'nitendoe', 'ds', '?']
or simple split_sent 4
psp nitendoe
aspects ['better']
weights [1]
get url
params {'objectA': 'psp', 'objectB': 'nitendoe', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  [] []
2
winnder: nitendoe  other: psp
acpect winner  
acpect other  
type  templates
winnder: nitendoe  other: psp
acpect winner  
acpect other  
self predicate  better
answer begin:  The nitendoe is better than psp. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer nitendoe than psp.
full answer  I would prefer nitendoe than psp.
I would prefer nitendoe than psp.
126 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'nintendo', 'ds', 'lite', 'or', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', ',', 'Nintendo', 'DS', 'Lite', 'or', 'PSP', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Nintendo DS Lite', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['more to get a logo on it', 'bigger', 'dd', 'worth'] []
2
winnder: psp  other: nintendo ds lite
acpect winner  more to get a logo on it and bigger
acpect other  
type  templates
winnder: psp  other: nintendo ds lite
acpect winner  more to get a logo on it and bigger
acpect other  
self predicate  b
answer begin:  The psp is b than nintendo ds lite. The reason are more to get a logo on it and bigger. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like psp is better than nintendo ds lite because it is more to get a logo on it, bigger, dd, worth.
full answer  It seems like psp is better than nintendo ds lite because it is more to get a logo on it, bigger, dd, worth.
It seems like psp is better than nintendo ds lite because it is more to get a logo on it, bigger, dd, worth.
127 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'gaming', 'system', 'should', 'i', 'buy?', 'the', 'ds', 'lite', 'or', 'the', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'Gaming', 'system', 'should', 'I', 'buy', '?', 'The', 'DS', 'Lite', 'or', 'the', 'PSP', '?']
or simple split_sent 10
Lite the
aspects []
weights []
get url
params {'objectA': 'Lite', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to tow', 'longer', 'smoother', 'faster'] ['easier to install and free', 'brighter', 'bigger', 'easier to handle and connect']
2
winnder: lite  other: the
acpect winner  faster, longer and easier to tow
acpect other  brighter, easier to handle and connect and easier to install and free
type  templates
winnder: lite  other: the
acpect winner  faster, longer and easier to tow
acpect other  brighter, easier to handle and connect and easier to install and free
self predicate  better
answer begin:  The lite is better than the. The reason are faster, longer and easier to tow. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to tow, longer, smoother, faster
easier to tow, longer, smoother, faster
winner_aspects_string1 faster, longer and easier to tow
looser_aspects_string1 brighter, easier to handle and connect and easier to install and free
make response  I came to the conclusion that lite is better, because of faster, longer and easier to tow. But it will be useful for you to know that the is brighter, easier to handle and connect and easier to install and free.
gen templates 3 I came to the conclusion that lite is better, because of faster, longer and easier to tow. But it will be useful for you to know that the is brighter, easier to handle and connect and easier to install and free.
full answer  I came to the conclusion that lite is better, because of faster, longer and easier to tow. But it will be useful for you to know that the is brighter, easier to handle and connect and easier to install and free.
I came to the conclusion that lite is better, because of faster, longer and easier to tow. But it will be useful for you to know that the is brighter, easier to handle and connect and easier to install and free.
128 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'psp', 'or', 'ds', 'better?']
['psp', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  I would prefer to use ds because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
gen templates 3 I would prefer to use ds because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
full answer  I would prefer to use ds because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
I would prefer to use ds because of lighter, greater and easier to emulate. But it will be useful for you to know that psp is easier to learn experience, cleaner and higher.
129 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better?', 'ds', 'lite', 'or', 'psp?']
['ds']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'better', '?', 'DS', 'Lite', 'or', 'PSP', '?']
or simple split_sent 6
Lite PSP
aspects ['better?']
weights [1]
get url
params {'objectA': 'Lite', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['cheaper', 'slimmer'] ['greater', 'quicker']
2
winnder: psp  other: lite
acpect winner  cheaper
acpect other  greater and quicker
type  templates
winnder: psp  other: lite
acpect winner  cheaper
acpect other  greater and quicker
self predicate  better?
answer begin:  The psp is better? than lite. The reason are cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, slimmer
cheaper, slimmer
winner_aspects_string1  and cheaper
looser_aspects_string1 greater and quicker
make response  Looks like psp is better, because of  and cheaper. But i should tell you that lite is greater and quicker.
gen templates 3 Looks like psp is better, because of  and cheaper. But i should tell you that lite is greater and quicker.
full answer  Looks like psp is better, because of  and cheaper. But i should tell you that lite is greater and quicker.
Looks like psp is better, because of  and cheaper. But i should tell you that lite is greater and quicker.
130 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'get', 'a', 'PSP', 'or', 'Nintendo', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'Nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  better
answer begin:  The nintendo is better than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
131 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['wat', 'are', 'the', 'biggest', 'differences', 'between', 'the', 'ds', 'and', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'quicker', 'faster to play', 'smoother'] ['easier to learn experience', 'brighter', 'older', 'simpler']
winnder: and  other: ds
acpect winner  lighter, quicker and faster to play
acpect other  brighter, easier to learn experience and simpler
type  templates
ds has undeniable advantages. They are lighter, quicker and faster to play.
132 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'ds', 'or', 'psp?']
['ds']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'ds', 'or', 'psp', '?']
or simple split_sent 4
ds psp
aspects ['better']
weights [1]
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to learn experience', 'cleaner', 'higher', 'cooler'] ['franchises', 'longer', 'easier to use then psp', 'easier to emulate']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cleaner, higher, cooler
easier to learn experience, cleaner, higher, cooler
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to use then psp, longer and easier to emulate
make response  It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
gen templates 3 It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
full answer  It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
133 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'nintendo', 'ds', 'or', 'psp?']
['ds']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'Nintendo', 'ds', 'or', 'psp', '?']
or simple split_sent 5
ds psp
aspects ['better']
weights [1]
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to learn experience', 'cleaner', 'higher', 'cooler'] ['franchises', 'longer', 'easier to use then psp', 'easier to emulate']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cleaner, higher, cooler
easier to learn experience, cleaner, higher, cooler
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to use then psp, longer and easier to emulate
make response  It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
gen templates 3 It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
full answer  It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to use then psp, longer and easier to emulate.
134 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'best', 'for', 'a', '5yr', 'old', 'boy', 'to', 'play', 'a', 'psp', 'or', 'nintendo', 'ds', 'lite?']
['psp', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  It's simple! Ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
gen templates 3 It's simple! Ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
full answer  It's simple! Ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
It's simple! Ds is better, because of lighter, greater and easier to emulate. But i should tell you that psp is easier to learn experience, cleaner and higher.
135 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'nintendo', 'ds', 'or', 'sony', 'psp', 'and', 'why?']
['ds', 'sony', 'psp']
['better']
len(objects) 3
aspects ['better']
weights [1]
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['psp', 'larger', 'nintendo', 'year'] ['longer', 'older', 'cutesy', 'hence']
2
winnder: sony  other: ds
acpect winner  larger
acpect other  longer and older
type  templates
winnder: sony  other: ds
acpect winner  larger
acpect other  longer and older
self predicate  better
answer begin:  The sony is better than ds. The reason are larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
psp, larger, nintendo, year
psp, larger, nintendo, year
winner_aspects_string1  and larger
looser_aspects_string1 longer and older
make response  After much thought, I realized that  sony is better, because of  and larger. But you should know that ds is longer and older.
gen templates 3 After much thought, I realized that  sony is better, because of  and larger. But you should know that ds is longer and older.
full answer  After much thought, I realized that  sony is better, because of  and larger. But you should know that ds is longer and older.
After much thought, I realized that  sony is better, because of  and larger. But you should know that ds is longer and older.
136 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'PSP', 'or', 'Nintendo', 'DS', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'Nintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  b
answer begin:  The nintendo is b than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
137 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['would', 'you', 'prefer', 'a', 'ds', 'or', 'a', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Would', 'you', 'prefer', 'a', 'DS', 'or', 'a', 'PSP', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'DS', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'quicker', 'faster to play', 'smoother'] ['easier to learn experience', 'brighter', 'older', 'simpler']
winnder: and  other: ds
acpect winner  lighter, quicker and faster to play
acpect other  brighter, easier to learn experience and simpler
type  templates
ds has undeniable advantages. They are lighter, quicker and faster to play.
138 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'nintindo', 'ds', 'or', 'psp?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'Nintindo', 'Ds', 'or', 'PSP', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Nintindo Ds', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: psp  other: nintindo ds
acpect winner  
acpect other  
type  templates
winnder: psp  other: nintindo ds
acpect winner  
acpect other  
self predicate  b
answer begin:  The psp is b than nintindo ds. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer psp than nintindo ds.
full answer  I would prefer psp than nintindo ds.
I would prefer psp than nintindo ds.
139 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'nintendo', 'ds', 'or', 'psp?', 'and', 'why?']
['ds', 'psp?']
['better,']
len(objects) 2
aspects ['better,']
weights [1]
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['easier to learn experience', 'cleaner', 'higher', 'cooler'] ['franchises', 'longer', 'easier to use then psp', 'easier to emulate']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
self predicate  better,
answer begin:  The psp is better, than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cleaner, higher, cooler
easier to learn experience, cleaner, higher, cooler
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to use then psp, longer and easier to emulate
make response  It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
gen templates 3 It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
full answer  It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
It's simple! Psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to use then psp, longer and easier to emulate.
140 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'psp', 'or', 'nitendo', 'ds?']
['psp']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'psp', 'or', 'nitendo', 'ds', '?']
or simple split_sent 4
psp nitendo
aspects ['better']
weights [1]
get url
params {'objectA': 'psp', 'objectB': 'nitendo', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  [] []
2
winnder: nitendo  other: psp
acpect winner  
acpect other  
type  templates
winnder: nitendo  other: psp
acpect winner  
acpect other  
self predicate  better
answer begin:  The nitendo is better than psp. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer nitendo than psp.
full answer  I would prefer nitendo than psp.
I would prefer nitendo than psp.
141 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'nintendo', 'ds', 'or', 'psp?', 'and', 'why?']
['ds', 'psp?']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to learn experience', 'cleaner', 'higher', 'cooler'] ['franchises', 'longer', 'easier to use then psp', 'easier to emulate']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to use then psp, longer and easier to emulate
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cleaner, higher, cooler
easier to learn experience, cleaner, higher, cooler
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to use then psp, longer and easier to emulate
make response  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But it will be useful for you to know that ds is easier to use then psp, longer and easier to emulate.
gen templates 3 After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But it will be useful for you to know that ds is easier to use then psp, longer and easier to emulate.
full answer  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But it will be useful for you to know that ds is easier to use then psp, longer and easier to emulate.
After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But it will be useful for you to know that ds is easier to use then psp, longer and easier to emulate.
142 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'better', 'a', 'ds', 'or', 'a', 'psp', 'for', 'christmas?']
['ds', 'psp']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn experience', 'cooler', 'cleaner', 'higher'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cooler, cleaner, higher
easier to learn experience, cooler, cleaner, higher
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to emulate and longer
make response  Looks like psp is better, because of easier to learn experience, cleaner and higher. Ds is easier to emulate and longer.
gen templates 3 Looks like psp is better, because of easier to learn experience, cleaner and higher. Ds is easier to emulate and longer.
full answer  Looks like psp is better, because of easier to learn experience, cleaner and higher. Ds is easier to emulate and longer.
Looks like psp is better, because of easier to learn experience, cleaner and higher. Ds is easier to emulate and longer.
143 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['whats', 'better', 'a', 'nintendo', 'ds', 'or', 'a', 'sony', 'psp?']
['ds', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['larger', 'psp', 'cooler', 'lighter'] ['longer', 'older', 'stronger', 'easier to make games for iphone and ipod touch']
2
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
type  templates
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
self predicate  better
answer begin:  The sony is better than ds. The reason are larger and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
larger, psp, cooler, lighter
larger, psp, cooler, lighter
winner_aspects_string1 larger and lighter
looser_aspects_string1 stronger, longer and easier to make games for iphone and ipod touch
make response  I would prefer to use sony because of larger and lighter. But i should tell you that ds is stronger, longer and easier to make games for iphone and ipod touch.
gen templates 3 I would prefer to use sony because of larger and lighter. But i should tell you that ds is stronger, longer and easier to make games for iphone and ipod touch.
full answer  I would prefer to use sony because of larger and lighter. But i should tell you that ds is stronger, longer and easier to make games for iphone and ipod touch.
I would prefer to use sony because of larger and lighter. But i should tell you that ds is stronger, longer and easier to make games for iphone and ipod touch.
144 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'xbox', '360', 'or', 'the', 'psp,', 'or', 'nintendo', 'ds', 'lite?']
['ds']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'xbox', '360', 'or', 'the', 'psp', ',', 'or', 'nintendo', 'ds', 'lite', '?']
or simple split_sent 6
360 the
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['ps3', 'sense', 'smoother', 'smootherbetter'] ['easier to harness', 'easier', 'easier to split things off', 'title']
2
winnder: the  other: 360
acpect winner  
acpect other  easier, easier to harness and easier to split things off
type  templates
winnder: the  other: 360
acpect winner  
acpect other  easier, easier to harness and easier to split things off
self predicate  better
answer begin:  The the is better than 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
ps3, sense, smoother, smootherbetter
ps3, sense, smoother, smootherbetter
smth wrong in answer generation, please try again
145 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'would', 'you', 'get', 'and', 'why', '-', 'nintendo', 'ds', 'lite', 'or', 'sony', 'psp?']
['ds', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['larger', 'psp', 'cooler', 'lighter'] ['longer', 'older', 'stronger', 'easier to make games for iphone and ipod touch']
2
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
type  templates
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
self predicate  better
answer begin:  The sony is better than ds. The reason are larger and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
larger, psp, cooler, lighter
larger, psp, cooler, lighter
winner_aspects_string1 larger and lighter
looser_aspects_string1 stronger, longer and easier to make games for iphone and ipod touch
make response  After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
gen templates 3 After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
full answer  After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
146 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'seventh', 'generation', 'video', 'game', 'system', '(wii,', 'xbox', '360,', 'nintendo', 'ds,', 'psp,', 'ps3)', 'will', 'be', 'best?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
147 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'system', 'is', 'better:sony', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'system', 'is', 'better', ':', 'sony', 'psp', 'or', 'nintendo', 'ds', '?']
or simple split_sent 7
psp nintendo
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'psp', 'objectB': 'nintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  b
answer begin:  The nintendo is b than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
148 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better,', 'the', 'psp', 'or', 'nintendo', 'ds', 'and', 'why?']
['psp', 'ds']
['better,']
len(objects) 2
aspects ['better,']
weights [1]
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['lighter', 'greater', 'longer', 'franchises'] ['easier to learn experience', 'cleaner', 'higher', 'faster']
2
winnder: ds  other: psp
acpect winner  lighter, greater and longer
acpect other  easier to learn experience, cleaner and faster
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and longer
acpect other  easier to learn experience, cleaner and faster
self predicate  better,
answer begin:  The ds is better, than psp. The reason are lighter, greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, longer, franchises
lighter, greater, longer, franchises
winner_aspects_string1 lighter, greater and longer
looser_aspects_string1 easier to learn experience, cleaner and faster
make response  I would prefer to use ds because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
gen templates 3 I would prefer to use ds because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
full answer  I would prefer to use ds because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
I would prefer to use ds because of lighter, greater and longer. But it will be useful for you to know that psp is easier to learn experience, cleaner and faster.
149 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'system', 'is', 'better', 'psp', 'or', 'nintendo', 'ds?']
['psp']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'system', 'is', 'better', 'psp', 'or', 'nintendo', 'ds', '?']
or simple split_sent 5
psp nintendo
aspects ['better']
weights [1]
get url
params {'objectA': 'psp', 'objectB': 'nintendo', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['greater', 'bigger', 'lighter', 'cheaper'] ['ds', 'niches', 'console', 'market']
2
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
type  templates
winnder: nintendo  other: psp
acpect winner  lighter, greater and bigger
acpect other  
self predicate  better
answer begin:  The nintendo is better than psp. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, cheaper
greater, bigger, lighter, cheaper
winner_aspects_string1 lighter, greater and bigger
smth wrong in answer generation, please try again
150 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'ds', 'psp', 'ps2', 'or', 'x', 'box', '360?']
['ds', 'psp', 'ps2']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn experience', 'cooler', 'cleaner', 'higher'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cooler, cleaner, higher
easier to learn experience, cooler, cleaner, higher
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to emulate and longer
make response  I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
gen templates 3 I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
full answer  I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
151 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'nintendo', 'ds', 'or', 'psp', '?']
['ds', 'psp']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn experience', 'cooler', 'cleaner', 'higher'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cooler, cleaner, higher
easier to learn experience, cooler, cleaner, higher
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to emulate and longer
make response  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
gen templates 3 After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
full answer  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
152 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'better', 'handheld', 'game', 'now', 'psp', 'or', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'the', 'better', 'handheld', 'game', 'now', 'PSP', 'or', 'Nintendo', 'DS', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'Nintendo DS', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to play', 'larger'] ['easier', 'bigger', 'lighter', 'cooler']
2
winnder: psp  other: nintendo ds
acpect winner  easier to play and larger
acpect other  lighter, easier and bigger
type  templates
winnder: psp  other: nintendo ds
acpect winner  easier to play and larger
acpect other  lighter, easier and bigger
self predicate  b
answer begin:  The psp is b than nintendo ds. The reason are easier to play and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to play, larger
easier to play, larger
winner_aspects_string1 easier to play and larger
looser_aspects_string1 lighter, easier and bigger
make response  It's simple! Psp is better, because of easier to play and larger. But it will be useful for you to know that nintendo ds is lighter, easier and bigger.
gen templates 3 It's simple! Psp is better, because of easier to play and larger. But it will be useful for you to know that nintendo ds is lighter, easier and bigger.
full answer  It's simple! Psp is better, because of easier to play and larger. But it will be useful for you to know that nintendo ds is lighter, easier and bigger.
It's simple! Psp is better, because of easier to play and larger. But it will be useful for you to know that nintendo ds is lighter, easier and bigger.
153 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['do', 'you', 'think', 'i', 'am', 'better', 'off', 'buying', 'the', 'nintendo', 'ds', 'lite', 'or', 'sony', 'psp?']
['ds', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['larger', 'psp', 'cooler', 'lighter'] ['longer', 'older', 'stronger', 'easier to make games for iphone and ipod touch']
2
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
type  templates
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
self predicate  better
answer begin:  The sony is better than ds. The reason are larger and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
larger, psp, cooler, lighter
larger, psp, cooler, lighter
winner_aspects_string1 larger and lighter
looser_aspects_string1 stronger, longer and easier to make games for iphone and ipod touch
make response  I came to the conclusion that sony is better, because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
gen templates 3 I came to the conclusion that sony is better, because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
full answer  I came to the conclusion that sony is better, because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
I came to the conclusion that sony is better, because of larger and lighter. Ds is stronger, longer and easier to make games for iphone and ipod touch.
154 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'nintendo', 'ds,', 'or', 'sony', 'psp?']
['ds,', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['larger', 'psp', 'cooler', 'lighter'] ['longer', 'older', 'stronger', 'easier to make games for iphone and ipod touch']
2
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
type  templates
winnder: sony  other: ds
acpect winner  larger and lighter
acpect other  stronger, longer and easier to make games for iphone and ipod touch
self predicate  better
answer begin:  The sony is better than ds. The reason are larger and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
larger, psp, cooler, lighter
larger, psp, cooler, lighter
winner_aspects_string1 larger and lighter
looser_aspects_string1 stronger, longer and easier to make games for iphone and ipod touch
make response  After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
gen templates 3 After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
full answer  After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
After much thought, I realized that  sony is better, because of larger and lighter. But you should know that ds is stronger, longer and easier to make games for iphone and ipod touch.
155 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'a', 'psp', 'or', 'a', 'nintendo', 'ds?', 'and', 'why.?']
['psp', 'ds?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
gen templates 3 It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
full answer  It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
It's simple! Ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
156 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'psp', 'or', 'a', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'get', 'a', 'PSP', 'or', 'a', 'DS', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
157 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wich', 'is', 'best,', 'the', 'psp', 'or', 'the', 'nintendo', 'ds?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['wich', 'is', 'best', ',', 'the', 'PSP', 'or', 'the', 'NINTENDO', 'DS', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
158 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'best:', 'ps3,', 'xbox', '360,', 'or', 'revolution?', 'ps2,', 'xbox,', 'or', 'gamecube?', 'psp', 'or', 'ds?']
['gamecube?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'best', ':', 'PS3', ',', 'XBox', '360', ',', 'or', 'Revolution', '?', 'PS2', ',', 'XBox', ',', 'or', 'Gamecube', '?', 'PSP', 'or', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'Revolution', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'nintendo', 'greater', 'imho'] []
2
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
type  templates
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
self predicate  better
answer begin:  The revolution is better than gamecube. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
full answer  It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
159 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'think', 'is', 'better,', 'the', 'psp', 'or', 'nintendo', 'ds', 'lite?']
['psp', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier to emulate', 'inferior'] ['easier to learn experience', 'cleaner', 'higher', 'easier']
2
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
type  templates
winnder: ds  other: psp
acpect winner  lighter, greater and easier to emulate
acpect other  easier to learn experience, cleaner and higher
self predicate  better
answer begin:  The ds is better than psp. The reason are lighter, greater and easier to emulate. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier to emulate, inferior
lighter, greater, easier to emulate, inferior
winner_aspects_string1 lighter, greater and easier to emulate
looser_aspects_string1 easier to learn experience, cleaner and higher
make response  Looks like ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
gen templates 3 Looks like ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
full answer  Looks like ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
Looks like ds is better, because of lighter, greater and easier to emulate. Psp is easier to learn experience, cleaner and higher.
160 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better', 'to', 'get', 'a', 'game', 'boy', 'micro,', 'nintendo', 'ds,', 'or', 'a', 'psp', 'as', 'a', 'portable', 'handheld', 'system', '?']
['game', 'ds,', 'psp']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'game', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier to type', 'greater', 'smarter'] ['easier for sure', 'friendlier', 'more to enjoy that game', 'phone']
2
winnder: ds  other: game
acpect winner  faster, easier to type and smarter
acpect other  friendlier, more to enjoy that game and easier for sure
type  templates
winnder: ds  other: game
acpect winner  faster, easier to type and smarter
acpect other  friendlier, more to enjoy that game and easier for sure
self predicate  better
answer begin:  The ds is better than game. The reason are faster, easier to type and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to type, greater, smarter
faster, easier to type, greater, smarter
winner_aspects_string1 faster, easier to type and smarter
looser_aspects_string1 friendlier, more to enjoy that game and easier for sure
make response  I came to the conclusion that ds is better, because of faster, easier to type and smarter. Game is friendlier, more to enjoy that game and easier for sure.
gen templates 3 I came to the conclusion that ds is better, because of faster, easier to type and smarter. Game is friendlier, more to enjoy that game and easier for sure.
full answer  I came to the conclusion that ds is better, because of faster, easier to type and smarter. Game is friendlier, more to enjoy that game and easier for sure.
I came to the conclusion that ds is better, because of faster, easier to type and smarter. Game is friendlier, more to enjoy that game and easier for sure.
161 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['apple', 'vs', 'microsoft', '-', 'which', 'do', 'you', 'like', 'better?']
['apple', 'microsoft']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'friendlier', 'livelier', 'greedier'] ['faster', 'os', 'safer', 'smarter']
2
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
type  templates
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
self predicate  better
answer begin:  The microsoft is better than apple. The reason are friendlier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, friendlier, livelier, greedier
smoother, friendlier, livelier, greedier
winner_aspects_string1  and friendlier
looser_aspects_string1 safer, faster and smarter
make response  It's simple! Microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
gen templates 3 It's simple! Microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
full answer  It's simple! Microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
It's simple! Microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
162 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['wich', 'is', 'better', 'microsoft', 'or', 'apple?']
['microsoft']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Wich', 'is', 'better', 'Microsoft', 'or', 'Apple', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Microsoft', 'objectB': 'Apple', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'greater', 'faster', 'technology'] ['safer', 'years', 'smarter', 'quicker']
2
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
type  templates
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
self predicate  b
answer begin:  The microsoft is b than apple. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, greater, faster, technology
smoother, greater, faster, technology
winner_aspects_string1 faster and greater
looser_aspects_string1 safer, smarter and quicker
make response  After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
gen templates 3 After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
full answer  After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
163 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better:', 'apple', 'or', 'microsoft?']
['apple']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', ':', 'Apple', 'or', 'Microsoft', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Apple', 'objectB': 'Microsoft', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'friendlier', 'livelier', 'greedier'] ['faster', 'os', 'safer', 'smarter']
2
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
type  templates
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
self predicate  b
answer begin:  The microsoft is b than apple. The reason are friendlier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, friendlier, livelier, greedier
smoother, friendlier, livelier, greedier
winner_aspects_string1  and friendlier
looser_aspects_string1 safer, faster and smarter
make response  After much thought, I realized that  microsoft is better, because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
gen templates 3 After much thought, I realized that  microsoft is better, because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
full answer  After much thought, I realized that  microsoft is better, because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
After much thought, I realized that  microsoft is better, because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
164 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['would', 'you', 'pick', 'apple', 'or', 'microsoft?', 'and', 'why?']
['apple', 'microsoft?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'friendlier', 'livelier', 'greedier'] ['faster', 'os', 'safer', 'smarter']
2
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
type  templates
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
self predicate  better
answer begin:  The microsoft is better than apple. The reason are friendlier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, friendlier, livelier, greedier
smoother, friendlier, livelier, greedier
winner_aspects_string1  and friendlier
looser_aspects_string1 safer, faster and smarter
make response  It's simple! Microsoft is better, because of  and friendlier. But it will be useful for you to know that apple is safer, faster and smarter.
gen templates 3 It's simple! Microsoft is better, because of  and friendlier. But it will be useful for you to know that apple is safer, faster and smarter.
full answer  It's simple! Microsoft is better, because of  and friendlier. But it will be useful for you to know that apple is safer, faster and smarter.
It's simple! Microsoft is better, because of  and friendlier. But it will be useful for you to know that apple is safer, faster and smarter.
165 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['are', 'apple', 'laptops', 'better', 'or', 'windows', 'microsoft?']
['apple']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Are', 'Apple', 'laptops', 'better', 'or', 'Windows', 'Microsoft', '?']
aspects ['better']
weights [1]
get url
params {'objectA': 'apple', 'objectB': 'Windows Microsoft', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  [] ['microsoft']
2
winnder: windows microsoft  other: apple
acpect winner  
acpect other  
type  templates
winnder: windows microsoft  other: apple
acpect winner  
acpect other  
self predicate  better
answer begin:  The windows microsoft is better than apple. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 Looks like windows microsoft is better than apple, but apple is microsoft.
full answer  Looks like windows microsoft is better than apple, but apple is microsoft.
Looks like windows microsoft is better than apple, but apple is microsoft.
166 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['do', 'u', 'think', 'apple', 'computers', 'are', 'better', 'than', 'microsoft', 'computers?']
['apple', 'microsoft']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'friendlier', 'livelier', 'greedier'] ['faster', 'os', 'safer', 'smarter']
2
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
type  templates
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
self predicate  better
answer begin:  The microsoft is better than apple. The reason are friendlier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, friendlier, livelier, greedier
smoother, friendlier, livelier, greedier
winner_aspects_string1  and friendlier
looser_aspects_string1 safer, faster and smarter
make response  I would prefer to use microsoft because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
gen templates 3 I would prefer to use microsoft because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
full answer  I would prefer to use microsoft because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
I would prefer to use microsoft because of  and friendlier. But i should tell you that apple is safer, faster and smarter.
167 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'better', 'apple', 'or', 'microsoft?']
['apple']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 's', 'better', 'apple', 'or', 'microsoft', '?']
or simple split_sent 4
apple microsoft
aspects ['better']
weights [1]
get url
params {'objectA': 'apple', 'objectB': 'microsoft', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['smoother', 'lighter', 'nimbler', 'longer'] ['faster', 'os', 'safer', 'smarter']
2
winnder: microsoft  other: apple
acpect winner  lighter and longer
acpect other  safer, faster and smarter
type  templates
winnder: microsoft  other: apple
acpect winner  lighter and longer
acpect other  safer, faster and smarter
self predicate  better
answer begin:  The microsoft is better than apple. The reason are lighter and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, lighter, nimbler, longer
smoother, lighter, nimbler, longer
winner_aspects_string1 lighter and longer
looser_aspects_string1 safer, faster and smarter
make response  I came to the conclusion that microsoft is better, because of lighter and longer. But you should know that apple is safer, faster and smarter.
gen templates 3 I came to the conclusion that microsoft is better, because of lighter and longer. But you should know that apple is safer, faster and smarter.
full answer  I came to the conclusion that microsoft is better, because of lighter and longer. But you should know that apple is safer, faster and smarter.
I came to the conclusion that microsoft is better, because of lighter and longer. But you should know that apple is safer, faster and smarter.
168 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'bet', 'microsoft', 'zune', 'or', 'apple', 'i', 'pod?']
['microsoft', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'microsoft', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'greater', 'faster', 'technology'] ['safer', 'years', 'smarter', 'quicker']
2
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
type  templates
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
self predicate  better
answer begin:  The microsoft is better than apple. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, greater, faster, technology
smoother, greater, faster, technology
winner_aspects_string1 faster and greater
looser_aspects_string1 safer, smarter and quicker
make response  After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
gen templates 3 After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
full answer  After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
After much thought, I realized that  microsoft is better, because of faster and greater. But i should tell you that apple is safer, smarter and quicker.
169 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'better', 'microsoft', 'zune', 'of', 'apple', 'ipod', '(30gb)?']
['microsoft', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'microsoft', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'greater', 'faster', 'technology'] ['safer', 'years', 'smarter', 'quicker']
2
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
type  templates
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
self predicate  better
answer begin:  The microsoft is better than apple. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, greater, faster, technology
smoother, greater, faster, technology
winner_aspects_string1 faster and greater
looser_aspects_string1 safer, smarter and quicker
make response  I came to the conclusion that microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
gen templates 3 I came to the conclusion that microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
full answer  I came to the conclusion that microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
I came to the conclusion that microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
170 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'better', 'product,', "apple's", 'ipod', 'or', "microsoft's'", 'zune?', 'why', 'is', 'either', 'better?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'the', 'better', 'product', ',', 'Apple', "'s", 'iPod', 'or', 'Microsoft', "'s", "'", 'Zune', '?', '    ', 'Why', 'is', 'either', 'better', '?']
We can't recognize objects for comparision
171 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['apple', 'ipod', 'vs.', 'creative', 'zen', 'vision:m', 'vs.', 'microsoft', 'zune?']
['apple', 'microsoft']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'friendlier', 'livelier', 'greedier'] ['faster', 'os', 'safer', 'smarter']
2
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
type  templates
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
self predicate  better
answer begin:  The microsoft is better than apple. The reason are friendlier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, friendlier, livelier, greedier
smoother, friendlier, livelier, greedier
winner_aspects_string1  and friendlier
looser_aspects_string1 safer, faster and smarter
make response  I would prefer to use microsoft because of  and friendlier. Apple is safer, faster and smarter.
gen templates 3 I would prefer to use microsoft because of  and friendlier. Apple is safer, faster and smarter.
full answer  I would prefer to use microsoft because of  and friendlier. Apple is safer, faster and smarter.
I would prefer to use microsoft because of  and friendlier. Apple is safer, faster and smarter.
172 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['do', 'you', 'think', 'the', "microsoft's", 'zune', 'will', 'be', 'better', 'than', 'apples', 'ipod?']
['apples']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'apples', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'safer', 'better for you', 'spray'] ['better for baking', 'faster', 'tastier', 'months']
winnder: and  other: apples
acpect winner  lighter, safer and better for you
acpect other  faster, better for baking and tastier
type  templates
apples has undeniable advantages. They are lighter, safer and better for you.
173 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'consider', 'buying', 'an', 'apple', 'ipod', 'or', 'microsoft', 'zune-', 'tell', 'me', 'why.?']
['apple', 'microsoft']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'friendlier', 'livelier', 'greedier'] ['faster', 'os', 'safer', 'smarter']
2
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
type  templates
winnder: microsoft  other: apple
acpect winner  friendlier
acpect other  safer, faster and smarter
self predicate  better
answer begin:  The microsoft is better than apple. The reason are friendlier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, friendlier, livelier, greedier
smoother, friendlier, livelier, greedier
winner_aspects_string1  and friendlier
looser_aspects_string1 safer, faster and smarter
make response  After much thought, I realized that  microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
gen templates 3 After much thought, I realized that  microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
full answer  After much thought, I realized that  microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
After much thought, I realized that  microsoft is better, because of  and friendlier. Apple is safer, faster and smarter.
174 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'computer', 'is', 'better,', 'microsoft', 'or', 'apple', 'for', 'not', 'getting', 'viruses?']
['apple']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'computer', 'is', 'better', ',', 'Microsoft', 'or', 'apple', 'for', 'not', 'getting', 'viruses', '?']
or simple split_sent 6
Microsoft apple
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Microsoft', 'objectB': 'apple', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'greater', 'faster', 'technology'] ['safer', 'years', 'smarter', 'quicker']
2
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
type  templates
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
self predicate  b
answer begin:  The microsoft is b than apple. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, greater, faster, technology
smoother, greater, faster, technology
winner_aspects_string1 faster and greater
looser_aspects_string1 safer, smarter and quicker
make response  It's simple! Microsoft is better, because of faster and greater. But you should know that apple is safer, smarter and quicker.
gen templates 3 It's simple! Microsoft is better, because of faster and greater. But you should know that apple is safer, smarter and quicker.
full answer  It's simple! Microsoft is better, because of faster and greater. But you should know that apple is safer, smarter and quicker.
It's simple! Microsoft is better, because of faster and greater. But you should know that apple is safer, smarter and quicker.
175 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'microsoft', 'or', 'apple?']
['microsoft']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'microsoft', 'or', 'apple', '?']
or simple split_sent 4
microsoft apple
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'microsoft', 'objectB': 'apple', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'greater', 'faster', 'technology'] ['safer', 'years', 'smarter', 'quicker']
2
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
type  templates
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
self predicate  b
answer begin:  The microsoft is b than apple. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, greater, faster, technology
smoother, greater, faster, technology
winner_aspects_string1 faster and greater
looser_aspects_string1 safer, smarter and quicker
make response  Looks like microsoft is better, because of faster and greater. Apple is safer, smarter and quicker.
gen templates 3 Looks like microsoft is better, because of faster and greater. Apple is safer, smarter and quicker.
full answer  Looks like microsoft is better, because of faster and greater. Apple is safer, smarter and quicker.
Looks like microsoft is better, because of faster and greater. Apple is safer, smarter and quicker.
176 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'microsoft', 'or', 'apple', 'better?']
['apple']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Is', 'microsoft', 'or', 'apple', 'better', '?']
or simple split_sent 2
microsoft apple
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'microsoft', 'objectB': 'apple', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'greater', 'faster', 'technology'] ['safer', 'years', 'smarter', 'quicker']
2
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
type  templates
winnder: microsoft  other: apple
acpect winner  faster and greater
acpect other  safer, smarter and quicker
self predicate  b
answer begin:  The microsoft is b than apple. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, greater, faster, technology
smoother, greater, faster, technology
winner_aspects_string1 faster and greater
looser_aspects_string1 safer, smarter and quicker
make response  After much thought, I realized that  microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
gen templates 3 After much thought, I realized that  microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
full answer  After much thought, I realized that  microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
After much thought, I realized that  microsoft is better, because of faster and greater. But it will be useful for you to know that apple is safer, smarter and quicker.
177 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'you', 'buy?', 'a', 'nokia', '6101', 'or', 'a', 'samsung', 'x640?']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'would', 'you', 'buy', '?', 'a', 'nokia', '6101', 'or', 'a', 'samsung', 'x640', '?']
or simple split_sent 8
6101 a
aspects []
weights []
get url
params {'objectA': '6101', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: a  other: 6101
acpect winner  
acpect other  
type  templates
winnder: a  other: 6101
acpect winner  
acpect other  
self predicate  better
answer begin:  The a is better than 6101. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer a than 6101.
full answer  I would prefer a than 6101.
I would prefer a than 6101.
178 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['of', 'these', 'cellphone', 'manufacturers,', 'which', 'is', 'the', 'best?', 'sony', 'ericsson,', 'motorola,', 'nokia,', 'samsung,', 'siemens,', 'and', 'lg?']
['sony']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'smoother', 'older', 'thinner'] ['richer', 'better to my eyes', 'longer', 'betterfaster']
winnder: sony  other: and
acpect winner  older, quicker and thinner
acpect other  longer, better to my eyes and richer
type  templates
sony has undeniable advantages. They are older, quicker and thinner.
179 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'u', 'think', 'is', 'best-->nokia,samsung,sony', 'ericsson?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
180 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'best', 'nokia', '1600,samsung', 'c200.samsung', 'c210,sony', 't290i?']
['nokia']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier to use', 'quicker', 'easier'] ['greater', 'simpler', 'devices', 'market']
winnder: and  other: nokia
acpect winner  lighter, easier and quicker
acpect other  greater and simpler
type  templates
nokia has undeniable advantages. They are lighter, easier and quicker.
181 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'I-PREDFULL', 'O']
extract_objects_predicates words ['alcatel,lg,motorola,nokia,panasonic,samsung,sanyo,siemens,sony', 'ericssion,sharp....which', 'is', 'best', 'mobile', 'to', 'use?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
182 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'phone', 'is', 'better.', 'either', 'a', 'nokia6610i', 'or', 'a', 'samsungx640.nokia', 'is', 'durable', 'but', 'samsung', 'is', 'sleek.help!?']
['samsung']
['better.', 'durable']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'phone', 'is', 'better', '.', 'either', 'a', 'nokia6610i', 'or', 'a', 'samsungX640.nokia', 'is', 'durable', 'but', 'samsung', 'is', 'sleek.help', '!', '?']
or simple split_sent 8
nokia6610i a
aspects ['better.', 'durable']
weights [1, 1]
get url
params {'objectA': 'nokia6610i', 'objectB': 'a', 'fs': 'true', 'aspect1': 'better.', 'aspect2': 'durable', 'weight1': 1, 'weight2': 1}
1
create fro json predicates ['better.', 'durable']
create fro json self.predicates better.
aspects  [] []
2
winnder: a  other: nokia6610i
acpect winner  
acpect other  
type  templates
winnder: a  other: nokia6610i
acpect winner  
acpect other  
self predicate  better.
answer begin:  The a is better. than nokia6610i. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer a than nokia6610i.
full answer  I would prefer a than nokia6610i.
I would prefer a than nokia6610i.
183 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['among', 'nokia,sony,samsung', 'mobiles', 'phone', 'available', 'in', 'india', '..which', 'one', 'is', 'better?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
184 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['nokia', 'or', 'samsung', 'or', '(hv', 'lot', 'know)', 'which', 'model', 'is', 'best?', 'for', 'me', 'nokia.', 'any', 'ideas?']
['nokia', 'nokia.']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'nokia', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: nokia  other: nokia
acpect winner  
acpect other  
type  templates
winnder: nokia  other: nokia
acpect winner  
acpect other  
self predicate  better
answer begin:  The nokia is better than nokia. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer nokia than nokia.
full answer  I would prefer nokia than nokia.
I would prefer nokia than nokia.
185 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'brand', 'of', 'mobile', 'phone', 'do', 'you', 'think', 'is', 'the', 'best', '-', 'nokia,', 'motorola,', 'samsung,', 'etc??..?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
186 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best', '----', 'soney', 'ericsson,', 'nokia', ',', 'motorola', 'or', 'samsung?']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'the', 'best', '----', 'soney', 'ericsson', ',', 'nokia', ',', 'Motorola', 'or', ' ', 'Samsung', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'Motorola', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['thinner', 'quieter', 'faster', 'lighter'] ['cooler', 'smarter', 'smoother', 'easier to root']
winnder: motorola  other: and
acpect winner  lighter, faster and thinner
acpect other  smarter and easier to root
type  templates
motorola has undeniable advantages. They are lighter, faster and thinner.
187 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'mobile', 'shall', 'i', 'get?', 'nokia', '6111', 'samsung', 'e370/d600', 'or', 'sony', 'ericson', 'w810i?']
['nokia', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'phone', 'easier to use', 'smarter'] ['lighter', 'easier to hack into', 'larger', 'richer']
2
winnder: sony  other: nokia
acpect winner  faster, smarter and easier to use
acpect other  lighter, easier to hack into and larger
type  templates
winnder: sony  other: nokia
acpect winner  faster, smarter and easier to use
acpect other  lighter, easier to hack into and larger
self predicate  better
answer begin:  The sony is better than nokia. The reason are faster, smarter and easier to use. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, phone, easier to use, smarter
faster, phone, easier to use, smarter
winner_aspects_string1 faster, smarter and easier to use
looser_aspects_string1 lighter, easier to hack into and larger
make response  Looks like sony is better, because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
gen templates 3 Looks like sony is better, because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
full answer  Looks like sony is better, because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
Looks like sony is better, because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
188 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'are', 'the', 'better', 'nokia', 'or', 'sony', 'ericson', 'or', 'samsung', 'in', 'mobile', 'phones?']
['nokia', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'phone', 'easier to use', 'smarter'] ['lighter', 'easier to hack into', 'larger', 'richer']
2
winnder: sony  other: nokia
acpect winner  faster, smarter and easier to use
acpect other  lighter, easier to hack into and larger
type  templates
winnder: sony  other: nokia
acpect winner  faster, smarter and easier to use
acpect other  lighter, easier to hack into and larger
self predicate  better
answer begin:  The sony is better than nokia. The reason are faster, smarter and easier to use. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, phone, easier to use, smarter
faster, phone, easier to use, smarter
winner_aspects_string1 faster, smarter and easier to use
looser_aspects_string1 lighter, easier to hack into and larger
make response  I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
gen templates 3 I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
full answer  I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
189 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'of', 'these', 'two', 'mobile', 'phones', 'is', 'the', 'better', 'one', '-', 'samsung', 'sgh', 'd600', 'or', 'nokia', '7370', '?']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'one', 'of', 'these', 'two', 'mobile', 'phones', 'is', 'the', 'better', 'one', '-', 'Samsung', 'SGH', 'D600', 'or', 'Nokia', '7370', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'nokia', 'objectB': 'Nokia 7370', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: nokia 7370  other: nokia
acpect winner  
acpect other  
type  templates
winnder: nokia 7370  other: nokia
acpect winner  
acpect other  
self predicate  b
answer begin:  The nokia 7370 is b than nokia. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer nokia 7370 than nokia.
full answer  I would prefer nokia 7370 than nokia.
I would prefer nokia 7370 than nokia.
190 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'oneis', 'good?', 'is', 'it', 'nokia', 'or', 'samsung?']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'oneis', 'good', '?', 'Is', 'it', 'Nokia', 'or', 'Samsung', '?']
aspects []
weights []
get url
params {'objectA': 'Nokia', 'objectB': 'Samsung', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['days', 'richer', 'easier to beat', 'easier to open and app or enddial a call'] ['quicker', 'greater', 'faster', 'smart']
2
winnder: nokia  other: samsung
acpect winner  easier to beat, richer and easier to open and app or enddial a call
acpect other  greater, faster and quicker
type  templates
winnder: nokia  other: samsung
acpect winner  easier to beat, richer and easier to open and app or enddial a call
acpect other  greater, faster and quicker
self predicate  better
answer begin:  The nokia is better than samsung. The reason are easier to beat, richer and easier to open and app or enddial a call. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
days, richer, easier to beat, easier to open and app or enddial a call
days, richer, easier to beat, easier to open and app or enddial a call
winner_aspects_string1 easier to beat, richer and easier to open and app or enddial a call
looser_aspects_string1 greater, faster and quicker
make response  I would prefer to use nokia because of easier to beat, richer and easier to open and app or enddial a call. But it will be useful for you to know that samsung is greater, faster and quicker.
gen templates 3 I would prefer to use nokia because of easier to beat, richer and easier to open and app or enddial a call. But it will be useful for you to know that samsung is greater, faster and quicker.
full answer  I would prefer to use nokia because of easier to beat, richer and easier to open and app or enddial a call. But it will be useful for you to know that samsung is greater, faster and quicker.
I would prefer to use nokia because of easier to beat, richer and easier to open and app or enddial a call. But it will be useful for you to know that samsung is greater, faster and quicker.
191 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'computer', 'company', 'has', 'the', 'most', 'loyal', 'fan', 'base,', 'hp,', 'dell,', 'or', 'apple?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'computer', 'company', 'has', 'the', 'most', 'loyal', 'fan', 'base', ',', 'HP', ',', 'Dell', ',', 'or', 'Apple', '?']
We can't recognize objects for comparision
192 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'computer?', 'dell', 'or', 'apple', 'or', 'ibm?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'computer', '?', 'dell', 'or', 'apple', 'or', 'ibm', '?']
or simple split_sent 7
dell apple
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
gen templates 3 I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
full answer  I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
193 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'the', 'internet', 'on', 'an', 'apple', 'quicker', 'than', 'a', 'dell?']
['apple']
['quicker']
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects ['quicker']
weights [1]
get url
params {'objectA': 'apple', 'objectB': 'and', 'fs': 'true', 'aspect1': 'quicker', 'weight1': 1}
create fro json predicates ['quicker']
create fro json self.predicates quicker
aspects  ['smarter', 'friendlier', 'safer', 'windows'] ['cooler', 'greater', 'easier to access', 'access']
winnder: apple  other: and
acpect winner  safer, friendlier and smarter
acpect other  greater and easier to access
type  templates
apple has undeniable advantages. They are safer, friendlier and smarter.
194 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['apple', 'or', 'dell', 'what', 'is', 'better?']
['apple', 'dell']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['workers', 'sharper', 'smarter', 'problems'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, smarter, problems
workers, sharper, smarter, problems
winner_aspects_string1 sharper and smarter
looser_aspects_string1 easier and cheaper
make response  I would prefer to use apple because of sharper and smarter. But you should know that dell is easier and cheaper.
gen templates 3 I would prefer to use apple because of sharper and smarter. But you should know that dell is easier and cheaper.
full answer  I would prefer to use apple because of sharper and smarter. But you should know that dell is easier and cheaper.
I would prefer to use apple because of sharper and smarter. But you should know that dell is easier and cheaper.
195 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O']
extract_objects_predicates words ['the', 'comparison', 'between', 'acer,intel,dell,apple?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
196 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['wich', 'computer', 'is', 'better,', 'apple', 'or', 'dell?']
['apple']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['wich', 'computer', 'is', 'better', ',', 'apple', 'or', 'dell', '?']
or simple split_sent 6
apple dell
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['cheaper', 'easier', 'hardware', 'cooler'] ['workers', 'sharper', 'smarter', 'problems']
2
winnder: dell  other: apple
acpect winner  easier and cheaper
acpect other  sharper and smarter
type  templates
winnder: dell  other: apple
acpect winner  easier and cheaper
acpect other  sharper and smarter
self predicate  b
answer begin:  The dell is b than apple. The reason are easier and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, easier, hardware, cooler
cheaper, easier, hardware, cooler
winner_aspects_string1 easier and cheaper
looser_aspects_string1 sharper and smarter
make response  I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
gen templates 3 I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
full answer  I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
197 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'a', 'better', 'laptop.', 'apple', 'or', 'dell??']
['apple']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'a', 'better', 'laptop', '.', 'Apple', 'or', 'Dell', '?', '?']
or simple split_sent 7
Apple Dell
aspects ['better']
weights [1]
get url
params {'objectA': 'Apple', 'objectB': 'Dell', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['workers', 'sharper', 'problems', 'end'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, problems, end
workers, sharper, problems, end
winner_aspects_string1  and sharper
looser_aspects_string1 easier and cheaper
make response  Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
gen templates 3 Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
full answer  Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
198 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'a', 'better', 'tpe', 'of', 'computer', 'a', 'dell', 'or', 'apple?']
['dell']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', "'s", 'a', 'better', 'tpe', 'of', 'computer', 'a', 'dell', 'or', 'apple', '?']
or simple split_sent 9
dell apple
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  b
answer begin:  The apple is b than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
gen templates 3 I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
full answer  I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
199 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'an', 'apple', 'ipod', 'nano', 'or', 'a', 'dell', 'music', 'box?']
['apple', 'dell']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['workers', 'sharper', 'problems', 'end'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, problems, end
workers, sharper, problems, end
winner_aspects_string1  and sharper
looser_aspects_string1 easier and cheaper
make response  I came to the conclusion that apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
gen templates 3 I came to the conclusion that apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
full answer  I came to the conclusion that apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
I came to the conclusion that apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
200 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['in', 'a', 'general,', "who's", 'better;', 'dell', 'or', 'apple?']
['dell']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['In', 'a', 'general', ',', 'who', "'s", 'better', ';', 'Dell', 'or', 'Apple', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Dell', 'objectB': 'Apple', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  b
answer begin:  The apple is b than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
gen templates 3 It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
full answer  It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
201 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['witch', 'is', 'better', 'alienware,', 'sony,', 'dell', 'xps,', 'or', 'the', 'new', 'apple', 'computer??????']
['sony,', 'dell', 'apple']
['better']
len(objects) 3
aspects ['better']
weights [1]
get url
params {'objectA': 'sony', 'objectB': 'dell', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'faster', 'cheaper', 'wider'] ['heavier', 'larger', 'bigger', 'thinner']
2
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
type  templates
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
self predicate  better
answer begin:  The dell is better than sony. The reason are faster, wider and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, faster, cheaper, wider
quicker, faster, cheaper, wider
winner_aspects_string1 faster, wider and quicker
looser_aspects_string1 heavier, larger and thinner
make response  I came to the conclusion that dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
gen templates 3 I came to the conclusion that dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
full answer  I came to the conclusion that dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
I came to the conclusion that dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
202 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'apple', 'or', 'a', 'dell', 'notebook', 'for', 'college?']
['apple', 'dell']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['workers', 'sharper', 'smarter', 'problems'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, smarter, problems
workers, sharper, smarter, problems
winner_aspects_string1 sharper and smarter
looser_aspects_string1 easier and cheaper
make response  It's simple! Apple is better, because of sharper and smarter. But you should know that dell is easier and cheaper.
gen templates 3 It's simple! Apple is better, because of sharper and smarter. But you should know that dell is easier and cheaper.
full answer  It's simple! Apple is better, because of sharper and smarter. But you should know that dell is easier and cheaper.
It's simple! Apple is better, because of sharper and smarter. But you should know that dell is easier and cheaper.
203 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'better', 'choice', 'of', 'laptop?', 'dell', 'or', 'apple', 'or', 'sony?']
['dell', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  After much thought, I realized that  apple is better, because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
gen templates 3 After much thought, I realized that  apple is better, because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
full answer  After much thought, I realized that  apple is better, because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
After much thought, I realized that  apple is better, because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
204 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'an', 'apple', 'or', 'a', 'dell', 'computer?']
['apple', 'dell']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['workers', 'sharper', 'smarter', 'problems'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, smarter, problems
workers, sharper, smarter, problems
winner_aspects_string1 sharper and smarter
looser_aspects_string1 easier and cheaper
make response  I would prefer to use apple because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
gen templates 3 I would prefer to use apple because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
full answer  I would prefer to use apple because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
I would prefer to use apple because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
205 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'brand', 'of', 'laptops', 'are', 'better?', 'dell,', 'hp', 'or', 'apple?']
['dell,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'brand', 'of', 'laptops', 'are', 'better', '?', 'Dell', ',', 'HP', 'or', 'Apple', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'HP', 'objectB': 'Apple', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'greater', 'lighter', 'faster'] ['bigger', 'tier', 'option', 'functionality']
2
winnder: apple  other: hp
acpect winner  lighter, easier and faster
acpect other  bigger
type  templates
winnder: apple  other: hp
acpect winner  lighter, easier and faster
acpect other  bigger
self predicate  b
answer begin:  The apple is b than hp. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, greater, lighter, faster
easier, greater, lighter, faster
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1  and bigger
make response  I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that hp is  and bigger.
gen templates 3 I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that hp is  and bigger.
full answer  I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that hp is  and bigger.
I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that hp is  and bigger.
206 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'dell', 'xps', 'or', 'apple', 'mac', 'book', 'pro?']
['dell', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  I would prefer to use apple because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
gen templates 3 I would prefer to use apple because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
full answer  I would prefer to use apple because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
I would prefer to use apple because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
207 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'laptop', 'is', 'better?', 'overall?', 'apple', 'or', 'dell?']
['apple']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'laptop', 'is', 'better', '?', 'Overall', '?', ' ', 'Apple', 'or', 'Dell', '?']
or simple split_sent 9
Apple Dell
aspects ['better?']
weights [1]
get url
params {'objectA': 'Apple', 'objectB': 'Dell', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['workers', 'sharper', 'problems', 'end'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
self predicate  better?
answer begin:  The apple is better? than dell. The reason are sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, problems, end
workers, sharper, problems, end
winner_aspects_string1  and sharper
looser_aspects_string1 easier and cheaper
make response  Looks like apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
gen templates 3 Looks like apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
full answer  Looks like apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
Looks like apple is better, because of  and sharper. But i should tell you that dell is easier and cheaper.
208 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'strengths,', 'weaknesses', 'and', 'affordability', 'for', 'hp,', 'apple', 'and', 'dell', 'computors', 'and', 'laptops?']
['apple', 'dell']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['workers', 'sharper', 'smarter', 'problems'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, smarter, problems
workers, sharper, smarter, problems
winner_aspects_string1 sharper and smarter
looser_aspects_string1 easier and cheaper
make response  I came to the conclusion that apple is better, because of sharper and smarter. Dell is easier and cheaper.
gen templates 3 I came to the conclusion that apple is better, because of sharper and smarter. Dell is easier and cheaper.
full answer  I came to the conclusion that apple is better, because of sharper and smarter. Dell is easier and cheaper.
I came to the conclusion that apple is better, because of sharper and smarter. Dell is easier and cheaper.
209 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'laptop?', 'apple', 'or', 'dell?']
['apple']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'laptop', '?', ' ', 'Apple', 'or', 'Dell', '?']
or simple split_sent 8
Apple Dell
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Apple', 'objectB': 'Dell', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['cheaper', 'easier', 'hardware', 'cooler'] ['workers', 'sharper', 'smarter', 'problems']
2
winnder: dell  other: apple
acpect winner  easier and cheaper
acpect other  sharper and smarter
type  templates
winnder: dell  other: apple
acpect winner  easier and cheaper
acpect other  sharper and smarter
self predicate  b
answer begin:  The dell is b than apple. The reason are easier and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, easier, hardware, cooler
cheaper, easier, hardware, cooler
winner_aspects_string1 easier and cheaper
looser_aspects_string1 sharper and smarter
make response  I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
gen templates 3 I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
full answer  I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
I would prefer to use dell because of easier and cheaper. Apple is sharper and smarter.
210 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'laptop', 'brand?', '{meaning', 'dell,', 'apple,', 'gateway,', 'etc.}?']
['dell,', 'apple,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
gen templates 3 I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
full answer  I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
I would prefer to use apple because of lighter, easier and faster. But it will be useful for you to know that dell is easier to become an ibm and cheaper.
211 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'laptop', 'is', 'better', 'apple', 'cpu', 'or', 'dell', 'cpu?']
['apple', 'dell']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['workers', 'sharper', 'smarter', 'problems'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper and smarter
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, smarter, problems
workers, sharper, smarter, problems
winner_aspects_string1 sharper and smarter
looser_aspects_string1 easier and cheaper
make response  I came to the conclusion that apple is better, because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
gen templates 3 I came to the conclusion that apple is better, because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
full answer  I came to the conclusion that apple is better, because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
I came to the conclusion that apple is better, because of sharper and smarter. But it will be useful for you to know that dell is easier and cheaper.
212 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'notebook', 'brand', 'and', 'why?', 'dell,', 'sony', 'vaio,', 'apple,', 'toshiba,', 'ibm,', '...', '?', '(in', 'general', 'comparison)']
['dell,', 'ibm,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
gen templates 3 After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
full answer  After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
213 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['are', 'apple', 'computers', 'better', 'than', 'dell', 'or', "hp's?", 'why?']
['apple', 'dell']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'apple', 'objectB': 'dell', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['workers', 'sharper', 'problems', 'end'] ['cheaper', 'hardware', 'easier', 'cooler']
2
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
type  templates
winnder: apple  other: dell
acpect winner  sharper
acpect other  easier and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
workers, sharper, problems, end
workers, sharper, problems, end
winner_aspects_string1  and sharper
looser_aspects_string1 easier and cheaper
make response  Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
gen templates 3 Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
full answer  Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
Looks like apple is better, because of  and sharper. But it will be useful for you to know that dell is easier and cheaper.
214 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'dell', 'e1405', 'or', 'an', 'apple', 'macbook?']
['dell', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  After much thought, I realized that  apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
gen templates 3 After much thought, I realized that  apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
full answer  After much thought, I realized that  apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
After much thought, I realized that  apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
215 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'laptops', 'are', 'better?', 'dell,', 'hp,', 'lenovo,', 'apple', 'or', 'vaio?']
['dell,', 'apple']
['better?']
len(objects) 2
aspects ['better?']
weights [1]
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'laptops', 'easier to become an ibm']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better?
answer begin:  The apple is better? than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  I came to the conclusion that apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
gen templates 3 I came to the conclusion that apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
full answer  I came to the conclusion that apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
I came to the conclusion that apple is better, because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
216 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'laptop', 'to', 'buy(here', 'are', 'my', 'choices):', 'apple,', 'dell,', 'and', 'ibm.', 'i', 'not', 'for', 'sure', 'which', 'is', 'the', 'best.?']
['laptop', 'apple,', 'ibm.']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'laptop', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'bigger', 'thinner'] ['cheaper', 'richer', 'faster to stream itunes content', 'easier to perform on a mobile device']
2
winnder: apple  other: laptop
acpect winner  lighter, easier and thinner
acpect other  faster to stream itunes content, richer and easier to perform on a mobile device
type  templates
winnder: apple  other: laptop
acpect winner  lighter, easier and thinner
acpect other  faster to stream itunes content, richer and easier to perform on a mobile device
self predicate  better
answer begin:  The apple is better than laptop. The reason are lighter, easier and thinner. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, bigger, thinner
lighter, easier, bigger, thinner
winner_aspects_string1 lighter, easier and thinner
looser_aspects_string1 faster to stream itunes content, richer and easier to perform on a mobile device
make response  I would prefer to use apple because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
gen templates 3 I would prefer to use apple because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
full answer  I would prefer to use apple because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
I would prefer to use apple because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
217 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'lenovo', '(ibm)', 'or', 'dell?']
['lenovo']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'Lenovo', '(', 'IBM', ')', 'or', 'Dell', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'lenovo', 'objectB': 'Dell', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['crap', 'cheaper', 'sturdier', 'faster'] ['lighter', 'quicker', 'slimmer', 'higher']
2
winnder: lenovo  other: dell
acpect winner  sturdier, faster and cheaper
acpect other  lighter, higher and quicker
type  templates
winnder: lenovo  other: dell
acpect winner  sturdier, faster and cheaper
acpect other  lighter, higher and quicker
self predicate  b
answer begin:  The lenovo is b than dell. The reason are sturdier, faster and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
crap, cheaper, sturdier, faster
crap, cheaper, sturdier, faster
winner_aspects_string1 sturdier, faster and cheaper
looser_aspects_string1 lighter, higher and quicker
make response  I came to the conclusion that lenovo is better, because of sturdier, faster and cheaper. But you should know that dell is lighter, higher and quicker.
gen templates 3 I came to the conclusion that lenovo is better, because of sturdier, faster and cheaper. But you should know that dell is lighter, higher and quicker.
full answer  I came to the conclusion that lenovo is better, because of sturdier, faster and cheaper. But you should know that dell is lighter, higher and quicker.
I came to the conclusion that lenovo is better, because of sturdier, faster and cheaper. But you should know that dell is lighter, higher and quicker.
218 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'laptop', 'do', 'you', 'recommend?', 'dell?', 'sony?', 'ibm?', 'other?']
['dell?', 'ibm?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
gen templates 3 I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
full answer  I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
I came to the conclusion that ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
219 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'computer?', 'dell', 'or', 'apple', 'or', 'ibm?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'computer', '?', 'dell', 'or', 'apple', 'or', 'ibm', '?']
or simple split_sent 7
dell apple
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  Looks like apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
gen templates 3 Looks like apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
full answer  Looks like apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
Looks like apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
220 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O']
extract_objects_predicates words ['who', 'makes', 'the', 'best/economical', 'laptop', 'tablets', '(notebooks)?', 'dell,', 'ibm,', 'hp????']
['dell,', 'ibm,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  It's simple! Ibm is better, because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
gen templates 3 It's simple! Ibm is better, because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
full answer  It's simple! Ibm is better, because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
It's simple! Ibm is better, because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
221 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'pc', 'on', 'the', 'market', 'dell', 'ibm', 'or', 'hp?']
['dell', 'ibm']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  I would prefer to use ibm because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
gen templates 3 I would prefer to use ibm because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
full answer  I would prefer to use ibm because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
I would prefer to use ibm because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
222 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'brand', 'of', 'laptop', 'you', 'know?', 'hp,', 'ibm,', 'dell,', 'etc?']
['dell,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'lighter', 'easier to navigate', 'easier to manage'] ['smarter', 'cpus', 'cel', 'ram']
winnder: and  other: dell
acpect winner  lighter, easier to navigate and easier to manage
acpect other  smarter
type  templates
dell has undeniable advantages. They are lighter, easier to navigate and easier to manage.
223 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['do', 'you', 'prefer', 'toshiba,', 'ibm,', 'gateway,', 'or', 'dell', 'laptops?']
['ibm,', 'dell']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ibm', 'objectB': 'dell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['older', 'bigger', 'cheaper', 'faster'] ['easier', 'lighter', 'easier to become an ibm', 'wider']
2
winnder: ibm  other: dell
acpect winner  faster, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  faster, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are faster, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
older, bigger, cheaper, faster
older, bigger, cheaper, faster
winner_aspects_string1 faster, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  Looks like ibm is better, because of faster, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
gen templates 3 Looks like ibm is better, because of faster, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
full answer  Looks like ibm is better, because of faster, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
Looks like ibm is better, because of faster, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
224 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['whis', 'is', 'better', 'laptop-ibm', '/dell/hp/compaq/acer?']
['laptop-ibm']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'laptop-ibm', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  [] []
winnder: and  other: laptop-ibm
acpect winner  
acpect other  
type  templates
and is better.
225 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['who', 'makes', 'a', 'better', 'laptop,', 'dell', 'or', 'ibm.?']
['dell']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Who', 'makes', 'a', 'better', 'laptop', ',', 'Dell', 'or', 'IBM', '.', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Dell', 'objectB': 'IBM', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['older', 'bigger', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  b
answer begin:  The ibm is b than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
older, bigger, greater, cheaper
older, bigger, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
gen templates 3 After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
full answer  After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
After much thought, I realized that  ibm is better, because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
226 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'are', 'some', 'advantages', 'and', 'disadvantages', 'of', 'ibm,', 'dell,', 'and', 'hewlett', 'packard?']
['ibm,', 'hewlett']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ibm', 'objectB': 'hewlett', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'stock', 'price', 'today'] ['faster']
2
winnder: ibm  other: hewlett
acpect winner  greater
acpect other  faster
type  templates
winnder: ibm  other: hewlett
acpect winner  greater
acpect other  faster
self predicate  better
answer begin:  The ibm is better than hewlett. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, stock, price, today
greater, stock, price, today
winner_aspects_string1  and greater
looser_aspects_string1 faster
make response  I would prefer to use ibm because of  and greater. But you should know that hewlett is faster.
gen templates 3 I would prefer to use ibm because of  and greater. But you should know that hewlett is faster.
full answer  I would prefer to use ibm because of  and greater. But you should know that hewlett is faster.
I would prefer to use ibm because of  and greater. But you should know that hewlett is faster.
227 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'notebook', 'brand', 'and', 'why?', 'dell,', 'sony', 'vaio,', 'apple,', 'toshiba,', 'ibm,', '...', '?', '(in', 'general', 'comparison)']
['dell,', 'ibm,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  I would prefer to use ibm because of greater, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
gen templates 3 I would prefer to use ibm because of greater, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
full answer  I would prefer to use ibm because of greater, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
I would prefer to use ibm because of greater, older and bigger. But it will be useful for you to know that dell is lighter, easier and easier to become an ibm.
228 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['dell', 'inspirone1505,', 'hp', 'paviliondv1677ea,ibm', 'lenovo', '3000n100(ty04bxx)', 'which', 'notebook', 'is', 'the', 'best', 'buy?']
['dell']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'lighter', 'easier to navigate', 'easier to manage'] ['smarter', 'cpus', 'cel', 'ram']
winnder: and  other: dell
acpect winner  lighter, easier to navigate and easier to manage
acpect other  smarter
type  templates
dell has undeniable advantages. They are lighter, easier to navigate and easier to manage.
229 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'laptop', 'to', 'buy(here', 'are', 'my', 'choices):', 'apple,', 'dell,', 'and', 'ibm.', 'i', 'not', 'for', 'sure', 'which', 'is', 'the', 'best.?']
['laptop', 'apple,', 'ibm.']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'laptop', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'bigger', 'thinner'] ['cheaper', 'richer', 'faster to stream itunes content', 'easier to perform on a mobile device']
2
winnder: apple  other: laptop
acpect winner  lighter, easier and thinner
acpect other  faster to stream itunes content, richer and easier to perform on a mobile device
type  templates
winnder: apple  other: laptop
acpect winner  lighter, easier and thinner
acpect other  faster to stream itunes content, richer and easier to perform on a mobile device
self predicate  better
answer begin:  The apple is better than laptop. The reason are lighter, easier and thinner. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, bigger, thinner
lighter, easier, bigger, thinner
winner_aspects_string1 lighter, easier and thinner
looser_aspects_string1 faster to stream itunes content, richer and easier to perform on a mobile device
make response  Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
gen templates 3 Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
full answer  Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
Looks like apple is better, because of lighter, easier and thinner. But i should tell you that laptop is faster to stream itunes content, richer and easier to perform on a mobile device.
230 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'laptop', 'should', 'i', 'buy?dell', 'e1505,', 'hp', 'dv1677e', 'ibm', 'lenovo', '3000n100(ty04bxx)?']
['ibm']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ibm', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'shoppingfor', 'cooler', 'denser'] ['safer', 'lighter', 'easier to use', 'cheaperfasterbetter']
winnder: ibm  other: and
acpect winner  easier
acpect other  lighter, safer and easier to use
type  templates
ibm has undeniable advantages. They are easier.
231 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['why', 'the', 'basketball', 'is', 'better', 'than', 'the', 'football?']
['basketball']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'basketball', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to follow', 'tougher', 'smarter', 'easier'] ['easier to turn into a championship contender because it s easier to find scoring for him', 'stan', 'shooter', 'lighter']
winnder: and  other: basketball
acpect winner  easier, easier to follow and smarter
acpect other  easier to turn into a championship contender because it s easier to find scoring for him and lighter
type  templates
basketball has undeniable advantages. They are easier, easier to follow and smarter.
232 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'most', 'popular', 'in', 'us?', 'basketball,', 'american', 'football', 'or', 'baseball?']
['basketball,', 'football']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'basketball', 'objectB': 'football', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'faster', 'easier to make it to', 'easier to recover from being behind by many points in basketball due to the nature of the game'] ['greater', 'easier to develop in football', 'safer', 'simpler']
2
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
type  templates
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
self predicate  better
answer begin:  The football is better than basketball. The reason are easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
winner_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
looser_aspects_string1 safer, greater and simpler
make response  Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
gen templates 3 Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
full answer  Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
233 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'better?', 'soccer,', 'american', 'football,', 'basketball,', 'baseball,', 'or', 'tennis?']
['football,']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'better', '?', 'Soccer', ',', 'American', 'Football', ',', 'Basketball', ',', 'Baseball', ',', 'or', 'Tennis', '?']
aspects ['better?']
weights [1]
get url
params {'objectA': 'football', 'objectB': 'Tennis', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'easier', 'safer', 'easier to pitch a 95 mph fastball for a strike is easier'] ['greater', 'arm', 'slot', 'shooting']
2
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
type  templates
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
self predicate  better?
answer begin:  The tennis is better? than football. The reason are safer, faster and easier to pitch a 95 mph fastball for a strike is easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
winner_aspects_string1 safer, faster and easier to pitch a 95 mph fastball for a strike is easier
looser_aspects_string1  and greater
make response  I would prefer to use tennis because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
gen templates 3 I would prefer to use tennis because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
full answer  I would prefer to use tennis because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
I would prefer to use tennis because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
234 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'most', 'popular', 'sport', 'in', 'the', 'us,', 'baseball,', 'basketball,', 'or', 'football?']
['baseball,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, skills, easier to quantify, smarter
easier to quantify statistically, skills, easier to quantify, smarter
winner_aspects_string1 easier to quantify, easier to quantify statistically and smarter
looser_aspects_string1 easier to project, faster and greater
make response  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
full answer  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
235 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'basketball', 'or', 'football?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'basketball', 'or', 'football', '?']
or simple split_sent 4
basketball football
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'basketball', 'objectB': 'football', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smarter', 'faster', 'easier to make it to', 'easier to recover from being behind by many points in basketball due to the nature of the game'] ['easier to develop in football', 'greater', 'safer', 'simpler']
2
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
type  templates
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
self predicate  b
answer begin:  The football is b than basketball. The reason are easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
winner_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
looser_aspects_string1 safer, greater and simpler
make response  After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
gen templates 3 After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
full answer  After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But i should tell you that basketball is safer, greater and simpler.
236 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'more:', 'football,', 'cricket,', 'basketball', 'or', 'baseball?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'more', ':', ' ', 'Football', ',', 'Cricket', ',', 'Basketball', 'or', 'baseball', '?']
or simple split_sent 13
Basketball baseball
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Basketball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['easier to quantify statistically', 'easier for me to see how small privates can dominate in basketball much easier', 'skills', 'easier to quantify'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
self predicate  m
answer begin:  The baseball is m than basketball. The reason are easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
winner_aspects_string1 easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
looser_aspects_string1 easier to project, faster and greater
make response  I would prefer to use baseball because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But you should know that basketball is easier to project, faster and greater.
gen templates 3 I would prefer to use baseball because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But you should know that basketball is easier to project, faster and greater.
full answer  I would prefer to use baseball because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But you should know that basketball is easier to project, faster and greater.
I would prefer to use baseball because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But you should know that basketball is easier to project, faster and greater.
237 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'prefer?', 'soccer', '(not', 'american', 'football)', 'or', 'basketball?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'prefer', '?', 'Soccer', '(', 'not', 'American', 'Football', ')', 'or', 'Basketball', '?']
or simple split_sent 11
) Basketball
aspects []
weights []
get url
params {'objectA': ')', 'objectB': 'Basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: basketball  other: )
acpect winner  
acpect other  
type  templates
winnder: basketball  other: )
acpect winner  
acpect other  
self predicate  better
answer begin:  The basketball is better than ). 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer basketball than ).
full answer  I would prefer basketball than ).
I would prefer basketball than ).
238 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'sport', 'soccer,', 'basketball', 'or', 'american', 'football?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'a', 'better', 'sport', 'soccer', ',', 'basketball', 'or', 'american', 'football', '?']
or simple split_sent 8
basketball american
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'basketball', 'objectB': 'american', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['quicker', 'faster', 'longer', 'easier to root for'] ['greater', 'safer', 'bigger', 'easier']
2
winnder: basketball  other: american
acpect winner  faster, easier to root for and quicker
acpect other  safer, greater and bigger
type  templates
winnder: basketball  other: american
acpect winner  faster, easier to root for and quicker
acpect other  safer, greater and bigger
self predicate  b
answer begin:  The basketball is b than american. The reason are faster, easier to root for and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, faster, longer, easier to root for
quicker, faster, longer, easier to root for
winner_aspects_string1 faster, easier to root for and quicker
looser_aspects_string1 safer, greater and bigger
make response  I came to the conclusion that basketball is better, because of faster, easier to root for and quicker. American is safer, greater and bigger.
gen templates 3 I came to the conclusion that basketball is better, because of faster, easier to root for and quicker. American is safer, greater and bigger.
full answer  I came to the conclusion that basketball is better, because of faster, easier to root for and quicker. American is safer, greater and bigger.
I came to the conclusion that basketball is better, because of faster, easier to root for and quicker. American is safer, greater and bigger.
239 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'to', 'play,', 'basketball', 'or', 'football?']
['basketball']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'to', 'play', ',', 'basketball', 'or', 'football', '?']
or simple split_sent 7
basketball football
aspects ['better']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'football', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['smarter', 'faster', 'easier to make it to', 'prettier'] ['greater', 'easier to develop in football', 'safer', 'simpler']
2
winnder: football  other: basketball
acpect winner  easier to make it to, faster and prettier
acpect other  safer, greater and simpler
type  templates
winnder: football  other: basketball
acpect winner  easier to make it to, faster and prettier
acpect other  safer, greater and simpler
self predicate  better
answer begin:  The football is better than basketball. The reason are easier to make it to, faster and prettier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, faster, easier to make it to, prettier
smarter, faster, easier to make it to, prettier
winner_aspects_string1 easier to make it to, faster and prettier
looser_aspects_string1 safer, greater and simpler
make response  It's simple! Football is better, because of easier to make it to, faster and prettier. But you should know that basketball is safer, greater and simpler.
gen templates 3 It's simple! Football is better, because of easier to make it to, faster and prettier. But you should know that basketball is safer, greater and simpler.
full answer  It's simple! Football is better, because of easier to make it to, faster and prettier. But you should know that basketball is safer, greater and simpler.
It's simple! Football is better, because of easier to make it to, faster and prettier. But you should know that basketball is safer, greater and simpler.
240 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'is', 'better', 'basketball', 'or', 'football?']
['basketball']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'sport', 'is', 'better', 'basketball', 'or', 'football', '?']
or simple split_sent 5
basketball football
aspects ['better']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'football', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['smarter', 'faster', 'easier to make it to', 'prettier'] ['greater', 'easier to develop in football', 'safer', 'simpler']
2
winnder: football  other: basketball
acpect winner  easier to make it to, faster and prettier
acpect other  safer, greater and simpler
type  templates
winnder: football  other: basketball
acpect winner  easier to make it to, faster and prettier
acpect other  safer, greater and simpler
self predicate  better
answer begin:  The football is better than basketball. The reason are easier to make it to, faster and prettier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, faster, easier to make it to, prettier
smarter, faster, easier to make it to, prettier
winner_aspects_string1 easier to make it to, faster and prettier
looser_aspects_string1 safer, greater and simpler
make response  Looks like football is better, because of easier to make it to, faster and prettier. But i should tell you that basketball is safer, greater and simpler.
gen templates 3 Looks like football is better, because of easier to make it to, faster and prettier. But i should tell you that basketball is safer, greater and simpler.
full answer  Looks like football is better, because of easier to make it to, faster and prettier. But i should tell you that basketball is safer, greater and simpler.
Looks like football is better, because of easier to make it to, faster and prettier. But i should tell you that basketball is safer, greater and simpler.
241 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'more', 'popular', 'in', 'the', 'country', 'football', 'or', 'basketball?']
['football']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'more', 'popular', 'in', 'the', 'Country', 'Football', 'or', 'basketball', '?']
or simple split_sent 8
Football basketball
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Football', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  m
answer begin:  The basketball is m than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
242 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better,', 'football', 'or', 'basketball??']
['football']
['better,']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', ',', 'football', 'or', 'basketball', '?', '?']
or simple split_sent 5
football basketball
aspects ['better,']
weights [1]
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'prettier']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and prettier
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and prettier
self predicate  better,
answer begin:  The basketball is better, than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and prettier
make response  Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and prettier.
gen templates 3 Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and prettier.
full answer  Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and prettier.
Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and prettier.
243 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'pulls', 'in', 'more', 'viewers', 'from', 'all', 'over', 'the', 'world', 'football,', 'baseball,', 'basketball,', 'tennis,', 'or', 'soccer?']
['football,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  better
answer begin:  The basketball is better than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
244 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'better........football', 'or', 'basketball?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', "'s", 'better', '........', 'football', 'or', 'basketball', '?']
or simple split_sent 5
football basketball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  b
answer begin:  The basketball is b than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  After much thought, I realized that  basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 After much thought, I realized that  basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  After much thought, I realized that  basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
After much thought, I realized that  basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
245 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'would', 'u', 'like', 'to', 'watch?!', '&', 'which', 'sport', 'would', 'u', 'like', 'to', 'play?', 'football,', 'baseball,', 'or', 'basketball?']
['football,', 'baseball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'baseball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'safer', 'greater', 'training'] ['easier to project', 'faster', 'offense', 'speed']
2
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
type  templates
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
self predicate  better
answer begin:  The baseball is better than football. The reason are safer, smarter and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, greater, training
smarter, safer, greater, training
winner_aspects_string1 safer, smarter and greater
looser_aspects_string1 easier to project and faster
make response  Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
gen templates 3 Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
full answer  Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
246 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'better', 'basketball', 'or', 'football?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 's', 'better', 'basketball', 'or', 'football', '?']
or simple split_sent 4
basketball football
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'basketball', 'objectB': 'football', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smarter', 'faster', 'easier to make it to', 'easier to recover from being behind by many points in basketball due to the nature of the game'] ['easier to develop in football', 'greater', 'safer', 'simpler']
2
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
type  templates
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
self predicate  b
answer begin:  The football is b than basketball. The reason are easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
winner_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
looser_aspects_string1 safer, greater and simpler
make response  After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
gen templates 3 After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
full answer  After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
After much thought, I realized that  football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
247 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'car', 'do', 'you', 'think', 'is', 'better?', 'the', 'new', 'toyota', 'suvs', 'or', 'sport', 'utility', 'or', 'the', 'bmw', 'm', 'series', 'or', 'chrysler', 'pacifca?']
['toyota', 'bmw', 'chrysler']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'bmw', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'higher', 'lighter', 'better for my money when i buy a bmw'] ['cooler', 'car', 'head', 'legroom']
2
winnder: bmw  other: toyota
acpect winner  lighter, easier and higher
acpect other  
type  templates
winnder: bmw  other: toyota
acpect winner  lighter, easier and higher
acpect other  
self predicate  better
answer begin:  The bmw is better than toyota. The reason are lighter, easier and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, higher, lighter, better for my money when i buy a bmw
easier, higher, lighter, better for my money when i buy a bmw
winner_aspects_string1 lighter, easier and higher
smth wrong in answer generation, please try again
248 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'bmw', 'm3', 'or', 'toyota', 'supra?']
['bmw', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'bmw', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['cooler', 'car', 'smoother', 'head'] ['easier', 'higher', 'lighter', 'better for my money when i buy a bmw']
2
winnder: toyota  other: bmw
acpect winner  
acpect other  lighter, easier and higher
type  templates
winnder: toyota  other: bmw
acpect winner  
acpect other  lighter, easier and higher
self predicate  better
answer begin:  The toyota is better than bmw. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cooler, car, smoother, head
cooler, car, smoother, head
smth wrong in answer generation, please try again
249 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'car', 'do', 'you', 'think', 'is', 'better?', 'the', 'new', 'toyota', 'suvs', 'or', 'sport', 'utility', 'or', 'the', 'bmw', 'm', 'series', 'or', 'chrysler', 'pacifca?']
['toyota', 'bmw', 'chrysler']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'bmw', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'higher', 'lighter', 'better for my money when i buy a bmw'] ['cooler', 'car', 'head', 'legroom']
2
winnder: bmw  other: toyota
acpect winner  lighter, easier and higher
acpect other  
type  templates
winnder: bmw  other: toyota
acpect winner  lighter, easier and higher
acpect other  
self predicate  better
answer begin:  The bmw is better than toyota. The reason are lighter, easier and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, higher, lighter, better for my money when i buy a bmw
easier, higher, lighter, better for my money when i buy a bmw
winner_aspects_string1 lighter, easier and higher
smth wrong in answer generation, please try again
250 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O']
extract_objects_predicates words ['toyota', 'vs', 'chrysler?']
['toyota']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Toyota', 'vs', 'Chrysler', '?']
aspects []
weights []
get url
params {'objectA': 'Toyota', 'objectB': 'Chrysler', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'higher', 'easier to work on', 'easier to live with'] ['greater', 'older', 'durability']
2
winnder: chrysler  other: toyota
acpect winner  easier, higher and easier to work on
acpect other  greater and older
type  templates
winnder: chrysler  other: toyota
acpect winner  easier, higher and easier to work on
acpect other  greater and older
self predicate  better
answer begin:  The chrysler is better than toyota. The reason are easier, higher and easier to work on. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, higher, easier to work on, easier to live with
easier, higher, easier to work on, easier to live with
winner_aspects_string1 easier, higher and easier to work on
looser_aspects_string1 greater and older
make response  It's simple! Chrysler is better, because of easier, higher and easier to work on. But you should know that toyota is greater and older.
gen templates 3 It's simple! Chrysler is better, because of easier, higher and easier to work on. But you should know that toyota is greater and older.
full answer  It's simple! Chrysler is better, because of easier, higher and easier to work on. But you should know that toyota is greater and older.
It's simple! Chrysler is better, because of easier, higher and easier to work on. But you should know that toyota is greater and older.
251 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'to', 'take', 'to', 'improve', 'mind', 'power', 'coffee', 'or', 'tea', 'or', 'milk?']
['tea']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'to', 'take', 'to', 'improve', 'mind', 'power', 'coffee', 'or', 'tea', 'or', 'milk', '?']
or simple split_sent 10
coffee tea
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'coffee', 'objectB': 'tea', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'better for you', 'lighter', 'safer'] ['greater', 'caffeine', 'faster', 'steadier']
2
winnder: tea  other: coffee
acpect winner  lighter, easier and safer
acpect other  steadier, greater and faster
type  templates
winnder: tea  other: coffee
acpect winner  lighter, easier and safer
acpect other  steadier, greater and faster
self predicate  b
answer begin:  The tea is b than coffee. The reason are lighter, easier and safer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, better for you, lighter, safer
easier, better for you, lighter, safer
winner_aspects_string1 lighter, easier and safer
looser_aspects_string1 steadier, greater and faster
make response  After much thought, I realized that  tea is better, because of lighter, easier and safer. Coffee is steadier, greater and faster.
gen templates 3 After much thought, I realized that  tea is better, because of lighter, easier and safer. Coffee is steadier, greater and faster.
full answer  After much thought, I realized that  tea is better, because of lighter, easier and safer. Coffee is steadier, greater and faster.
After much thought, I realized that  tea is better, because of lighter, easier and safer. Coffee is steadier, greater and faster.
252 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'your', 'favorite', 'types', 'of', 'cars?', 'ford?', 'chevy?', 'nissan?', 'ect.....?']
['ford?']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
253 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O']
extract_objects_predicates words ['what', 'model', 'truck', 'is', 'better', 'toyota,ford,chevy,dodge,nissan?']
[]
['better']
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
254 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'mini', 'van..dodge,honda,nissan,or', 'ford', '??']
['ford']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
255 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'you', 'could', 'only', 'pick', 'between', 'a', 'nissan', 'altima', 'or', 'a', 'ford', 'escort', 'which', 'would', 'u', 'pick?']
['nissan', 'ford']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'ford', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'lighter', 'heavier', 'smoother'] ['easier']
2
winnder: ford  other: nissan
acpect winner  lighter, faster and heavier
acpect other  easier
type  templates
winnder: ford  other: nissan
acpect winner  lighter, faster and heavier
acpect other  easier
self predicate  better
answer begin:  The ford is better than nissan. The reason are lighter, faster and heavier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, lighter, heavier, smoother
faster, lighter, heavier, smoother
winner_aspects_string1 lighter, faster and heavier
looser_aspects_string1 easier
make response  After much thought, I realized that  ford is better, because of lighter, faster and heavier. Nissan is easier.
gen templates 3 After much thought, I realized that  ford is better, because of lighter, faster and heavier. Nissan is easier.
full answer  After much thought, I realized that  ford is better, because of lighter, faster and heavier. Nissan is easier.
After much thought, I realized that  ford is better, because of lighter, faster and heavier. Nissan is easier.
256 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['nissan', 'titan', 'vs.', 'ford', 'f250?']
['nissan', 'ford']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'ford', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'lighter', 'heavier', 'smoother'] ['easier']
2
winnder: ford  other: nissan
acpect winner  lighter, faster and heavier
acpect other  easier
type  templates
winnder: ford  other: nissan
acpect winner  lighter, faster and heavier
acpect other  easier
self predicate  better
answer begin:  The ford is better than nissan. The reason are lighter, faster and heavier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, lighter, heavier, smoother
faster, lighter, heavier, smoother
winner_aspects_string1 lighter, faster and heavier
looser_aspects_string1 easier
make response  I came to the conclusion that ford is better, because of lighter, faster and heavier. But you should know that nissan is easier.
gen templates 3 I came to the conclusion that ford is better, because of lighter, faster and heavier. But you should know that nissan is easier.
full answer  I came to the conclusion that ford is better, because of lighter, faster and heavier. But you should know that nissan is easier.
I came to the conclusion that ford is better, because of lighter, faster and heavier. But you should know that nissan is easier.
257 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O']
extract_objects_predicates words ['what', 'model', 'truck', 'is', 'better', 'toyota,ford,chevy,dodge,nissan?']
[]
['better']
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
258 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'you', 'prefer', 'toyota,', 'ford,', 'or', 'dodge?', 'why?']
['toyota,', 'ford,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'ford', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'higher', 'safer', 'car'] ['easier', 'easier to understand a toyota', 'easier to sell', 'faster to 60mph by 15 seconds']
2
winnder: ford  other: toyota
acpect winner  safer, higher and quicker
acpect other  easier, easier to sell and easier to understand a toyota
type  templates
winnder: ford  other: toyota
acpect winner  safer, higher and quicker
acpect other  easier, easier to sell and easier to understand a toyota
self predicate  better
answer begin:  The ford is better than toyota. The reason are safer, higher and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, higher, safer, car
quicker, higher, safer, car
winner_aspects_string1 safer, higher and quicker
looser_aspects_string1 easier, easier to sell and easier to understand a toyota
make response  After much thought, I realized that  ford is better, because of safer, higher and quicker. Toyota is easier, easier to sell and easier to understand a toyota.
gen templates 3 After much thought, I realized that  ford is better, because of safer, higher and quicker. Toyota is easier, easier to sell and easier to understand a toyota.
full answer  After much thought, I realized that  ford is better, because of safer, higher and quicker. Toyota is easier, easier to sell and easier to understand a toyota.
After much thought, I realized that  ford is better, because of safer, higher and quicker. Toyota is easier, easier to sell and easier to understand a toyota.
259 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'the', 'best', 'automobie???', 'toyota?', 'honda?', 'ford?', 'porsche?']
['ford?']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
260 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'a', 'better', 'offroad', 'vehicle?', 'toyota', 'or', 'ford?']
['toyota']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'a', 'better', 'offroad', 'vehicle', '?', 'toyota', 'or', 'ford', '?']
or simple split_sent 8
toyota ford
aspects ['better']
weights [1]
get url
params {'objectA': 'toyota', 'objectB': 'ford', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'higher', 'safer', 'car'] ['easier', 'easier to understand a toyota', 'easier to sell', 'faster to 60mph by 15 seconds']
2
winnder: ford  other: toyota
acpect winner  safer, higher and quicker
acpect other  easier, easier to sell and easier to understand a toyota
type  templates
winnder: ford  other: toyota
acpect winner  safer, higher and quicker
acpect other  easier, easier to sell and easier to understand a toyota
self predicate  better
answer begin:  The ford is better than toyota. The reason are safer, higher and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, higher, safer, car
quicker, higher, safer, car
winner_aspects_string1 safer, higher and quicker
looser_aspects_string1 easier, easier to sell and easier to understand a toyota
make response  After much thought, I realized that  ford is better, because of safer, higher and quicker. But you should know that toyota is easier, easier to sell and easier to understand a toyota.
gen templates 3 After much thought, I realized that  ford is better, because of safer, higher and quicker. But you should know that toyota is easier, easier to sell and easier to understand a toyota.
full answer  After much thought, I realized that  ford is better, because of safer, higher and quicker. But you should know that toyota is easier, easier to sell and easier to understand a toyota.
After much thought, I realized that  ford is better, because of safer, higher and quicker. But you should know that toyota is easier, easier to sell and easier to understand a toyota.
261 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['who', 'make', 'better', 'minivans', 'ford', 'or', 'toyota?']
['ford']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['who', 'make', 'better', 'minivans', 'ford', 'or', 'toyota', '?']
or simple split_sent 5
ford toyota
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ford', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['quicker', 'easier', 'lighter', 'faster'] ['safer', 'car', 'smoother', 'trucks']
2
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
type  templates
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
self predicate  b
answer begin:  The toyota is b than ford. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, easier, lighter, faster
quicker, easier, lighter, faster
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1  and safer
make response  I would prefer to use toyota because of lighter, easier and faster. But you should know that ford is  and safer.
gen templates 3 I would prefer to use toyota because of lighter, easier and faster. But you should know that ford is  and safer.
full answer  I would prefer to use toyota because of lighter, easier and faster. But you should know that ford is  and safer.
I would prefer to use toyota because of lighter, easier and faster. But you should know that ford is  and safer.
262 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['does', 'anyone', 'notice', 'the', 'difference', 'between', 'this', 'ford', 'site', 'and', 'toyota', 'site????']
['ford', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'easier', 'lighter', 'faster'] ['safer', 'car', 'smoother', 'trucks']
2
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
type  templates
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
self predicate  better
answer begin:  The toyota is better than ford. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, easier, lighter, faster
quicker, easier, lighter, faster
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1  and safer
make response  Looks like toyota is better, because of lighter, easier and faster. Ford is  and safer.
gen templates 3 Looks like toyota is better, because of lighter, easier and faster. Ford is  and safer.
full answer  Looks like toyota is better, because of lighter, easier and faster. Ford is  and safer.
Looks like toyota is better, because of lighter, easier and faster. Ford is  and safer.
263 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'car', 'is', 'better', 'for', 'afamily', 'of', 'four', 'living', 'in', 'the', 'bay', 'area', 'of', 'san', 'fran', 'sisco?', 'ford,honda,lexus', 'or', 'a', 'toyota?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'car', 'is', 'better', 'for', 'afamily', 'of', 'four', 'living', 'in', 'the', 'bay', 'area', 'of', 'San', 'Fran', 'Sisco', '?', 'Ford', ',', 'honda', ',', 'lexus', 'or', 'a', 'toyota', '?']
We can't recognize objects for comparision
264 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'your', 'opinion', 'on', 'gm', 'vs.', 'toyota', 'vs.', 'ford??']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs.
tokens ['What', 'is', 'your', 'opinion', 'on', 'GM', 'vs.', 'Toyota', 'vs.', 'Ford', '?', '?']
aspects []
weights []
get url
params {'objectA': 'GM', 'objectB': 'Toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'cheaper', 'easier', 'faster'] ['higher', 'greater', 'advantage', 'hindsight']
2
winnder: toyota  other: gm
acpect winner  easier, faster and smarter
acpect other  greater and higher
type  templates
winnder: toyota  other: gm
acpect winner  easier, faster and smarter
acpect other  greater and higher
self predicate  better
answer begin:  The toyota is better than gm. The reason are easier, faster and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, cheaper, easier, faster
smarter, cheaper, easier, faster
winner_aspects_string1 easier, faster and smarter
looser_aspects_string1 greater and higher
make response  I would prefer to use toyota because of easier, faster and smarter. But it will be useful for you to know that gm is greater and higher.
gen templates 3 I would prefer to use toyota because of easier, faster and smarter. But it will be useful for you to know that gm is greater and higher.
full answer  I would prefer to use toyota because of easier, faster and smarter. But it will be useful for you to know that gm is greater and higher.
I would prefer to use toyota because of easier, faster and smarter. But it will be useful for you to know that gm is greater and higher.
265 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'car', 'is', 'better-the', 'ford', 'focus', 'or', 'the', 'toyota', 'matrix?']
['ford', 'toyota']
['better-the']
len(objects) 2
aspects ['better-the']
weights [1]
get url
params {'objectA': 'ford', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'better-the', 'weight1': 1}
1
create fro json predicates ['better-the']
create fro json self.predicates better-the
aspects  ['quicker', 'easier', 'lighter', 'faster'] ['safer', 'car', 'smoother', 'trucks']
2
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
type  templates
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
self predicate  better-the
answer begin:  The toyota is better-the than ford. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, easier, lighter, faster
quicker, easier, lighter, faster
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1  and safer
make response  I came to the conclusion that toyota is better, because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
gen templates 3 I came to the conclusion that toyota is better, because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
full answer  I came to the conclusion that toyota is better, because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
I came to the conclusion that toyota is better, because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
266 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'ford', 'or', 'toyota?']
['ford']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'ford', 'or', 'Toyota', '?']
or simple split_sent 4
ford Toyota
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ford', 'objectB': 'Toyota', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['quicker', 'easier', 'lighter', 'faster'] ['safer', 'car', 'smoother', 'trucks']
2
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
type  templates
winnder: toyota  other: ford
acpect winner  lighter, easier and faster
acpect other  safer
self predicate  b
answer begin:  The toyota is b than ford. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, easier, lighter, faster
quicker, easier, lighter, faster
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1  and safer
make response  I would prefer to use toyota because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
gen templates 3 I would prefer to use toyota because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
full answer  I would prefer to use toyota because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
I would prefer to use toyota because of lighter, easier and faster. But it will be useful for you to know that ford is  and safer.
267 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O']
extract_objects_predicates words ['what', 'model', 'truck', 'is', 'better', 'toyota,ford,chevy,dodge,nissan?']
[]
['better']
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
268 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'in', 'mpg,', 'toyota,', 'honda,', 'mazda', 'or', 'nissan?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'in', 'MPG', ',', 'Toyota', ',', 'Honda', ',', 'Mazda', 'or', 'Nissan', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Mazda', 'objectB': 'Nissan', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'bigger', 'lighter', 'lbs'] ['base', 'car', 'kilos', 'better to drive']
2
winnder: nissan  other: mazda
acpect winner  lighter, greater and bigger
acpect other  better to drive
type  templates
winnder: nissan  other: mazda
acpect winner  lighter, greater and bigger
acpect other  better to drive
self predicate  b
answer begin:  The nissan is b than mazda. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, lbs
greater, bigger, lighter, lbs
winner_aspects_string1 lighter, greater and bigger
looser_aspects_string1  and better to drive
make response  It's simple! Nissan is better, because of lighter, greater and bigger. Mazda is  and better to drive.
gen templates 3 It's simple! Nissan is better, because of lighter, greater and bigger. Mazda is  and better to drive.
full answer  It's simple! Nissan is better, because of lighter, greater and bigger. Mazda is  and better to drive.
It's simple! Nissan is better, because of lighter, greater and bigger. Mazda is  and better to drive.
269 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'truck', 'is', 'better:', 'toyota', 'tundra', 'or', 'nissan', 'titan?']
['toyota', 'nissan']
['better:']
len(objects) 2
aspects ['better:']
weights [1]
get url
params {'objectA': 'toyota', 'objectB': 'nissan', 'fs': 'true', 'aspect1': 'better:', 'weight1': 1}
1
create fro json predicates ['better:']
create fro json self.predicates better:
aspects  ['greater', 'faster', 'lighter', 'simpler'] ['easier', 'easier to park', 'corners', 'higher']
2
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and higher
type  templates
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and higher
self predicate  better:
answer begin:  The nissan is better: than toyota. The reason are lighter, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, lighter, simpler
greater, faster, lighter, simpler
winner_aspects_string1 lighter, greater and faster
looser_aspects_string1 easier, easier to park and higher
make response  Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and higher.
gen templates 3 Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and higher.
full answer  Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and higher.
Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and higher.
270 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'car,', 'toyota,', 'nissan', 'or', 'honda?']
['nissan']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'car', ',', 'Toyota', ',', 'Nissan', 'or', 'Honda', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Nissan', 'objectB': 'Honda', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['richer', 'higher', 'longer', 'more to'] ['greater', 'head', 'legroom', 'lighter']
2
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
type  templates
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
self predicate  b
answer begin:  The honda is b than nissan. The reason are longer, higher and more to. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
richer, higher, longer, more to
richer, higher, longer, more to
winner_aspects_string1 longer, higher and more to
looser_aspects_string1 lighter and greater
make response  I came to the conclusion that honda is better, because of longer, higher and more to. But you should know that nissan is lighter and greater.
gen templates 3 I came to the conclusion that honda is better, because of longer, higher and more to. But you should know that nissan is lighter and greater.
full answer  I came to the conclusion that honda is better, because of longer, higher and more to. But you should know that nissan is lighter and greater.
I came to the conclusion that honda is better, because of longer, higher and more to. But you should know that nissan is lighter and greater.
271 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'car', 'to', 'by', 'with', 'high', 'mileage,', 'nissan,', 'honda,', 'toyota?']
['nissan,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'stronger', 'easier to manage'] ['bigger', 'heavier', 'easier to live with', 'larger']
winnder: nissan  other: and
acpect winner  stronger, longer and easier to manage
acpect other  heavier, larger and easier to live with
type  templates
nissan has undeniable advantages. They are stronger, longer and easier to manage.
272 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'car', 'better', 'nissan', 'or', 'toyota?']
['nissan']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'car', 'better', 'nissan', 'or', 'toyota', '?']
or simple split_sent 4
nissan toyota
aspects ['better']
weights [1]
get url
params {'objectA': 'nissan', 'objectB': 'toyota', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'higher', 'quicker', 'easier to park'] ['greater', 'faster', 'simpler', 'better to lease a nissan']
2
winnder: toyota  other: nissan
acpect winner  easier, higher and quicker
acpect other  greater, better to lease a nissan and faster
type  templates
winnder: toyota  other: nissan
acpect winner  easier, higher and quicker
acpect other  greater, better to lease a nissan and faster
self predicate  better
answer begin:  The toyota is better than nissan. The reason are easier, higher and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, higher, quicker, easier to park
easier, higher, quicker, easier to park
winner_aspects_string1 easier, higher and quicker
looser_aspects_string1 greater, better to lease a nissan and faster
make response  After much thought, I realized that  toyota is better, because of easier, higher and quicker. Nissan is greater, better to lease a nissan and faster.
gen templates 3 After much thought, I realized that  toyota is better, because of easier, higher and quicker. Nissan is greater, better to lease a nissan and faster.
full answer  After much thought, I realized that  toyota is better, because of easier, higher and quicker. Nissan is greater, better to lease a nissan and faster.
After much thought, I realized that  toyota is better, because of easier, higher and quicker. Nissan is greater, better to lease a nissan and faster.
273 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better?', 'toyota', 'prado,', 'nissan', 'pathfinder', 'or', 'mazda', 'mpv', '(all', '2006', 'models)?']
['toyota', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'faster', 'lighter', 'simpler'] ['easier', 'smarter', 'easier to park', 'corners']
2
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
type  templates
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
self predicate  better
answer begin:  The nissan is better than toyota. The reason are lighter, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, lighter, simpler
greater, faster, lighter, simpler
winner_aspects_string1 lighter, greater and faster
looser_aspects_string1 easier, easier to park and smarter
make response  It's simple! Nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
gen templates 3 It's simple! Nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
full answer  It's simple! Nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
It's simple! Nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
274 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'does', 'honda,', 'toyota', 'or', 'nissan', 'have', 'a', 'better', 'track', 'record', 'of', 'reliability?']
['nissan']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'does', 'honda', ',', 'Toyota', 'or', 'Nissan', 'have', 'a', 'better', 'track', 'record', 'of', 'reliability', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Toyota', 'objectB': 'Nissan', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'faster', 'lighter', 'simpler'] ['easier', 'smarter', 'easier to park', 'corners']
2
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
type  templates
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
self predicate  b
answer begin:  The nissan is b than toyota. The reason are lighter, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, lighter, simpler
greater, faster, lighter, simpler
winner_aspects_string1 lighter, greater and faster
looser_aspects_string1 easier, easier to park and smarter
make response  After much thought, I realized that  nissan is better, because of lighter, greater and faster. But i should tell you that toyota is easier, easier to park and smarter.
gen templates 3 After much thought, I realized that  nissan is better, because of lighter, greater and faster. But i should tell you that toyota is easier, easier to park and smarter.
full answer  After much thought, I realized that  nissan is better, because of lighter, greater and faster. But i should tell you that toyota is easier, easier to park and smarter.
After much thought, I realized that  nissan is better, because of lighter, greater and faster. But i should tell you that toyota is easier, easier to park and smarter.
275 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'car', 'should', 'i', 'buy', 'a', '2007', 'toyota', 'camry', 'or', 'the', '2006', 'nissan', 'maxima?']
['toyota', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'faster', 'lighter', 'simpler'] ['easier', 'smarter', 'easier to park', 'corners']
2
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
type  templates
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
self predicate  better
answer begin:  The nissan is better than toyota. The reason are lighter, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, lighter, simpler
greater, faster, lighter, simpler
winner_aspects_string1 lighter, greater and faster
looser_aspects_string1 easier, easier to park and smarter
make response  I came to the conclusion that nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
gen templates 3 I came to the conclusion that nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
full answer  I came to the conclusion that nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
I came to the conclusion that nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
276 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'i', 'want', 'the', 'best', '&', 'can', 'only', 'afford', '1', 'which', 'suv', 'should', 'i', 'buy?', 'nissan', 'xterra,', 'honda', 'crv,', 'or', 'toyota', 'rav?']
['suv', 'nissan', 'honda']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'suv', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'bigger', 'smoother'] ['greater', 'engine', 'quicker', 'seating']
2
winnder: nissan  other: suv
acpect winner  lighter, easier and bigger
acpect other  greater and quicker
type  templates
winnder: nissan  other: suv
acpect winner  lighter, easier and bigger
acpect other  greater and quicker
self predicate  better
answer begin:  The nissan is better than suv. The reason are lighter, easier and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, bigger, smoother
lighter, easier, bigger, smoother
winner_aspects_string1 lighter, easier and bigger
looser_aspects_string1 greater and quicker
make response  After much thought, I realized that  nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
gen templates 3 After much thought, I realized that  nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
full answer  After much thought, I realized that  nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
After much thought, I realized that  nissan is better, because of lighter, easier and bigger. But i should tell you that suv is greater and quicker.
277 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['2007', 'toyota', '4runner', 'vs', '2007', 'nissan', 'pathfinder?']
['nissan']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['2007', 'Toyota', '4Runner', 'vs', '2007', 'Nissan', 'Pathfinder', '?']
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': '2007', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'larger', 'greater', 'roomier'] ['faster', 'toyota', 'honda', 'chevy']
2
winnder: 2007  other: nissan
acpect winner  greater, larger and bigger
acpect other  faster
type  templates
winnder: 2007  other: nissan
acpect winner  greater, larger and bigger
acpect other  faster
self predicate  better
answer begin:  The 2007 is better than nissan. The reason are greater, larger and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, larger, greater, roomier
bigger, larger, greater, roomier
winner_aspects_string1 greater, larger and bigger
looser_aspects_string1  and faster
make response  Looks like 2007 is better, because of greater, larger and bigger. But you should know that nissan is  and faster.
gen templates 3 Looks like 2007 is better, because of greater, larger and bigger. But you should know that nissan is  and faster.
full answer  Looks like 2007 is better, because of greater, larger and bigger. But you should know that nissan is  and faster.
Looks like 2007 is better, because of greater, larger and bigger. But you should know that nissan is  and faster.
278 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'more', 'reliable,', 'nissan', '300zx', 'or', 'toyota', 'mr2?']
['nissan', 'toyota']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'toyota', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'easier', 'higher', 'weaker'] ['greater', 'faster', 'simpler', 'better to lease a nissan']
2
winnder: toyota  other: nissan
acpect winner  weaker, easier and higher
acpect other  greater, better to lease a nissan and faster
type  templates
winnder: toyota  other: nissan
acpect winner  weaker, easier and higher
acpect other  greater, better to lease a nissan and faster
self predicate  better
answer begin:  The toyota is better than nissan. The reason are weaker, easier and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, easier, higher, weaker
quicker, easier, higher, weaker
winner_aspects_string1 weaker, easier and higher
looser_aspects_string1 greater, better to lease a nissan and faster
make response  I would prefer to use toyota because of weaker, easier and higher. But you should know that nissan is greater, better to lease a nissan and faster.
gen templates 3 I would prefer to use toyota because of weaker, easier and higher. But you should know that nissan is greater, better to lease a nissan and faster.
full answer  I would prefer to use toyota because of weaker, easier and higher. But you should know that nissan is greater, better to lease a nissan and faster.
I would prefer to use toyota because of weaker, easier and higher. But you should know that nissan is greater, better to lease a nissan and faster.
279 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'car', 'should', 'i', 'buy?', 'toyota', 'yaris', 'or', 'nissan', 'latio?']
['toyota', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'toyota', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'faster', 'lighter', 'simpler'] ['easier', 'smarter', 'easier to park', 'corners']
2
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
type  templates
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
self predicate  better
answer begin:  The nissan is better than toyota. The reason are lighter, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, lighter, simpler
greater, faster, lighter, simpler
winner_aspects_string1 lighter, greater and faster
looser_aspects_string1 easier, easier to park and smarter
make response  Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
gen templates 3 Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
full answer  Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
Looks like nissan is better, because of lighter, greater and faster. Toyota is easier, easier to park and smarter.
280 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['who', 'will', 'dominate', 'the', 'world', 'first,', 'google', 'or', 'microsoft?']
['google']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Who', 'will', 'dominate', 'the', 'world', 'first', ',', 'Google', 'or', 'Microsoft', '?']
aspects []
weights []
get url
params {'objectA': 'Google', 'objectB': 'Microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to work with', 'enterprises', 'greater', 'richer'] ['easier to use', 'simpler', 'cooler', 'safer']
2
winnder: microsoft  other: google
acpect winner  richer, greater and easier to work with
acpect other  safer, simpler and easier to use
type  templates
winnder: microsoft  other: google
acpect winner  richer, greater and easier to work with
acpect other  safer, simpler and easier to use
self predicate  better
answer begin:  The microsoft is better than google. The reason are richer, greater and easier to work with. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to work with, enterprises, greater, richer
easier to work with, enterprises, greater, richer
winner_aspects_string1 richer, greater and easier to work with
looser_aspects_string1 safer, simpler and easier to use
make response  After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But you should know that google is safer, simpler and easier to use.
gen templates 3 After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But you should know that google is safer, simpler and easier to use.
full answer  After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But you should know that google is safer, simpler and easier to use.
After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But you should know that google is safer, simpler and easier to use.
281 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'widget', 'application?', 'google', 'desktop/sidebar,', 'yahoo', 'widgets(konfabulator),', 'or', 'microsoft', 'gadgets?']
['google', 'yahoo', 'microsoft']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'google', 'objectB': 'yahoo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'easier to use', 'friendlier to open source', 'friendlier'] ['msn', 'indexing', 'search', 'faster to the encryption party']
2
winnder: yahoo  other: google
acpect winner  easier, friendlier and friendlier to open source
acpect other  faster to the encryption party
type  templates
winnder: yahoo  other: google
acpect winner  easier, friendlier and friendlier to open source
acpect other  faster to the encryption party
self predicate  better
answer begin:  The yahoo is better than google. The reason are easier, friendlier and friendlier to open source. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, easier to use, friendlier to open source, friendlier
easier, easier to use, friendlier to open source, friendlier
winner_aspects_string1 easier, friendlier and friendlier to open source
looser_aspects_string1  and faster to the encryption party
make response  I would prefer to use yahoo because of easier, friendlier and friendlier to open source. But you should know that google is  and faster to the encryption party.
gen templates 3 I would prefer to use yahoo because of easier, friendlier and friendlier to open source. But you should know that google is  and faster to the encryption party.
full answer  I would prefer to use yahoo because of easier, friendlier and friendlier to open source. But you should know that google is  and faster to the encryption party.
I would prefer to use yahoo because of easier, friendlier and friendlier to open source. But you should know that google is  and faster to the encryption party.
282 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'u', 'like', 'most', 'and', 'why', 'google,', 'yahoo', ',', 'microsoft', 'or', 'none?']
['microsoft']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'one', 'u', 'like', 'most', 'and', 'why', 'Google', ',', 'yahoo', ',', 'microsoft', 'or', 'none', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'microsoft', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to use', 'friendlier', 'simpler', 'easier'] ['greater', 'older', 'lighter', 'netscape']
winnder: and  other: microsoft
acpect winner  simpler, friendlier and easier to use
acpect other  lighter, greater and older
type  templates
microsoft has undeniable advantages. They are simpler, friendlier and easier to use.
283 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'want', 'to', 'know', 'which', 'company,', 'yahoo,', 'microsoft', 'or', 'google', 'has', 'more', 'of', 'a', 'future', 'in', 'search', 'engines?']
['google']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I', 'want', 'to', 'know', 'which', 'company', ',', 'yahoo', ',', 'microsoft', 'or', 'google', 'has', ' ', 'more', 'of', 'a', 'future', 'in', 'search', 'engines', '?']
or simple split_sent 10
microsoft google
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'microsoft', 'objectB': 'google', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['easier to work with', 'enterprises', 'greater', 'smarter'] ['easier to use', 'office', 'suite', 'computer']
2
winnder: microsoft  other: google
acpect winner  greater, easier to work with and smarter
acpect other  easier to use
type  templates
winnder: microsoft  other: google
acpect winner  greater, easier to work with and smarter
acpect other  easier to use
self predicate  m
answer begin:  The microsoft is m than google. The reason are greater, easier to work with and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to work with, enterprises, greater, smarter
easier to work with, enterprises, greater, smarter
winner_aspects_string1 greater, easier to work with and smarter
looser_aspects_string1  and easier to use
make response  After much thought, I realized that  microsoft is better, because of greater, easier to work with and smarter. But i should tell you that google is  and easier to use.
gen templates 3 After much thought, I realized that  microsoft is better, because of greater, easier to work with and smarter. But i should tell you that google is  and easier to use.
full answer  After much thought, I realized that  microsoft is better, because of greater, easier to work with and smarter. But i should tell you that google is  and easier to use.
After much thought, I realized that  microsoft is better, because of greater, easier to work with and smarter. But i should tell you that google is  and easier to use.
284 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best', 'corporation', 'to', 'work', 'with...microsoft', 'or', 'google?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'the', 'best', 'corporation', 'to', 'work', 'with', '...', 'Microsoft', 'or', 'Google', '?']
aspects []
weights []
get url
params {'objectA': 'Microsoft', 'objectB': 'Google', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to work with', 'enterprises', 'greater', 'smarter'] ['easier to use', 'office', 'suite', 'computer']
2
winnder: microsoft  other: google
acpect winner  greater, easier to work with and smarter
acpect other  easier to use
type  templates
winnder: microsoft  other: google
acpect winner  greater, easier to work with and smarter
acpect other  easier to use
self predicate  better
answer begin:  The microsoft is better than google. The reason are greater, easier to work with and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to work with, enterprises, greater, smarter
easier to work with, enterprises, greater, smarter
winner_aspects_string1 greater, easier to work with and smarter
looser_aspects_string1  and easier to use
make response  I came to the conclusion that microsoft is better, because of greater, easier to work with and smarter. Google is  and easier to use.
gen templates 3 I came to the conclusion that microsoft is better, because of greater, easier to work with and smarter. Google is  and easier to use.
full answer  I came to the conclusion that microsoft is better, because of greater, easier to work with and smarter. Google is  and easier to use.
I came to the conclusion that microsoft is better, because of greater, easier to work with and smarter. Google is  and easier to use.
285 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'company', 'in', 'perspective', 'of', 'web', 'technologies?', 'is', 'it', 'google', 'or', 'microsoft', 'or', 'yahoo?']
['google', 'microsoft']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'google', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to work with', 'enterprises', 'greater', 'richer'] ['easier to use', 'simpler', 'cooler', 'safer']
2
winnder: microsoft  other: google
acpect winner  richer, greater and easier to work with
acpect other  safer, simpler and easier to use
type  templates
winnder: microsoft  other: google
acpect winner  richer, greater and easier to work with
acpect other  safer, simpler and easier to use
self predicate  better
answer begin:  The microsoft is better than google. The reason are richer, greater and easier to work with. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to work with, enterprises, greater, richer
easier to work with, enterprises, greater, richer
winner_aspects_string1 richer, greater and easier to work with
looser_aspects_string1 safer, simpler and easier to use
make response  After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But it will be useful for you to know that google is safer, simpler and easier to use.
gen templates 3 After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But it will be useful for you to know that google is safer, simpler and easier to use.
full answer  After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But it will be useful for you to know that google is safer, simpler and easier to use.
After much thought, I realized that  microsoft is better, because of richer, greater and easier to work with. But it will be useful for you to know that google is safer, simpler and easier to use.
286 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'will', 'win', 'the', 'internet', 'wars?', 'microsoft,', 'yahoo', 'or', 'google?', ':-)?']
['microsoft,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['who', 'will', 'win', 'the', 'internet', 'wars', '?', 'Microsoft', ',', 'Yahoo', 'or', 'Google', '?', ':-)', '?']
aspects []
weights []
get url
params {'objectA': 'Yahoo', 'objectB': 'Google', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['cooler', 'indexing', 'greater', 'search'] ['easier to grab', 'easier', 'easier to use', 'more to do with the google results getting worse']
2
winnder: google  other: yahoo
acpect winner  greater
acpect other  easier, easier to grab and more to do with the google results getting worse
type  templates
winnder: google  other: yahoo
acpect winner  greater
acpect other  easier, easier to grab and more to do with the google results getting worse
self predicate  better
answer begin:  The google is better than yahoo. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cooler, indexing, greater, search
cooler, indexing, greater, search
winner_aspects_string1  and greater
looser_aspects_string1 easier, easier to grab and more to do with the google results getting worse
make response  I came to the conclusion that google is better, because of  and greater. But i should tell you that yahoo is easier, easier to grab and more to do with the google results getting worse.
gen templates 3 I came to the conclusion that google is better, because of  and greater. But i should tell you that yahoo is easier, easier to grab and more to do with the google results getting worse.
full answer  I came to the conclusion that google is better, because of  and greater. But i should tell you that yahoo is easier, easier to grab and more to do with the google results getting worse.
I came to the conclusion that google is better, because of  and greater. But i should tell you that yahoo is easier, easier to grab and more to do with the google results getting worse.
287 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['yahoo', 'or', 'microsoft', 'or', 'google?']
['microsoft']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Yahoo', 'or', 'Microsoft', 'or', 'Google', '?']
aspects []
weights []
get url
params {'objectA': 'microsoft', 'objectB': 'Microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: microsoft  other: microsoft
acpect winner  
acpect other  
type  templates
winnder: microsoft  other: microsoft
acpect winner  
acpect other  
self predicate  better
answer begin:  The microsoft is better than microsoft. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer microsoft than microsoft.
full answer  I would prefer microsoft than microsoft.
I would prefer microsoft than microsoft.
288 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better', 'psp', 'or', 'ps2?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'one', 'is', 'better', 'psp', 'or', 'ps2', '?']
or simple split_sent 5
psp ps2
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'psp', 'objectB': 'ps2', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['higher', 'sharper', 'faster', 'greater'] ['brighter', 'easier to rip']
2
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
type  templates
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
self predicate  b
answer begin:  The psp is b than ps2. The reason are faster, higher and sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, sharper, faster, greater
higher, sharper, faster, greater
winner_aspects_string1 faster, higher and sharper
looser_aspects_string1 brighter and easier to rip
make response  Looks like psp is better, because of faster, higher and sharper. But i should tell you that ps2 is brighter and easier to rip.
gen templates 3 Looks like psp is better, because of faster, higher and sharper. But i should tell you that ps2 is brighter and easier to rip.
full answer  Looks like psp is better, because of faster, higher and sharper. But i should tell you that ps2 is brighter and easier to rip.
Looks like psp is better, because of faster, higher and sharper. But i should tell you that ps2 is brighter and easier to rip.
289 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'difference', 'between', 'nba', '06', 'for', 'the', 'ps2', 'and', 'nba', '06', 'for', 'the', 'psp?']
['ps2']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'smoother', 'lighter'] ['graphics', 'igps', 'intel', 'greater']
winnder: and  other: ps2
acpect winner  lighter, easier and faster
acpect other  greater
type  templates
ps2 has undeniable advantages. They are lighter, easier and faster.
290 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'the', 'psp', 'better', 'than', 'the', 'ps2???']
['psp']
['better']
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects ['better']
weights [1]
get url
params {'objectA': 'psp', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger'] ['slimmer', 'easier to learn experience', 'easier', 'faster']
winnder: and  other: psp
acpect winner  easier to use and better for their small hands, greater and bigger
acpect other  easier to learn experience, faster and easier
type  templates
psp has undeniable advantages. They are easier to use and better for their small hands, greater and bigger.
291 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'good', 'ps2,xbox', 'or', 'psp?']
['ps2,xbox']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'good', 'PS2,Xbox', 'or', 'PSP', '?']
or simple split_sent 4
PS2,Xbox PSP
aspects []
weights []
get url
params {'objectA': 'PS2,Xbox', 'objectB': 'PSP', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: psp  other: ps2,xbox
acpect winner  
acpect other  
type  templates
winnder: psp  other: ps2,xbox
acpect winner  
acpect other  
self predicate  better
answer begin:  The psp is better than ps2,xbox. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer psp than ps2,xbox.
full answer  I would prefer psp than ps2,xbox.
I would prefer psp than ps2,xbox.
292 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'a', 'psp', 'or', 'a', 'ps2?']
['psp']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'a', 'PSP', 'or', 'a', 'Ps2', '?']
or simple split_sent 5
PSP a
aspects ['better']
weights [1]
get url
params {'objectA': 'PSP', 'objectB': 'a', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['bigger', 'lighter', 'larger', 'smoother'] ['easier to maintain a stable connection for either versus mode or coop play', 'ds', 'faster', 'hardware']
2
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster and easier to maintain a stable connection for either versus mode or coop play
type  templates
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster and easier to maintain a stable connection for either versus mode or coop play
self predicate  better
answer begin:  The a is better than psp. The reason are lighter, larger and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, lighter, larger, smoother
bigger, lighter, larger, smoother
winner_aspects_string1 lighter, larger and bigger
looser_aspects_string1 faster and easier to maintain a stable connection for either versus mode or coop play
make response  Looks like a is better, because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
gen templates 3 Looks like a is better, because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
full answer  Looks like a is better, because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
Looks like a is better, because of lighter, larger and bigger. But it will be useful for you to know that psp is faster and easier to maintain a stable connection for either versus mode or coop play.
293 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'buy', 'a', 'psp', 'or', 'ps2.', 'the', 'ps2', 'has', 'bunch', 'of', 'games', 'but', 'psp', 'is', 'cooler', 'and', 'is', 'portable', 'which', 'one?']
['psp', 'ps2.', 'ps2', 'psp']
['cooler']
len(objects) 4
aspects ['cooler']
weights [1]
get url
params {'objectA': 'psp', 'objectB': 'ps2', 'fs': 'true', 'aspect1': 'cooler', 'weight1': 1}
1
create fro json predicates ['cooler']
create fro json self.predicates cooler
aspects  ['higher', 'sharper', 'faster', 'greater'] ['brighter', 'easier to rip']
2
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
type  templates
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
self predicate  cooler
answer begin:  The psp is cooler than ps2. The reason are faster, higher and sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, sharper, faster, greater
higher, sharper, faster, greater
winner_aspects_string1 faster, higher and sharper
looser_aspects_string1 brighter and easier to rip
make response  After much thought, I realized that  psp is better, because of faster, higher and sharper. Ps2 is brighter and easier to rip.
gen templates 3 After much thought, I realized that  psp is better, because of faster, higher and sharper. Ps2 is brighter and easier to rip.
full answer  After much thought, I realized that  psp is better, because of faster, higher and sharper. Ps2 is brighter and easier to rip.
After much thought, I realized that  psp is better, because of faster, higher and sharper. Ps2 is brighter and easier to rip.
294 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'a', 'ps2', 'or', 'a', 'psp?']
['ps2']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'a', 'ps2', 'or', 'a', 'psp', '?']
or simple split_sent 6
ps2 a
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'older', 'easier to emulate using only software'] ['spaceand', 'bonus', 'gameboy', 'player']
2
winnder: a  other: ps2
acpect winner  easier, older and easier to emulate using only software
acpect other  
type  templates
winnder: a  other: ps2
acpect winner  easier, older and easier to emulate using only software
acpect other  
self predicate  better
answer begin:  The a is better than ps2. The reason are easier, older and easier to emulate using only software. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, older, easier to emulate using only software
easier, smoother, older, easier to emulate using only software
winner_aspects_string1 easier, older and easier to emulate using only software
smth wrong in answer generation, please try again
295 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'is', "psp's", 'graphics??', 'is', 'it', 'worth', 'buying', 'it', '??..can', 'it', 'be', 'compared', 'to', 'ps2??..i', 'dont', 'wanna', 'be', 'place', 'depndt']
["psp's"]
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': "psp's", 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'nicer', 'easier to deal with'] ['longer']
winnder: and  other: psp's
acpect winner  easier to deal with, easier and faster
acpect other  longer
type  templates
psp's has undeniable advantages. They are easier to deal with, easier and faster.
296 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'a', 'psp', 'or', 'x-box,', 'x-box', '360or', 'a', 'ps2?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'a', 'PSP', 'or', 'X', '-', 'box', ',', 'X', '-', 'box', '360or', 'a', 'PS2', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
297 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['is', 'there', 'difference', 'between', 'the', 'graphics', 'of', 'psp', 'and', 'ps2?']
['psp']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
298 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['wich', 'one', 'is', 'better', 'to', 'play', 'my', 'game', 'smackdown', 'vs', 'raw', '2007', 'psp', 'or', 'ps2?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['wich', 'one', 'is', 'better', 'to', 'play', 'my', 'game', 'smackdown', 'vs', 'raw', '2007', 'psp', 'or', 'ps2', '?']
or simple split_sent 13
psp ps2
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'psp', 'objectB': 'ps2', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['higher', 'sharper', 'faster', 'greater'] ['brighter', 'easier to rip']
2
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
type  templates
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
self predicate  b
answer begin:  The psp is b than ps2. The reason are faster, higher and sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, sharper, faster, greater
higher, sharper, faster, greater
winner_aspects_string1 faster, higher and sharper
looser_aspects_string1 brighter and easier to rip
make response  I would prefer to use psp because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
gen templates 3 I would prefer to use psp because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
full answer  I would prefer to use psp because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
I would prefer to use psp because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
299 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'game', 'system', 'has', 'better', 'graphics', 'for', 'smackdown', 'vs.', 'raw', '2007,', 'psp', 'or', 'ps2?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'game', 'system', 'has', 'better', 'graphics', 'for', 'smackdown', 'vs.', 'raw', '2007', ',', 'psp', 'or', 'ps2', '?']
or simple split_sent 13
psp ps2
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'psp', 'objectB': 'ps2', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['higher', 'sharper', 'faster', 'greater'] ['brighter', 'easier to rip']
2
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
type  templates
winnder: psp  other: ps2
acpect winner  faster, higher and sharper
acpect other  brighter and easier to rip
self predicate  b
answer begin:  The psp is b than ps2. The reason are faster, higher and sharper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, sharper, faster, greater
higher, sharper, faster, greater
winner_aspects_string1 faster, higher and sharper
looser_aspects_string1 brighter and easier to rip
make response  I came to the conclusion that psp is better, because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
gen templates 3 I came to the conclusion that psp is better, because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
full answer  I came to the conclusion that psp is better, because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
I came to the conclusion that psp is better, because of faster, higher and sharper. But you should know that ps2 is brighter and easier to rip.
300 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'like', 'best?', 'psp', 'or', 'a', 'ps2?']
['psp']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'do', 'you', 'like', 'best', '?', 'psp', 'or', 'a', 'ps2', '?']
or simple split_sent 7
psp a
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'lighter', 'larger', 'smoother'] ['easier to maintain a stable connection for either versus mode or coop play', 'ds', 'faster', 'easier to scratch']
2
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster, easier to maintain a stable connection for either versus mode or coop play and easier to scratch
type  templates
winnder: a  other: psp
acpect winner  lighter, larger and bigger
acpect other  faster, easier to maintain a stable connection for either versus mode or coop play and easier to scratch
self predicate  better
answer begin:  The a is better than psp. The reason are lighter, larger and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, lighter, larger, smoother
bigger, lighter, larger, smoother
winner_aspects_string1 lighter, larger and bigger
looser_aspects_string1 faster, easier to maintain a stable connection for either versus mode or coop play and easier to scratch
make response  Looks like a is better, because of lighter, larger and bigger. But you should know that psp is faster, easier to maintain a stable connection for either versus mode or coop play and easier to scratch.
gen templates 3 Looks like a is better, because of lighter, larger and bigger. But you should know that psp is faster, easier to maintain a stable connection for either versus mode or coop play and easier to scratch.
full answer  Looks like a is better, because of lighter, larger and bigger. But you should know that psp is faster, easier to maintain a stable connection for either versus mode or coop play and easier to scratch.
Looks like a is better, because of lighter, larger and bigger. But you should know that psp is faster, easier to maintain a stable connection for either versus mode or coop play and easier to scratch.
301 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  After much thought, I realized that  psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
gen templates 3 After much thought, I realized that  psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
full answer  After much thought, I realized that  psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
After much thought, I realized that  psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
302 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'xbox', '360,ps2', 'or', 'psp?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', 'Xbox', '360,PS2', 'or', 'PSP', '?']
or simple split_sent 5
360,PS2 PSP
aspects ['better']
weights [1]
get url
params {'objectA': '360,PS2', 'objectB': 'PSP', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  [] []
2
winnder: psp  other: 360,ps2
acpect winner  
acpect other  
type  templates
winnder: psp  other: 360,ps2
acpect winner  
acpect other  
self predicate  better
answer begin:  The psp is better than 360,ps2. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer psp than 360,ps2.
full answer  I would prefer psp than 360,ps2.
I would prefer psp than 360,ps2.
303 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'ds', 'psp', 'ps2', 'or', 'x', 'box', '360?']
['ds', 'psp', 'ps2']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn experience', 'cooler', 'cleaner', 'higher'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cooler, cleaner, higher
easier to learn experience, cooler, cleaner, higher
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to emulate and longer
make response  I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to emulate and longer.
gen templates 3 I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to emulate and longer.
full answer  I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to emulate and longer.
I came to the conclusion that psp is better, because of easier to learn experience, cleaner and higher. But you should know that ds is easier to emulate and longer.
304 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'ps2', 'or', 'psp?']
['ps2']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'ps2', 'or', 'psp', '?']
or simple split_sent 4
ps2 psp
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps2', 'objectB': 'psp', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'higher', 'sharper', 'faster'] ['brighter', 'easier to rip', 'easier to pitch', 'controls']
2
winnder: psp  other: ps2
acpect winner  faster, greater and higher
acpect other  brighter, easier to rip and easier to pitch
type  templates
winnder: psp  other: ps2
acpect winner  faster, greater and higher
acpect other  brighter, easier to rip and easier to pitch
self predicate  b
answer begin:  The psp is b than ps2. The reason are faster, greater and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, higher, sharper, faster
greater, higher, sharper, faster
winner_aspects_string1 faster, greater and higher
looser_aspects_string1 brighter, easier to rip and easier to pitch
make response  Looks like psp is better, because of faster, greater and higher. But it will be useful for you to know that ps2 is brighter, easier to rip and easier to pitch.
gen templates 3 Looks like psp is better, because of faster, greater and higher. But it will be useful for you to know that ps2 is brighter, easier to rip and easier to pitch.
full answer  Looks like psp is better, because of faster, greater and higher. But it will be useful for you to know that ps2 is brighter, easier to rip and easier to pitch.
Looks like psp is better, because of faster, greater and higher. But it will be useful for you to know that ps2 is brighter, easier to rip and easier to pitch.
305 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'advantages', 'of', 'ruby', 'vs.', 'python?']
['ruby']
[]
len(objects) 1
We try to use spacy
comp_elem vs.
tokens ['What', 'are', 'the', 'advantages', 'of', 'Ruby', 'vs.', 'Python', '?']
or simple split_sent 6
Ruby Python
aspects []
weights []
get url
params {'objectA': 'Ruby', 'objectB': 'Python', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier to read', 'smarter', 'longer'] ['easier', 'easier to do a better implementation in ruby may be more significant', 'easier to monkeypatch', 'cleaner']
2
winnder: python  other: ruby
acpect winner  faster, easier to read and smarter
acpect other  cleaner, easier and easier to monkeypatch
type  templates
winnder: python  other: ruby
acpect winner  faster, easier to read and smarter
acpect other  cleaner, easier and easier to monkeypatch
self predicate  better
answer begin:  The python is better than ruby. The reason are faster, easier to read and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to read, smarter, longer
faster, easier to read, smarter, longer
winner_aspects_string1 faster, easier to read and smarter
looser_aspects_string1 cleaner, easier and easier to monkeypatch
make response  After much thought, I realized that  python is better, because of faster, easier to read and smarter. But i should tell you that ruby is cleaner, easier and easier to monkeypatch.
gen templates 3 After much thought, I realized that  python is better, because of faster, easier to read and smarter. But i should tell you that ruby is cleaner, easier and easier to monkeypatch.
full answer  After much thought, I realized that  python is better, because of faster, easier to read and smarter. But i should tell you that ruby is cleaner, easier and easier to monkeypatch.
After much thought, I realized that  python is better, because of faster, easier to read and smarter. But i should tell you that ruby is cleaner, easier and easier to monkeypatch.
306 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-OBJ', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'ruby', 'or', 'python', 'better?', 'or', 'have', 'you', 'another', 'alternative,', 'and', 'of', 'course,', 'why?']
['ruby', 'python']
['better?']
len(objects) 2
aspects ['better?']
weights [1]
get url
params {'objectA': 'ruby', 'objectB': 'python', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'easier to read', 'smarter', 'longer'] ['easier', 'easier to do a better implementation in ruby may be more significant', 'easier to monkeypatch', 'cleaner']
2
winnder: python  other: ruby
acpect winner  faster, easier to read and smarter
acpect other  cleaner, easier and easier to monkeypatch
type  templates
winnder: python  other: ruby
acpect winner  faster, easier to read and smarter
acpect other  cleaner, easier and easier to monkeypatch
self predicate  better?
answer begin:  The python is better? than ruby. The reason are faster, easier to read and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to read, smarter, longer
faster, easier to read, smarter, longer
winner_aspects_string1 faster, easier to read and smarter
looser_aspects_string1 cleaner, easier and easier to monkeypatch
make response  After much thought, I realized that  python is better, because of faster, easier to read and smarter. But it will be useful for you to know that ruby is cleaner, easier and easier to monkeypatch.
gen templates 3 After much thought, I realized that  python is better, because of faster, easier to read and smarter. But it will be useful for you to know that ruby is cleaner, easier and easier to monkeypatch.
full answer  After much thought, I realized that  python is better, because of faster, easier to read and smarter. But it will be useful for you to know that ruby is cleaner, easier and easier to monkeypatch.
After much thought, I realized that  python is better, because of faster, easier to read and smarter. But it will be useful for you to know that ruby is cleaner, easier and easier to monkeypatch.
307 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'language', 'is', 'best', 'for', 'learning', 'object', 'oriented', 'design:', 'smalltalk,', 'java,', 'ruby,', 'python', 'or', 'anything', 'else?']
['smalltalk,']
['best']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'language', 'is', 'best', 'for', 'learning', 'Object', 'Oriented', 'Design', ':', 'smalltalk', ',', 'java', ',', 'ruby', ',', 'python', 'or', 'anything', 'else', '?']
or simple split_sent 17
python anything
aspects ['best']
weights [1]
get url
params {'objectA': 'python', 'objectB': 'anything', 'fs': 'true', 'aspect1': 'best', 'weight1': 1}
1
create fro json predicates ['best']
create fro json self.predicates best
aspects  ['easier to learn then java', 'array', 'ansi', 'standard'] ['better to do this in python', 'cursors', 'monty', 'reference']
2
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
type  templates
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
self predicate  best
answer begin:  The python is best than anything. The reason are easier to learn then java. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn then java, array, ansi, standard
easier to learn then java, array, ansi, standard
winner_aspects_string1  and easier to learn then java
looser_aspects_string1  and better to do this in python
make response  I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
gen templates 3 I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
full answer  I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
308 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'I-PREDFULL', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'better', 'language', 'to', 'learn:', 'python', 'or', 'ruby?', '(&', 'why', 'is', 'that', 'the', 'case?)?']
['ruby?']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'the', 'better', 'language', 'to', 'learn', ':', 'python', 'or', 'ruby', '?', '(', '&', 'why', 'is', 'that', 'the', 'case', '?', ')', '?']
or simple split_sent 9
python ruby
aspects ['better']
weights [1]
get url
params {'objectA': 'python', 'objectB': 'ruby', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'easier to do a better implementation in ruby may be more significant', 'easier to grok', 'wayyyy'] ['faster', 'easier to read', 'longer', 'greater']
2
winnder: ruby  other: python
acpect winner  easier, easier to grok and easier to do a better implementation in ruby may be more significant
acpect other  faster, easier to read and longer
type  templates
winnder: ruby  other: python
acpect winner  easier, easier to grok and easier to do a better implementation in ruby may be more significant
acpect other  faster, easier to read and longer
self predicate  better
answer begin:  The ruby is better than python. The reason are easier, easier to grok and easier to do a better implementation in ruby may be more significant. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, easier to do a better implementation in ruby may be more significant, easier to grok, wayyyy
easier, easier to do a better implementation in ruby may be more significant, easier to grok, wayyyy
winner_aspects_string1 easier, easier to grok and easier to do a better implementation in ruby may be more significant
looser_aspects_string1 faster, easier to read and longer
make response  I would prefer to use ruby because of easier, easier to grok and easier to do a better implementation in ruby may be more significant. But it will be useful for you to know that python is faster, easier to read and longer.
gen templates 3 I would prefer to use ruby because of easier, easier to grok and easier to do a better implementation in ruby may be more significant. But it will be useful for you to know that python is faster, easier to read and longer.
full answer  I would prefer to use ruby because of easier, easier to grok and easier to do a better implementation in ruby may be more significant. But it will be useful for you to know that python is faster, easier to read and longer.
I would prefer to use ruby because of easier, easier to grok and easier to do a better implementation in ruby may be more significant. But it will be useful for you to know that python is faster, easier to read and longer.
309 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['python', 'or', 'ruby?', 'which', 'one', 'should', 'i', 'learn?', 'which', 'is', 'better?']
['ruby?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['python', 'or', 'ruby', '?', 'which', 'one', 'should', 'I', 'learn', '?', 'which', 'is', 'better', '?']
or simple split_sent 1
python ruby
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'python', 'objectB': 'ruby', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'easier to read', 'longer', 'greater'] ['easier', 'easier to grok', 'easier to do a better implementation in ruby may be more significant', 'wayyyy']
2
winnder: python  other: ruby
acpect winner  faster, easier to read and longer
acpect other  easier, easier to do a better implementation in ruby may be more significant and easier to grok
type  templates
winnder: python  other: ruby
acpect winner  faster, easier to read and longer
acpect other  easier, easier to do a better implementation in ruby may be more significant and easier to grok
self predicate  b
answer begin:  The python is b than ruby. The reason are faster, easier to read and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to read, longer, greater
faster, easier to read, longer, greater
winner_aspects_string1 faster, easier to read and longer
looser_aspects_string1 easier, easier to do a better implementation in ruby may be more significant and easier to grok
make response  Looks like python is better, because of faster, easier to read and longer. Ruby is easier, easier to do a better implementation in ruby may be more significant and easier to grok.
gen templates 3 Looks like python is better, because of faster, easier to read and longer. Ruby is easier, easier to do a better implementation in ruby may be more significant and easier to grok.
full answer  Looks like python is better, because of faster, easier to read and longer. Ruby is easier, easier to do a better implementation in ruby may be more significant and easier to grok.
Looks like python is better, because of faster, easier to read and longer. Ruby is easier, easier to do a better implementation in ruby may be more significant and easier to grok.
310 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['you', 'choose.', 'which', 'is', 'better:', 'coca-cola', 'or', 'pepsi?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['You', 'choose', '.', ' ', 'Which', 'is', 'better', ':', 'Coca', '-', 'Cola', 'or', 'Pepsi', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Coca-Cola', 'objectB': 'Pepsi', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['brand', 'richer', 'awareness', 'affinity'] ['germany', 'greater', 'logo', 'carbonation']
2
winnder: coca-cola  other: pepsi
acpect winner  richer
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  richer
acpect other  greater
self predicate  b
answer begin:  The coca-cola is b than pepsi. The reason are richer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, richer, awareness, affinity
brand, richer, awareness, affinity
winner_aspects_string1  and richer
looser_aspects_string1  and greater
make response  It's simple! Coca-cola is better, because of  and richer. But i should tell you that pepsi is  and greater.
gen templates 3 It's simple! Coca-cola is better, because of  and richer. But i should tell you that pepsi is  and greater.
full answer  It's simple! Coca-cola is better, because of  and richer. But i should tell you that pepsi is  and greater.
It's simple! Coca-cola is better, because of  and richer. But i should tell you that pepsi is  and greater.
311 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['pepsi', 'or', 'coca-cola', 'and', 'why,', 'make', 'a', 'good', 'reason', 'why????']
['pepsi']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Pepsi', 'or', 'Coca', '-', 'Cola', 'and', 'why', ',', 'make', 'a', 'good', 'reason', 'why', '?', '?', '?', '?']
aspects []
weights []
get url
params {'objectA': 'Pepsi', 'objectB': 'Coca-Cola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['brand', 'faster', 'stronger', 'cooler'] ['germany', 'greater', 'logo', 'cocacola']
2
winnder: coca-cola  other: pepsi
acpect winner  stronger and faster
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  stronger and faster
acpect other  greater
self predicate  better
answer begin:  The coca-cola is better than pepsi. The reason are stronger and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, faster, stronger, cooler
brand, faster, stronger, cooler
winner_aspects_string1 stronger and faster
looser_aspects_string1  and greater
make response  I came to the conclusion that coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
gen templates 3 I came to the conclusion that coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
full answer  I came to the conclusion that coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
I came to the conclusion that coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
312 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["don't", 'coca-cola', 'and', 'pepsi', 'taste', 'the', 'same?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
313 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['compare', 'coca-cola', 'and', 'pepsi-cola,which', 'company', 'have', 'better', 'prospect', 'in', 'india?']
['coca-cola']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'coca-cola', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to purchase cocacola in some parts of africa', 'weaker', 'entry', 'cost'] ['greater', 'higher', 'faster', 'sugar']
winnder: and  other: coca-cola
acpect winner  weaker and easier to purchase cocacola in some parts of africa
acpect other  greater, higher and faster
type  templates
coca-cola has undeniable advantages. They are weaker and easier to purchase cocacola in some parts of africa.
314 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'company', 'is', 'bigger', 'coca-cola', 'or', 'pepsi?']
['coca-cola']
['bigger']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'company', 'is', 'bigger', 'Coca', '-', 'Cola', 'or', 'Pepsi', '?']
aspects ['bigger']
weights [1]
get url
params {'objectA': 'Coca-Cola', 'objectB': 'Pepsi', 'fs': 'true', 'aspect1': 'bigger', 'weight1': 1}
1
create fro json predicates ['bigger']
create fro json self.predicates bigger
aspects  ['brand', 'richer', 'awareness', 'affinity'] ['germany', 'greater', 'logo', 'cocacola']
2
winnder: coca-cola  other: pepsi
acpect winner  richer
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  richer
acpect other  greater
self predicate  bigger
answer begin:  The coca-cola is bigger than pepsi. The reason are richer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, richer, awareness, affinity
brand, richer, awareness, affinity
winner_aspects_string1  and richer
looser_aspects_string1  and greater
make response  After much thought, I realized that  coca-cola is better, because of  and richer. Pepsi is  and greater.
gen templates 3 After much thought, I realized that  coca-cola is better, because of  and richer. Pepsi is  and greater.
full answer  After much thought, I realized that  coca-cola is better, because of  and richer. Pepsi is  and greater.
After much thought, I realized that  coca-cola is better, because of  and richer. Pepsi is  and greater.
315 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one:', 'coca-cola', 'or', 'pepsi?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'one', ':', 'Coca', '-', 'Cola', 'or', 'Pepsi', '?']
aspects []
weights []
get url
params {'objectA': 'Coca-Cola', 'objectB': 'Pepsi', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['brand', 'richer', 'awareness', 'affinity'] ['germany', 'greater', 'logo', 'cocacola']
2
winnder: coca-cola  other: pepsi
acpect winner  richer
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  richer
acpect other  greater
self predicate  better
answer begin:  The coca-cola is better than pepsi. The reason are richer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, richer, awareness, affinity
brand, richer, awareness, affinity
winner_aspects_string1  and richer
looser_aspects_string1  and greater
make response  Looks like coca-cola is better, because of  and richer. Pepsi is  and greater.
gen templates 3 Looks like coca-cola is better, because of  and richer. Pepsi is  and greater.
full answer  Looks like coca-cola is better, because of  and richer. Pepsi is  and greater.
Looks like coca-cola is better, because of  and richer. Pepsi is  and greater.
316 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['hmm...', 'this', 'is', 'a', 'very', 'serious', 'question...', 'which', '(in', 'your', 'opinion)', 'is', 'better?', 'coca-cola,', 'pepsi,', 'or', 'dr.', 'pepper?']
[]
['better?']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['hmm', '...', 'this', 'is', 'a', 'VERY', 'serious', 'question', '...', 'which', '(', 'in', 'your', 'opinion', ')', 'is', 'better', '?', 'coca', '-', 'cola', ',', 'pepsi', ',', 'or', 'dr', '.', 'pepper', '?']
or simple split_sent 24
, dr
We can't recognize objects for comparision
317 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'u', 'think', 'is', 'better', 'pepsi', 'or', 'coca-cola?']
['pepsi']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'do', 'u', 'think', 'is', 'better', 'pepsi', 'or', 'coca', '-', 'cola', '?']
or simple split_sent 7
pepsi coca
aspects ['better']
weights [1]
get url
params {'objectA': 'pepsi', 'objectB': 'coca', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['stronger', 'better to pay more for a coke or a pepsi', 'more for a coke or a pepsi', 'faster'] ['germany', 'cocacola', 'logo', 'greater']
2
winnder: coca  other: pepsi
acpect winner  faster, better to pay more for a coke or a pepsi and stronger
acpect other  greater
type  templates
winnder: coca  other: pepsi
acpect winner  faster, better to pay more for a coke or a pepsi and stronger
acpect other  greater
self predicate  better
answer begin:  The coca is better than pepsi. The reason are faster, better to pay more for a coke or a pepsi and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
stronger, better to pay more for a coke or a pepsi, more for a coke or a pepsi, faster
stronger, better to pay more for a coke or a pepsi, more for a coke or a pepsi, faster
winner_aspects_string1 faster, better to pay more for a coke or a pepsi and stronger
looser_aspects_string1  and greater
make response  Looks like coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. But it will be useful for you to know that pepsi is  and greater.
gen templates 3 Looks like coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. But it will be useful for you to know that pepsi is  and greater.
full answer  Looks like coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. But it will be useful for you to know that pepsi is  and greater.
Looks like coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. But it will be useful for you to know that pepsi is  and greater.
318 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better:', 'coca-cola', 'or', 'pepsi?']
['coca-cola']
['better:']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', ':', 'Coca', '-', 'Cola', 'or', 'Pepsi', '?']
aspects ['better:']
weights [1]
get url
params {'objectA': 'Coca-Cola', 'objectB': 'Pepsi', 'fs': 'true', 'aspect1': 'better:', 'weight1': 1}
1
create fro json predicates ['better:']
create fro json self.predicates better:
aspects  ['brand', 'better to pay more for a coke or a pepsi', 'more for a coke or a pepsi', 'richer'] ['germany', 'logo', 'greater', 'cocacola']
2
winnder: coca-cola  other: pepsi
acpect winner  better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
acpect other  greater
self predicate  better:
answer begin:  The coca-cola is better: than pepsi. The reason are better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, better to pay more for a coke or a pepsi, more for a coke or a pepsi, richer
brand, better to pay more for a coke or a pepsi, more for a coke or a pepsi, richer
winner_aspects_string1 better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
looser_aspects_string1  and greater
make response  Looks like coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. But it will be useful for you to know that pepsi is  and greater.
gen templates 3 Looks like coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. But it will be useful for you to know that pepsi is  and greater.
full answer  Looks like coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. But it will be useful for you to know that pepsi is  and greater.
Looks like coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. But it will be useful for you to know that pepsi is  and greater.
319 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'best,', 'pepsi', 'or', 'coca-cola?']
['pepsi']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'the', 'best', ',', 'Pepsi', 'or', 'Coca', '-', 'Cola', '?']
aspects []
weights []
get url
params {'objectA': 'Pepsi', 'objectB': 'Coca-Cola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['brand', 'faster', 'stronger', 'cooler'] ['germany', 'greater', 'logo', 'cocacola']
2
winnder: coca-cola  other: pepsi
acpect winner  stronger and faster
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  stronger and faster
acpect other  greater
self predicate  better
answer begin:  The coca-cola is better than pepsi. The reason are stronger and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, faster, stronger, cooler
brand, faster, stronger, cooler
winner_aspects_string1 stronger and faster
looser_aspects_string1  and greater
make response  It's simple! Coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
gen templates 3 It's simple! Coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
full answer  It's simple! Coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
It's simple! Coca-cola is better, because of stronger and faster. But you should know that pepsi is  and greater.
320 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better,', 'coca-cola', 'or', 'pepsi?']
['coca-cola']
['better,']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', ',', 'Coca', '-', 'Cola', 'or', 'Pepsi', '?']
aspects ['better,']
weights [1]
get url
params {'objectA': 'Coca-Cola', 'objectB': 'Pepsi', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['brand', 'better to pay more for a coke or a pepsi', 'more for a coke or a pepsi', 'richer'] ['germany', 'logo', 'greater', 'cocacola']
2
winnder: coca-cola  other: pepsi
acpect winner  better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
acpect other  greater
self predicate  better,
answer begin:  The coca-cola is better, than pepsi. The reason are better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, better to pay more for a coke or a pepsi, more for a coke or a pepsi, richer
brand, better to pay more for a coke or a pepsi, more for a coke or a pepsi, richer
winner_aspects_string1 better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
looser_aspects_string1  and greater
make response  I came to the conclusion that coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
gen templates 3 I came to the conclusion that coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
full answer  I came to the conclusion that coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
I came to the conclusion that coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
321 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'type', 'of', 'soda', 'do', 'you', 'like', 'more?', 'coca-cola', 'or', 'pepsi?']
['soda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'type', 'of', 'soda', 'do', 'you', 'like', 'more', '?', 'Coca', '-', 'Cola', 'Or', 'Pepsi', '?']
len(obj1) > 0 and len(obj2) == 0
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'soda', 'objectB': 'and', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
create fro json predicates more
create fro json self.predicates m
aspects  ['cheaper', 'greater', 'safer', 'smoother'] ['lighter', 'gentler']
winnder: and  other: soda
acpect winner  safer, greater and cheaper
acpect other  lighter and gentler
type  templates
soda has undeniable advantages. They are safer, greater and cheaper.
322 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best??', 'coca-cola', 'or', 'pepsi?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'the', 'best', '?', '?', 'Coca', '-', 'cola', 'or', 'Pepsi', '?']
or simple split_sent 9
cola Pepsi
aspects []
weights []
get url
params {'objectA': 'cola', 'objectB': 'Pepsi', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['awareness', 'affinity', 'richer', 'better to pay more for a coke or a pepsi'] ['cocacola', 'greater', 'logo', 'loyalty']
2
winnder: cola  other: pepsi
acpect winner  richer and better to pay more for a coke or a pepsi
acpect other  greater
type  templates
winnder: cola  other: pepsi
acpect winner  richer and better to pay more for a coke or a pepsi
acpect other  greater
self predicate  better
answer begin:  The cola is better than pepsi. The reason are richer and better to pay more for a coke or a pepsi. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
awareness, affinity, richer, better to pay more for a coke or a pepsi
awareness, affinity, richer, better to pay more for a coke or a pepsi
winner_aspects_string1 richer and better to pay more for a coke or a pepsi
looser_aspects_string1  and greater
make response  I came to the conclusion that cola is better, because of richer and better to pay more for a coke or a pepsi. But you should know that pepsi is  and greater.
gen templates 3 I came to the conclusion that cola is better, because of richer and better to pay more for a coke or a pepsi. But you should know that pepsi is  and greater.
full answer  I came to the conclusion that cola is better, because of richer and better to pay more for a coke or a pepsi. But you should know that pepsi is  and greater.
I came to the conclusion that cola is better, because of richer and better to pay more for a coke or a pepsi. But you should know that pepsi is  and greater.
323 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'u', 'like', 'better', 'pepsi', 'or', 'coca-cola?']
['pepsi']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'do', 'u', 'like', 'better', 'pepsi', 'or', 'coca', '-', 'cola', '?']
or simple split_sent 6
pepsi coca
aspects ['better']
weights [1]
get url
params {'objectA': 'pepsi', 'objectB': 'coca', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['stronger', 'better to pay more for a coke or a pepsi', 'more for a coke or a pepsi', 'faster'] ['germany', 'cocacola', 'logo', 'greater']
2
winnder: coca  other: pepsi
acpect winner  faster, better to pay more for a coke or a pepsi and stronger
acpect other  greater
type  templates
winnder: coca  other: pepsi
acpect winner  faster, better to pay more for a coke or a pepsi and stronger
acpect other  greater
self predicate  better
answer begin:  The coca is better than pepsi. The reason are faster, better to pay more for a coke or a pepsi and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
stronger, better to pay more for a coke or a pepsi, more for a coke or a pepsi, faster
stronger, better to pay more for a coke or a pepsi, more for a coke or a pepsi, faster
winner_aspects_string1 faster, better to pay more for a coke or a pepsi and stronger
looser_aspects_string1  and greater
make response  After much thought, I realized that  coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. Pepsi is  and greater.
gen templates 3 After much thought, I realized that  coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. Pepsi is  and greater.
full answer  After much thought, I realized that  coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. Pepsi is  and greater.
After much thought, I realized that  coca is better, because of faster, better to pay more for a coke or a pepsi and stronger. Pepsi is  and greater.
324 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'have', 'a', 'can', 'of', 'pepsi', 'and', 'a', 'can', 'of', 'coca-cola.', 'which', 'should', 'i', 'drink', '&', 'why', '?']
['pepsi']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'pepsi', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'quicker', 'better for you'] ['lighter', 'cleaner', 'cooler', 'easier for customers to carry']
winnder: and  other: pepsi
acpect winner  faster, better for you and quicker
acpect other  lighter, cleaner and easier for customers to carry
type  templates
pepsi has undeniable advantages. They are faster, better for you and quicker.
325 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'pepsi', 'or', 'coca-cola??']
['pepsi']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'Pepsi', 'or', 'coca', '-', 'cola', '?', '?']
or simple split_sent 4
Pepsi coca
aspects ['better']
weights [1]
get url
params {'objectA': 'Pepsi', 'objectB': 'coca', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['stronger', 'better to pay more for a coke or a pepsi', 'more for a coke or a pepsi', 'faster'] ['germany', 'cocacola', 'logo', 'greater']
2
winnder: coca  other: pepsi
acpect winner  faster, better to pay more for a coke or a pepsi and stronger
acpect other  greater
type  templates
winnder: coca  other: pepsi
acpect winner  faster, better to pay more for a coke or a pepsi and stronger
acpect other  greater
self predicate  better
answer begin:  The coca is better than pepsi. The reason are faster, better to pay more for a coke or a pepsi and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
stronger, better to pay more for a coke or a pepsi, more for a coke or a pepsi, faster
stronger, better to pay more for a coke or a pepsi, more for a coke or a pepsi, faster
winner_aspects_string1 faster, better to pay more for a coke or a pepsi and stronger
looser_aspects_string1  and greater
make response  I would prefer to use coca because of faster, better to pay more for a coke or a pepsi and stronger. But you should know that pepsi is  and greater.
gen templates 3 I would prefer to use coca because of faster, better to pay more for a coke or a pepsi and stronger. But you should know that pepsi is  and greater.
full answer  I would prefer to use coca because of faster, better to pay more for a coke or a pepsi and stronger. But you should know that pepsi is  and greater.
I would prefer to use coca because of faster, better to pay more for a coke or a pepsi and stronger. But you should know that pepsi is  and greater.
326 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'coca-cola', 'and', 'pepsi-cola?']
['coca-cola']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'coca-cola', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to purchase cocacola in some parts of africa', 'weaker', 'entry', 'cost'] ['greater', 'higher', 'faster', 'sugar']
winnder: and  other: coca-cola
acpect winner  weaker and easier to purchase cocacola in some parts of africa
acpect other  greater, higher and faster
type  templates
coca-cola has undeniable advantages. They are weaker and easier to purchase cocacola in some parts of africa.
327 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better,pepsi', 'or', 'coca-cola?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', ',', 'Pepsi', 'or', 'coca', '-', 'cola', '?']
or simple split_sent 5
Pepsi coca
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Pepsi', 'objectB': 'coca', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'stronger', 'awareness', 'affinity'] ['germany', 'cocacola', 'greater', 'logo']
2
winnder: coca  other: pepsi
acpect winner  faster and stronger
acpect other  greater
type  templates
winnder: coca  other: pepsi
acpect winner  faster and stronger
acpect other  greater
self predicate  b
answer begin:  The coca is b than pepsi. The reason are faster and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, stronger, awareness, affinity
faster, stronger, awareness, affinity
winner_aspects_string1 faster and stronger
looser_aspects_string1  and greater
make response  I came to the conclusion that coca is better, because of faster and stronger. But you should know that pepsi is  and greater.
gen templates 3 I came to the conclusion that coca is better, because of faster and stronger. But you should know that pepsi is  and greater.
full answer  I came to the conclusion that coca is better, because of faster and stronger. But you should know that pepsi is  and greater.
I came to the conclusion that coca is better, because of faster and stronger. But you should know that pepsi is  and greater.
328 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'in', 'ingredients', 'between', 'coca-cola', 'and', 'pepsi?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
329 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'coca-cola', 'or', 'pepsi?', 'and', 'why?']
['coca-cola', 'pepsi?']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'coca-cola', 'objectB': 'pepsi', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['brand', 'better to pay more for a coke or a pepsi', 'more for a coke or a pepsi', 'richer'] ['germany', 'logo', 'greater', 'cocacola']
2
winnder: coca-cola  other: pepsi
acpect winner  better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
acpect other  greater
type  templates
winnder: coca-cola  other: pepsi
acpect winner  better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
acpect other  greater
self predicate  better
answer begin:  The coca-cola is better than pepsi. The reason are better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
brand, better to pay more for a coke or a pepsi, more for a coke or a pepsi, richer
brand, better to pay more for a coke or a pepsi, more for a coke or a pepsi, richer
winner_aspects_string1 better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer
looser_aspects_string1  and greater
make response  It's simple! Coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
gen templates 3 It's simple! Coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
full answer  It's simple! Coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
It's simple! Coca-cola is better, because of better to pay more for a coke or a pepsi, more for a coke or a pepsi and richer. Pepsi is  and greater.
330 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'more', 'objective,', 'cnn', 'or', 'fox', 'news?']
['cnn', 'fox']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'cnn', 'objectB': 'fox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'news', 'greater', 'leftists'] ['better to even bring that shit up they are no better', 'network', 'msnbc', 'fake']
2
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, news, greater, leftists
faster, news, greater, leftists
winner_aspects_string1 faster and greater
looser_aspects_string1  and better to even bring that shit up they are no better
make response  After much thought, I realized that  fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
gen templates 3 After much thought, I realized that  fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
full answer  After much thought, I realized that  fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
After much thought, I realized that  fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
331 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['fox', 'news', 'or', 'cnn', 'news??', 'which', 'is', 'more', 'acurate?']
['fox', 'cnn']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'fox', 'objectB': 'cnn', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to crack now', 'news'] ['friendlier for a gop interview', 'friendlier', 'greater', 'better to even bring that shit up they are no better']
2
winnder: fox  other: cnn
acpect winner  easier to crack now, easier and faster
acpect other  greater, friendlier for a gop interview and better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  easier to crack now, easier and faster
acpect other  greater, friendlier for a gop interview and better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are easier to crack now, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to crack now, news
easier, faster, easier to crack now, news
winner_aspects_string1 easier to crack now, easier and faster
looser_aspects_string1 greater, friendlier for a gop interview and better to even bring that shit up they are no better
make response  I came to the conclusion that fox is better, because of easier to crack now, easier and faster. Cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
gen templates 3 I came to the conclusion that fox is better, because of easier to crack now, easier and faster. Cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
full answer  I came to the conclusion that fox is better, because of easier to crack now, easier and faster. Cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
I came to the conclusion that fox is better, because of easier to crack now, easier and faster. Cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
332 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'more', 'right-wing?', 'cnn,', 'fox', 'or', 'kkk?']
['cnn,', 'fox']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'cnn', 'objectB': 'fox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'news', 'greater', 'leftists'] ['better to even bring that shit up they are no better', 'network', 'msnbc', 'fake']
2
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, news, greater, leftists
faster, news, greater, leftists
winner_aspects_string1 faster and greater
looser_aspects_string1  and better to even bring that shit up they are no better
make response  It's simple! Fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
gen templates 3 It's simple! Fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
full answer  It's simple! Fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
It's simple! Fox is better, because of faster and greater. But it will be useful for you to know that cnn is  and better to even bring that shit up they are no better.
333 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'news', 'channel', 'you', 'watch', 'most?', 'cnn', 'or', 'fox', 'or', 'msnbc', 'or', 'local', 'news?']
['cnn', 'fox']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'cnn', 'objectB': 'fox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'news', 'greater', 'leftists'] ['better to even bring that shit up they are no better', 'network', 'msnbc', 'fake']
2
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, news, greater, leftists
faster, news, greater, leftists
winner_aspects_string1 faster and greater
looser_aspects_string1  and better to even bring that shit up they are no better
make response  After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
gen templates 3 After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
full answer  After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
334 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['who', 'do', 'you', 'think', 'is', 'the', 'best', 'news', 'provider,', 'abc,', 'nbc,', 'cnn,', 'cbs,', 'or', 'the', 'fox', 'news', 'channel?']
['fox']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['who', 'do', 'you', 'think', 'is', 'the', 'best', 'news', 'provider', ',', 'ABC', ',', 'NBC', ',', 'CNN', ',', 'CBS', ',', 'or', 'The', 'Fox', 'News', 'Channel', '?']
aspects []
weights []
get url
params {'objectA': 'fox', 'objectB': 'The Fox News Channel', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['earlier'] []
2
winnder: fox  other: the fox news channel
acpect winner  earlier
acpect other  
type  templates
winnder: fox  other: the fox news channel
acpect winner  earlier
acpect other  
self predicate  better
answer begin:  The fox is better than the fox news channel. The reason are earlier. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like fox is better than the fox news channel because it is earlier.
full answer  It seems like fox is better than the fox news channel because it is earlier.
It seems like fox is better than the fox news channel because it is earlier.
335 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'between', 'fox', 'and', 'cnn?', 'what', 'news', 'shows', 'do', 'you', 'recommend?']
['fox', 'cnn?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'fox', 'objectB': 'cnn', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to crack now', 'news'] ['friendlier for a gop interview', 'friendlier', 'greater', 'better to even bring that shit up they are no better']
2
winnder: fox  other: cnn
acpect winner  easier to crack now, easier and faster
acpect other  greater, friendlier for a gop interview and better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  easier to crack now, easier and faster
acpect other  greater, friendlier for a gop interview and better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are easier to crack now, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to crack now, news
easier, faster, easier to crack now, news
winner_aspects_string1 easier to crack now, easier and faster
looser_aspects_string1 greater, friendlier for a gop interview and better to even bring that shit up they are no better
make response  I would prefer to use fox because of easier to crack now, easier and faster. But it will be useful for you to know that cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
gen templates 3 I would prefer to use fox because of easier to crack now, easier and faster. But it will be useful for you to know that cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
full answer  I would prefer to use fox because of easier to crack now, easier and faster. But it will be useful for you to know that cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
I would prefer to use fox because of easier to crack now, easier and faster. But it will be useful for you to know that cnn is greater, friendlier for a gop interview and better to even bring that shit up they are no better.
336 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'watch', 'most', 'often', 'and', 'why:', 'cbs,', 'nbc,', 'abc,', 'fox,', 'cnn', 'or', 'msn?']
['cnn']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'do', 'you', 'watch', 'most', 'often', 'and', 'why', ':', 'CBS', ',', 'NBC', ',', 'ABC', ',', 'FOX', ',', 'CNN', 'or', 'MSN', '?']
aspects []
weights []
get url
params {'objectA': 'CNN', 'objectB': 'MSN', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: cnn  other: msn
acpect winner  
acpect other  
type  templates
winnder: cnn  other: msn
acpect winner  
acpect other  
self predicate  better
answer begin:  The cnn is better than msn. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer cnn than msn.
full answer  I would prefer cnn than msn.
I would prefer cnn than msn.
337 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'channel', 'do', 'you', 'think', 'is', 'better,', 'cnn', 'or', 'fox', 'news?']
['cnn', 'fox']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'cnn', 'objectB': 'fox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'news', 'greater', 'leftists'] ['better to even bring that shit up they are no better', 'network', 'msnbc', 'fake']
2
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, news, greater, leftists
faster, news, greater, leftists
winner_aspects_string1 faster and greater
looser_aspects_string1  and better to even bring that shit up they are no better
make response  After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
gen templates 3 After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
full answer  After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
After much thought, I realized that  fox is better, because of faster and greater. Cnn is  and better to even bring that shit up they are no better.
338 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'cable', 'news', 'source', 'do', 'you', 'prefer?', 'cnn,', 'fox', 'news,', 'or', 'msnbc.', 'are', 'you', 'a', 'democrat', 'or', 'republican?']
['cnn,', 'fox']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'cnn', 'objectB': 'fox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'news', 'greater', 'leftists'] ['better to even bring that shit up they are no better', 'network', 'msnbc', 'fake']
2
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, news, greater, leftists
faster, news, greater, leftists
winner_aspects_string1 faster and greater
looser_aspects_string1  and better to even bring that shit up they are no better
make response  Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
gen templates 3 Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
full answer  Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
339 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'news', 'channel', 'do', 'you', 'like', 'best', ',cnn,fox', 'news', 'or', 'others', '&', 'what', 'is', 'it', 'you', 'like', 'or', 'dislike', 'about', 'them?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'news', 'channel', 'do', 'you', 'like', 'best', ',', 'CNN', ',', 'FOX', 'News', 'or', 'others', '&', 'what', 'is', 'it', 'you', 'like', 'or', 'dislike', 'about', 'them', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'FOX News', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'faster', 'smarter', 'greater'] ['fox', 'pile', 'crap', 'buddhism']
winnder: and  other: fox news
acpect winner  faster, smarter and quicker
acpect other  
type  templates
fox news has undeniable advantages. They are faster, smarter and quicker.
340 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'more', 'successful', 'in', 'brainwashing?cbs,cnn', 'or', 'fox?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'one', 'is', 'more', 'successful', 'in', 'brainwashing?CBS', ',', 'CNN', 'or', 'FOX', '?']
or simple split_sent 9
CNN FOX
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'CNN', 'objectB': 'FOX', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['faster', 'news', 'greater', 'leftists'] ['better to even bring that shit up they are no better', 'network', 'msnbc', 'fake']
2
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
self predicate  m
answer begin:  The fox is m than cnn. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, news, greater, leftists
faster, news, greater, leftists
winner_aspects_string1 faster and greater
looser_aspects_string1  and better to even bring that shit up they are no better
make response  Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
gen templates 3 Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
full answer  Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
Looks like fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
341 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ["who's", 'better:', 'cnn', 'or', 'fox', 'news?']
['cnn', 'fox']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'cnn', 'objectB': 'fox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'news', 'greater', 'leftists'] ['better to even bring that shit up they are no better', 'network', 'msnbc', 'fake']
2
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
type  templates
winnder: fox  other: cnn
acpect winner  faster and greater
acpect other  better to even bring that shit up they are no better
self predicate  better
answer begin:  The fox is better than cnn. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, news, greater, leftists
faster, news, greater, leftists
winner_aspects_string1 faster and greater
looser_aspects_string1  and better to even bring that shit up they are no better
make response  I came to the conclusion that fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
gen templates 3 I came to the conclusion that fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
full answer  I came to the conclusion that fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
I came to the conclusion that fox is better, because of faster and greater. But i should tell you that cnn is  and better to even bring that shit up they are no better.
342 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['worst', 'cable', 'news,', 'cnn,', 'cnbc,', 'msnbc,', 'cnn', 'headline,', 'fox?']
['cnn,', 'cnn']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'cnn', 'objectB': 'cnn', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: cnn  other: cnn
acpect winner  
acpect other  
type  templates
winnder: cnn  other: cnn
acpect winner  
acpect other  
self predicate  better
answer begin:  The cnn is better than cnn. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer cnn than cnn.
full answer  I would prefer cnn than cnn.
I would prefer cnn than cnn.
343 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'laptop', 'do', 'you', 'recommend?', 'dell?', 'sony?', 'ibm?', 'other?']
['dell?', 'ibm?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  After much thought, I realized that  ibm is better, because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
gen templates 3 After much thought, I realized that  ibm is better, because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
full answer  After much thought, I realized that  ibm is better, because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
After much thought, I realized that  ibm is better, because of greater, older and bigger. Dell is lighter, easier and easier to become an ibm.
344 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'makes', 'a', 'good', 'dvd', 'burner', 'and', 'lcd', 'monitor??', 'dell??', 'sony??', 'hp??', 'nec??', 'samsung??', 'or', 'someone', 'else?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Who', 'makes', 'a', 'good', 'DVD', 'Burner', 'and', 'LCD', 'Monitor', '?', '?', 'Dell', '?', '?', 'Sony', '?', '?', 'HP', '?', '?', 'NEC', '?', '?', 'Samsung', '?', '?', 'or', 'someone', 'else', '?']
We can't recognize objects for comparision
345 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'laptop', 'should', 'i', 'buy,', 'dell,', 'toshiba', 'or', 'sony?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'laptop', 'should', ' ', 'I', 'buy', ',', 'Dell', ',', 'Toshiba', 'or', 'Sony', '?']
aspects []
weights []
get url
params {'objectA': 'Toshiba', 'objectB': 'Sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'hitachi', 'sharp', 'national'] ['faster', 'glossier', 'lacks', 'hd']
2
winnder: sony  other: toshiba
acpect winner  lighter
acpect other  glossier and faster
type  templates
winnder: sony  other: toshiba
acpect winner  lighter
acpect other  glossier and faster
self predicate  better
answer begin:  The sony is better than toshiba. The reason are lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, hitachi, sharp, national
lighter, hitachi, sharp, national
winner_aspects_string1  and lighter
looser_aspects_string1 glossier and faster
make response  Looks like sony is better, because of  and lighter. But i should tell you that toshiba is glossier and faster.
gen templates 3 Looks like sony is better, because of  and lighter. But i should tell you that toshiba is glossier and faster.
full answer  Looks like sony is better, because of  and lighter. But i should tell you that toshiba is glossier and faster.
Looks like sony is better, because of  and lighter. But i should tell you that toshiba is glossier and faster.
346 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better', 'sony', 'laptop', 'or', 'dell', 'laptop', 'for', 'students?']
['sony', 'dell']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'dell', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'faster', 'cheaper', 'wider'] ['heavier', 'larger', 'bigger', 'thinner']
2
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
type  templates
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
self predicate  better
answer begin:  The dell is better than sony. The reason are faster, wider and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, faster, cheaper, wider
quicker, faster, cheaper, wider
winner_aspects_string1 faster, wider and quicker
looser_aspects_string1 heavier, larger and thinner
make response  I would prefer to use dell because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
gen templates 3 I would prefer to use dell because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
full answer  I would prefer to use dell because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
I would prefer to use dell because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
347 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'laptop', 'is', 'better-sony,dell', 'or', 'toshiba?']
['laptop']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'laptop', 'is', 'better', '-', 'sony', ',', 'dell', 'or', 'toshiba', '?']
or simple split_sent 8
dell toshiba
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'dell', 'objectB': 'toshiba', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'larger', 'heavier', 'bigger'] ['cheaper', 'smoother', 'weaker']
2
winnder: toshiba  other: dell
acpect winner  lighter, heavier and larger
acpect other  weaker and cheaper
type  templates
winnder: toshiba  other: dell
acpect winner  lighter, heavier and larger
acpect other  weaker and cheaper
self predicate  b
answer begin:  The toshiba is b than dell. The reason are lighter, heavier and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, larger, heavier, bigger
lighter, larger, heavier, bigger
winner_aspects_string1 lighter, heavier and larger
looser_aspects_string1 weaker and cheaper
make response  After much thought, I realized that  toshiba is better, because of lighter, heavier and larger. Dell is weaker and cheaper.
gen templates 3 After much thought, I realized that  toshiba is better, because of lighter, heavier and larger. Dell is weaker and cheaper.
full answer  After much thought, I realized that  toshiba is better, because of lighter, heavier and larger. Dell is weaker and cheaper.
After much thought, I realized that  toshiba is better, because of lighter, heavier and larger. Dell is weaker and cheaper.
348 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'to', 'you', 'all?', 'dell', 'laptop', 'or', 'a', 'sony', 'laptop?']
['dell', 'sony']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'dell', 'objectB': 'sony', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['lighter', 'heavier', 'larger', 'bigger'] ['easier to deal with', 'easier']
2
winnder: sony  other: dell
acpect winner  lighter, heavier and larger
acpect other  easier and easier to deal with
type  templates
winnder: sony  other: dell
acpect winner  lighter, heavier and larger
acpect other  easier and easier to deal with
self predicate  better
answer begin:  The sony is better than dell. The reason are lighter, heavier and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, heavier, larger, bigger
lighter, heavier, larger, bigger
winner_aspects_string1 lighter, heavier and larger
looser_aspects_string1 easier and easier to deal with
make response  Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
gen templates 3 Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
full answer  Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
349 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['witch', 'is', 'better', 'alienware,', 'sony,', 'dell', 'xps,', 'or', 'the', 'new', 'apple', 'computer??????']
['sony,', 'dell', 'apple']
['better']
len(objects) 3
aspects ['better']
weights [1]
get url
params {'objectA': 'sony', 'objectB': 'dell', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'faster', 'cheaper', 'wider'] ['heavier', 'larger', 'bigger', 'thinner']
2
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
type  templates
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
self predicate  better
answer begin:  The dell is better than sony. The reason are faster, wider and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, faster, cheaper, wider
quicker, faster, cheaper, wider
winner_aspects_string1 faster, wider and quicker
looser_aspects_string1 heavier, larger and thinner
make response  Looks like dell is better, because of faster, wider and quicker. But it will be useful for you to know that sony is heavier, larger and thinner.
gen templates 3 Looks like dell is better, because of faster, wider and quicker. But it will be useful for you to know that sony is heavier, larger and thinner.
full answer  Looks like dell is better, because of faster, wider and quicker. But it will be useful for you to know that sony is heavier, larger and thinner.
Looks like dell is better, because of faster, wider and quicker. But it will be useful for you to know that sony is heavier, larger and thinner.
350 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'dell', 'a', 'nice', 'laptop?', 'compared', 'to', 'sony', 'vaio', 'or', 'hp?']
['dell', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'heavier', 'larger', 'bigger'] ['easier to deal with', 'easier']
2
winnder: sony  other: dell
acpect winner  lighter, heavier and larger
acpect other  easier and easier to deal with
type  templates
winnder: sony  other: dell
acpect winner  lighter, heavier and larger
acpect other  easier and easier to deal with
self predicate  better
answer begin:  The sony is better than dell. The reason are lighter, heavier and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, heavier, larger, bigger
lighter, heavier, larger, bigger
winner_aspects_string1 lighter, heavier and larger
looser_aspects_string1 easier and easier to deal with
make response  Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
gen templates 3 Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
full answer  Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
Looks like sony is better, because of lighter, heavier and larger. But it will be useful for you to know that dell is easier and easier to deal with.
351 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'better', 'choice', 'of', 'laptop?', 'dell', 'or', 'apple', 'or', 'sony?']
['dell', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
gen templates 3 I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
full answer  I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
I would prefer to use apple because of lighter, easier and faster. Dell is easier to become an ibm and cheaper.
352 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["i'm", 'buying', 'a', 'laptop', '-', 'sony', 'viao,', 'toshiba', 'or', 'a', 'dell?']
['sony']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I', "'m", 'buying', 'a', 'laptop', '-', 'Sony', 'Viao', ',', 'Toshiba', 'or', 'a', 'Dell', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'Toshiba', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'lighter', 'faster', 'easier to use'] ['cheaper', 'heavier', 'slimmer', 'greater']
winnder: and  other: toshiba
acpect winner  lighter, faster and easier to use
acpect other  heavier, greater and cheaper
type  templates
toshiba has undeniable advantages. They are lighter, faster and easier to use.
353 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'notebook', 'brand', 'and', 'why?', 'dell,', 'sony', 'vaio,', 'apple,', 'toshiba,', 'ibm,', '...', '?', '(in', 'general', 'comparison)']
['dell,', 'ibm,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  I would prefer to use ibm because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
gen templates 3 I would prefer to use ibm because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
full answer  I would prefer to use ibm because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
I would prefer to use ibm because of greater, older and bigger. But i should tell you that dell is lighter, easier and easier to become an ibm.
354 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'for', 'computer', 'desktop', 'hp,', 'sony', 'or', 'dell?']
['sony']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'for', 'computer', 'desktop', 'hp', ',', 'sony', 'or', 'dell', '?']
or simple split_sent 9
sony dell
aspects ['better']
weights [1]
get url
params {'objectA': 'sony', 'objectB': 'dell', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'faster', 'cheaper', 'wider'] ['heavier', 'larger', 'bigger', 'thinner']
2
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
type  templates
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
self predicate  better
answer begin:  The dell is better than sony. The reason are faster, wider and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, faster, cheaper, wider
quicker, faster, cheaper, wider
winner_aspects_string1 faster, wider and quicker
looser_aspects_string1 heavier, larger and thinner
make response  After much thought, I realized that  dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
gen templates 3 After much thought, I realized that  dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
full answer  After much thought, I realized that  dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
After much thought, I realized that  dell is better, because of faster, wider and quicker. But i should tell you that sony is heavier, larger and thinner.
355 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better', 'for', 'playing', 'hardcore', 'gaming', 'and', 'home', 'entertaiment', 'hp,dell', 'or', 'sony?']
['hp,dell']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'one', 'is', 'better', 'for', 'playing', 'hardcore', 'gaming', 'and', 'home', 'entertaiment', 'hp', ',', 'dell', 'or', 'sony', '?']
or simple split_sent 14
dell sony
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'dell', 'objectB': 'sony', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'heavier', 'larger', 'bigger'] ['easier to deal with', 'easier']
2
winnder: sony  other: dell
acpect winner  lighter, heavier and larger
acpect other  easier and easier to deal with
type  templates
winnder: sony  other: dell
acpect winner  lighter, heavier and larger
acpect other  easier and easier to deal with
self predicate  b
answer begin:  The sony is b than dell. The reason are lighter, heavier and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, heavier, larger, bigger
lighter, heavier, larger, bigger
winner_aspects_string1 lighter, heavier and larger
looser_aspects_string1 easier and easier to deal with
make response  After much thought, I realized that  sony is better, because of lighter, heavier and larger. But you should know that dell is easier and easier to deal with.
gen templates 3 After much thought, I realized that  sony is better, because of lighter, heavier and larger. But you should know that dell is easier and easier to deal with.
full answer  After much thought, I realized that  sony is better, because of lighter, heavier and larger. But you should know that dell is easier and easier to deal with.
After much thought, I realized that  sony is better, because of lighter, heavier and larger. But you should know that dell is easier and easier to deal with.
356 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['javascript', 'or', 'php', 'or', 'c++', 'programmers?']
['javascript']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Javascript', 'or', 'PHP', 'or', 'C++', 'Programmers', '?']
aspects []
weights []
get url
params {'objectA': 'javascript', 'objectB': 'PHP', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn', 'easier to pick up for a noob', 'easier', 'java'] ['easier to understand', 'animation', 'faster', 'quicker']
2
winnder: php  other: javascript
acpect winner  easier to pick up for a noob, easier and easier to learn
acpect other  faster, easier to understand and quicker
type  templates
winnder: php  other: javascript
acpect winner  easier to pick up for a noob, easier and easier to learn
acpect other  faster, easier to understand and quicker
self predicate  better
answer begin:  The php is better than javascript. The reason are easier to pick up for a noob, easier and easier to learn. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn, easier to pick up for a noob, easier, java
easier to learn, easier to pick up for a noob, easier, java
winner_aspects_string1 easier to pick up for a noob, easier and easier to learn
looser_aspects_string1 faster, easier to understand and quicker
make response  I came to the conclusion that php is better, because of easier to pick up for a noob, easier and easier to learn. Javascript is faster, easier to understand and quicker.
gen templates 3 I came to the conclusion that php is better, because of easier to pick up for a noob, easier and easier to learn. Javascript is faster, easier to understand and quicker.
full answer  I came to the conclusion that php is better, because of easier to pick up for a noob, easier and easier to learn. Javascript is faster, easier to understand and quicker.
I came to the conclusion that php is better, because of easier to pick up for a noob, easier and easier to learn. Javascript is faster, easier to understand and quicker.
357 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'differences', 'between', 'php', 'and', 'javascript?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
358 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'use', 'php', 'or', 'java', 'for', 'a', 'medium', 'sized', 'travel', 'reservations', 'website?']
['java']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'use', 'PHP', 'or', 'Java', 'for', 'a', 'medium', 'sized', 'travel', 'reservations', 'website', '?']
aspects []
weights []
get url
params {'objectA': 'PHP', 'objectB': 'Java', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'faster', 'virtual', 'machine'] ['easier', 'garbage', 'collection', 'python']
2
winnder: java  other: php
acpect winner  greater and faster
acpect other  easier
type  templates
winnder: java  other: php
acpect winner  greater and faster
acpect other  easier
self predicate  better
answer begin:  The java is better than php. The reason are greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, virtual, machine
greater, faster, virtual, machine
winner_aspects_string1 greater and faster
looser_aspects_string1  and easier
make response  It's simple! Java is better, because of greater and faster. Php is  and easier.
gen templates 3 It's simple! Java is better, because of greater and faster. Php is  and easier.
full answer  It's simple! Java is better, because of greater and faster. Php is  and easier.
It's simple! Java is better, because of greater and faster. Php is  and easier.
359 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'server', 'side', 'language', 'for', 'ajax', 'implementation', '-', 'php,', 'java,', 'ruby,', '.net?']
['ruby,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ruby', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'languages', 'simpler', 'level'] ['easier', 'easier to use', 'easier to read', 'easier to write and less productive']
winnder: and  other: ruby
acpect winner  lighter and simpler
acpect other  easier, easier to read and easier to write and less productive
type  templates
ruby has undeniable advantages. They are lighter and simpler.
360 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['php', ',', 'java', 'or', '.net', '?', 'which', 'one', 'better', 'and', 'easy', 'for', 'web', 'development', '?']
['java']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['PHP', ',', 'Java', 'or', ' ', '.Net', '?', 'which', 'one', 'better', 'and', 'easy', 'for', 'Web', 'Development', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Java', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['faster for webapps', 'webapps', 'garbage', 'collection'] ['greater', 'easier to use', 'easier for you', 'easier to develop for']
winnder: and  other: java
acpect winner  faster for webapps
acpect other  greater, easier to develop for and easier to use
type  templates
java has undeniable advantages. They are faster for webapps.
361 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'for', 'you,', 'diet', 'soda', 'or', 'diet', 'tea.?']
['soda']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'for', 'you', ',', 'diet', 'soda', 'or', 'diet', 'tea', '.', '?']
or simple split_sent 8
soda diet
aspects ['better']
weights [1]
get url
params {'objectA': 'soda', 'objectB': 'diet', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['worse for your teeth', 'faster', 'worse for you'] ['better for you', 'richer', 'greater', 'worse for me']
2
winnder: soda  other: diet
acpect winner  faster, worse for your teeth and worse for you
acpect other  greater, better for you and worse for me
type  templates
winnder: soda  other: diet
acpect winner  faster, worse for your teeth and worse for you
acpect other  greater, better for you and worse for me
self predicate  better
answer begin:  The soda is better than diet. The reason are faster, worse for your teeth and worse for you. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
worse for your teeth, faster, worse for you
worse for your teeth, faster, worse for you
winner_aspects_string1 faster, worse for your teeth and worse for you
looser_aspects_string1 greater, better for you and worse for me
make response  I came to the conclusion that soda is better, because of faster, worse for your teeth and worse for you. But you should know that diet is greater, better for you and worse for me.
gen templates 3 I came to the conclusion that soda is better, because of faster, worse for your teeth and worse for you. But you should know that diet is greater, better for you and worse for me.
full answer  I came to the conclusion that soda is better, because of faster, worse for your teeth and worse for you. But you should know that diet is greater, better for you and worse for me.
I came to the conclusion that soda is better, because of faster, worse for your teeth and worse for you. But you should know that diet is greater, better for you and worse for me.
362 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'for', 'thirsty', '...', 'soda,', 'tea', 'or', 'coffee??']
['tea']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'for', 'thirsty', '...', 'Soda', ',', 'Tea', 'or', 'Coffee', '?', '?']
or simple split_sent 9
Tea Coffee
aspects ['better']
weights [1]
get url
params {'objectA': 'Tea', 'objectB': 'Coffee', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['better for you', 'easier', 'better for the environment', 'safer'] ['greater', 'easier to keep your weight under control with green tea as part of your diet', 'caffeine', 'cooler']
2
winnder: tea  other: coffee
acpect winner  better for the environment, easier and safer
acpect other  greater and easier to keep your weight under control with green tea as part of your diet
type  templates
winnder: tea  other: coffee
acpect winner  better for the environment, easier and safer
acpect other  greater and easier to keep your weight under control with green tea as part of your diet
self predicate  better
answer begin:  The tea is better than coffee. The reason are better for the environment, easier and safer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for you, easier, better for the environment, safer
better for you, easier, better for the environment, safer
winner_aspects_string1 better for the environment, easier and safer
looser_aspects_string1 greater and easier to keep your weight under control with green tea as part of your diet
make response  After much thought, I realized that  tea is better, because of better for the environment, easier and safer. Coffee is greater and easier to keep your weight under control with green tea as part of your diet.
gen templates 3 After much thought, I realized that  tea is better, because of better for the environment, easier and safer. Coffee is greater and easier to keep your weight under control with green tea as part of your diet.
full answer  After much thought, I realized that  tea is better, because of better for the environment, easier and safer. Coffee is greater and easier to keep your weight under control with green tea as part of your diet.
After much thought, I realized that  tea is better, because of better for the environment, easier and safer. Coffee is greater and easier to keep your weight under control with green tea as part of your diet.
363 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'worse', 'for', 'you,', 'iced', 'tea', 'or', 'soda?']
['tea']
['worse']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'worse', 'for', 'you', ',', 'iced', 'tea', 'or', 'soda', '?']
or simple split_sent 8
tea soda
aspects ['worse']
weights [1]
get url
params {'objectA': 'tea', 'objectB': 'soda', 'fs': 'true', 'aspect1': 'worse', 'weight1': 1}
1
create fro json predicates ['worse']
create fro json self.predicates worse
aspects  ['better for you', 'medium', 'easier', 'sweet'] ['worse for you', 'cheaper', 'better to replace it with water or unsweetened iced tea rather', 'better for me']
2
winnder: tea  other: soda
acpect winner  easier and better for you
acpect other  better to replace it with water or unsweetened iced tea rather, better for me and worse for you
type  templates
winnder: tea  other: soda
acpect winner  easier and better for you
acpect other  better to replace it with water or unsweetened iced tea rather, better for me and worse for you
self predicate  worse
answer begin:  The tea is worse than soda. The reason are easier and better for you. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for you, medium, easier, sweet
better for you, medium, easier, sweet
winner_aspects_string1 easier and better for you
looser_aspects_string1 better to replace it with water or unsweetened iced tea rather, better for me and worse for you
make response  It's simple! Tea is better, because of easier and better for you. But you should know that soda is better to replace it with water or unsweetened iced tea rather, better for me and worse for you.
gen templates 3 It's simple! Tea is better, because of easier and better for you. But you should know that soda is better to replace it with water or unsweetened iced tea rather, better for me and worse for you.
full answer  It's simple! Tea is better, because of easier and better for you. But you should know that soda is better to replace it with water or unsweetened iced tea rather, better for me and worse for you.
It's simple! Tea is better, because of easier and better for you. But you should know that soda is better to replace it with water or unsweetened iced tea rather, better for me and worse for you.
364 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'most', 'popular', 'in', 'us?', 'basketball,', 'american', 'football', 'or', 'baseball?']
['basketball,', 'football']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'basketball', 'objectB': 'football', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'faster', 'easier to make it to', 'easier to recover from being behind by many points in basketball due to the nature of the game'] ['greater', 'easier to develop in football', 'safer', 'simpler']
2
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
type  templates
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
self predicate  better
answer begin:  The football is better than basketball. The reason are easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
winner_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
looser_aspects_string1 safer, greater and simpler
make response  I came to the conclusion that football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But it will be useful for you to know that basketball is safer, greater and simpler.
gen templates 3 I came to the conclusion that football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But it will be useful for you to know that basketball is safer, greater and simpler.
full answer  I came to the conclusion that football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But it will be useful for you to know that basketball is safer, greater and simpler.
I came to the conclusion that football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But it will be useful for you to know that basketball is safer, greater and simpler.
365 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'more', 'important', 'in', 'us:', 'football', 'or', 'baseball?']
['football']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'is', 'more', 'important', 'in', 'Us', ':', 'football', 'or', 'baseball', '?']
or simple split_sent 9
football baseball
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'football', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['smarter', 'safer', 'greater', 'training'] ['easier to project', 'faster', 'offense', 'speed']
2
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
type  templates
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
self predicate  m
answer begin:  The baseball is m than football. The reason are safer, smarter and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, greater, training
smarter, safer, greater, training
winner_aspects_string1 safer, smarter and greater
looser_aspects_string1 easier to project and faster
make response  After much thought, I realized that  baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
gen templates 3 After much thought, I realized that  baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
full answer  After much thought, I realized that  baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
After much thought, I realized that  baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
366 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'better?', 'soccer,', 'american', 'football,', 'basketball,', 'baseball,', 'or', 'tennis?']
['football,']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'better', '?', 'Soccer', ',', 'American', 'Football', ',', 'Basketball', ',', 'Baseball', ',', 'or', 'Tennis', '?']
aspects ['better?']
weights [1]
get url
params {'objectA': 'football', 'objectB': 'Tennis', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'easier', 'safer', 'easier to pitch a 95 mph fastball for a strike is easier'] ['greater', 'arm', 'slot', 'shooting']
2
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
type  templates
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
self predicate  better?
answer begin:  The tennis is better? than football. The reason are safer, faster and easier to pitch a 95 mph fastball for a strike is easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
winner_aspects_string1 safer, faster and easier to pitch a 95 mph fastball for a strike is easier
looser_aspects_string1  and greater
make response  Looks like tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
gen templates 3 Looks like tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
full answer  Looks like tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
Looks like tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
367 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'most', 'popular', 'sport', 'in', 'the', 'us,', 'baseball,', 'basketball,', 'or', 'football?']
['baseball,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, skills, easier to quantify, smarter
easier to quantify statistically, skills, easier to quantify, smarter
winner_aspects_string1 easier to quantify, easier to quantify statistically and smarter
looser_aspects_string1 easier to project, faster and greater
make response  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
gen templates 3 I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
full answer  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
368 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'you', 'thing', 'is', 'better', 'football', 'or', 'baseball?']
['football']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'sport', 'you', 'thing', 'is', 'better', 'football', 'or', 'baseball', '?']
or simple split_sent 7
football baseball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'football', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smarter', 'safer', 'greater', 'training'] ['easier to project', 'faster', 'offense', 'speed']
2
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
type  templates
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
self predicate  b
answer begin:  The baseball is b than football. The reason are safer, smarter and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, greater, training
smarter, safer, greater, training
winner_aspects_string1 safer, smarter and greater
looser_aspects_string1 easier to project and faster
make response  I would prefer to use baseball because of safer, smarter and greater. But i should tell you that football is easier to project and faster.
gen templates 3 I would prefer to use baseball because of safer, smarter and greater. But i should tell you that football is easier to project and faster.
full answer  I would prefer to use baseball because of safer, smarter and greater. But i should tell you that football is easier to project and faster.
I would prefer to use baseball because of safer, smarter and greater. But i should tell you that football is easier to project and faster.
369 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'more:', 'football,', 'cricket,', 'basketball', 'or', 'baseball?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'more', ':', ' ', 'Football', ',', 'Cricket', ',', 'Basketball', 'or', 'baseball', '?']
or simple split_sent 13
Basketball baseball
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Basketball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['easier to quantify statistically', 'easier for me to see how small privates can dominate in basketball much easier', 'skills', 'easier to quantify'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
self predicate  m
answer begin:  The baseball is m than basketball. The reason are easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
winner_aspects_string1 easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
looser_aspects_string1 easier to project, faster and greater
make response  After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
full answer  After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
370 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'better', 'fantasy', 'baseball', 'or', 'fantasy', 'football?']
['baseball']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', "'s", 'better', 'fantasy', 'baseball', 'or', 'fantasy', 'football', '?']
or simple split_sent 5
baseball fantasy
aspects ['better']
weights [1]
get url
params {'objectA': 'baseball', 'objectB': 'fantasy', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'easier to stay on top of', 'alex', 'rodriguez'] ['greater', 'better to  real', 'easier to predict']
2
winnder: fantasy  other: baseball
acpect winner  easier and easier to stay on top of
acpect other  easier to predict, greater and better to  real
type  templates
winnder: fantasy  other: baseball
acpect winner  easier and easier to stay on top of
acpect other  easier to predict, greater and better to  real
self predicate  better
answer begin:  The fantasy is better than baseball. The reason are easier and easier to stay on top of. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, easier to stay on top of, alex, rodriguez
easier, easier to stay on top of, alex, rodriguez
winner_aspects_string1 easier and easier to stay on top of
looser_aspects_string1 easier to predict, greater and better to  real
make response  I came to the conclusion that fantasy is better, because of easier and easier to stay on top of. But you should know that baseball is easier to predict, greater and better to  real.
gen templates 3 I came to the conclusion that fantasy is better, because of easier and easier to stay on top of. But you should know that baseball is easier to predict, greater and better to  real.
full answer  I came to the conclusion that fantasy is better, because of easier and easier to stay on top of. But you should know that baseball is easier to predict, greater and better to  real.
I came to the conclusion that fantasy is better, because of easier and easier to stay on top of. But you should know that baseball is easier to predict, greater and better to  real.
371 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'football', 'or', 'baseball', 'better?']
['football', 'baseball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'baseball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'safer', 'greater', 'training'] ['easier to project', 'faster', 'offense', 'speed']
2
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
type  templates
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
self predicate  better
answer begin:  The baseball is better than football. The reason are safer, smarter and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, greater, training
smarter, safer, greater, training
winner_aspects_string1 safer, smarter and greater
looser_aspects_string1 easier to project and faster
make response  I came to the conclusion that baseball is better, because of safer, smarter and greater. But you should know that football is easier to project and faster.
gen templates 3 I came to the conclusion that baseball is better, because of safer, smarter and greater. But you should know that football is easier to project and faster.
full answer  I came to the conclusion that baseball is better, because of safer, smarter and greater. But you should know that football is easier to project and faster.
I came to the conclusion that baseball is better, because of safer, smarter and greater. But you should know that football is easier to project and faster.
372 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'is', 'more', 'popular', 'baseball', 'or', 'football?']
['baseball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'sport', 'is', 'more', 'popular', 'baseball', 'or', 'football', '?']
or simple split_sent 6
baseball football
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'baseball', 'objectB': 'football', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['smarter', 'safer', 'training', 'cooler'] ['easier to project', 'offense', 'speed', 'game']
2
winnder: baseball  other: football
acpect winner  safer and smarter
acpect other  easier to project
type  templates
winnder: baseball  other: football
acpect winner  safer and smarter
acpect other  easier to project
self predicate  m
answer begin:  The baseball is m than football. The reason are safer and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, training, cooler
smarter, safer, training, cooler
winner_aspects_string1 safer and smarter
looser_aspects_string1  and easier to project
make response  Looks like baseball is better, because of safer and smarter. But i should tell you that football is  and easier to project.
gen templates 3 Looks like baseball is better, because of safer and smarter. But i should tell you that football is  and easier to project.
full answer  Looks like baseball is better, because of safer and smarter. But i should tell you that football is  and easier to project.
Looks like baseball is better, because of safer and smarter. But i should tell you that football is  and easier to project.
373 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'do', 'you', 'like', 'better', 'baseball', 'or', 'football?']
['baseball']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'sport', 'do', 'you', 'like', 'better', 'baseball', 'or', 'football', '?']
or simple split_sent 7
baseball football
aspects ['better']
weights [1]
get url
params {'objectA': 'baseball', 'objectB': 'football', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['smarter', 'safer', 'training', 'cooler'] ['easier to project', 'offense', 'speed', 'game']
2
winnder: baseball  other: football
acpect winner  safer and smarter
acpect other  easier to project
type  templates
winnder: baseball  other: football
acpect winner  safer and smarter
acpect other  easier to project
self predicate  better
answer begin:  The baseball is better than football. The reason are safer and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, training, cooler
smarter, safer, training, cooler
winner_aspects_string1 safer and smarter
looser_aspects_string1  and easier to project
make response  I came to the conclusion that baseball is better, because of safer and smarter. Football is  and easier to project.
gen templates 3 I came to the conclusion that baseball is better, because of safer and smarter. Football is  and easier to project.
full answer  I came to the conclusion that baseball is better, because of safer and smarter. Football is  and easier to project.
I came to the conclusion that baseball is better, because of safer and smarter. Football is  and easier to project.
374 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'pulls', 'in', 'more', 'viewers', 'from', 'all', 'over', 'the', 'world', 'football,', 'baseball,', 'basketball,', 'tennis,', 'or', 'soccer?']
['football,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  better
answer begin:  The basketball is better than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
Looks like basketball is better, because of safer, greater and simpler. But it will be useful for you to know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
375 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'would', 'u', 'like', 'to', 'watch?!', '&', 'which', 'sport', 'would', 'u', 'like', 'to', 'play?', 'football,', 'baseball,', 'or', 'basketball?']
['football,', 'baseball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'baseball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'safer', 'greater', 'training'] ['easier to project', 'faster', 'offense', 'speed']
2
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
type  templates
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
self predicate  better
answer begin:  The baseball is better than football. The reason are safer, smarter and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, greater, training
smarter, safer, greater, training
winner_aspects_string1 safer, smarter and greater
looser_aspects_string1 easier to project and faster
make response  Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
gen templates 3 Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
full answer  Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
Looks like baseball is better, because of safer, smarter and greater. But it will be useful for you to know that football is easier to project and faster.
376 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'game', 'is', 'slower', 'baseball', 'or', 'football?']
[]
['slower']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'game', 'is', 'slower', 'baseball', 'or', 'football', '?']
or simple split_sent 5
baseball football
aspects ['slower']
weights [1]
get url
params {'objectA': 'baseball', 'objectB': 'football', 'fs': 'true', 'aspect1': 'slower', 'weight1': 1}
1
create fro json predicates ['slower']
create fro json self.predicates slower
aspects  ['smarter', 'safer', 'training', 'cooler'] ['easier to project', 'offense', 'speed', 'game']
2
winnder: baseball  other: football
acpect winner  safer and smarter
acpect other  easier to project
type  templates
winnder: baseball  other: football
acpect winner  safer and smarter
acpect other  easier to project
self predicate  slower
answer begin:  The baseball is slower than football. The reason are safer and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, training, cooler
smarter, safer, training, cooler
winner_aspects_string1 safer and smarter
looser_aspects_string1  and easier to project
make response  Looks like baseball is better, because of safer and smarter. Football is  and easier to project.
gen templates 3 Looks like baseball is better, because of safer and smarter. Football is  and easier to project.
full answer  Looks like baseball is better, because of safer and smarter. Football is  and easier to project.
Looks like baseball is better, because of safer and smarter. Football is  and easier to project.
377 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'most', 'popular', 'in', 'us?', 'basketball,', 'american', 'football', 'or', 'baseball?']
['basketball,', 'football']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'basketball', 'objectB': 'football', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'faster', 'easier to make it to', 'easier to recover from being behind by many points in basketball due to the nature of the game'] ['greater', 'easier to develop in football', 'safer', 'simpler']
2
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
type  templates
winnder: football  other: basketball
acpect winner  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
acpect other  safer, greater and simpler
self predicate  better
answer begin:  The football is better than basketball. The reason are easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
smarter, faster, easier to make it to, easier to recover from being behind by many points in basketball due to the nature of the game
winner_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
looser_aspects_string1 safer, greater and simpler
make response  Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
gen templates 3 Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
full answer  Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
Looks like football is better, because of easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game. But you should know that basketball is safer, greater and simpler.
378 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'better', 'baseball', 'or', 'basketball,', 'and', 'tell', 'me', 'which', 'player', 'is', 'best', 'at', 'that', 'sport.?']
['basketball,']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'is', 'better', 'baseball', 'or', 'basketball', ',', 'and', 'tell', 'me', 'which', 'player', 'is', 'best', 'at', 'that', 'sport', '.', '?']
or simple split_sent 5
baseball basketball
aspects ['better']
weights [1]
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, skills, easier to quantify, smarter
easier to quantify statistically, skills, easier to quantify, smarter
winner_aspects_string1 easier to quantify, easier to quantify statistically and smarter
looser_aspects_string1 easier to project, faster and greater
make response  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
full answer  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
379 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'better?', 'soccer,', 'american', 'football,', 'basketball,', 'baseball,', 'or', 'tennis?']
['football,']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'better', '?', 'Soccer', ',', 'American', 'Football', ',', 'Basketball', ',', 'Baseball', ',', 'or', 'Tennis', '?']
aspects ['better?']
weights [1]
get url
params {'objectA': 'football', 'objectB': 'Tennis', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'easier', 'safer', 'easier to pitch a 95 mph fastball for a strike is easier'] ['greater', 'arm', 'slot', 'shooting']
2
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
type  templates
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
self predicate  better?
answer begin:  The tennis is better? than football. The reason are safer, faster and easier to pitch a 95 mph fastball for a strike is easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
winner_aspects_string1 safer, faster and easier to pitch a 95 mph fastball for a strike is easier
looser_aspects_string1  and greater
make response  After much thought, I realized that  tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
gen templates 3 After much thought, I realized that  tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
full answer  After much thought, I realized that  tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
After much thought, I realized that  tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
380 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'better,', 'baseball', 'or', 'basketball,', 'and', 'tell', 'me', 'which', 'player', 'is', 'best', 'at', 'that', 'sport.?']
['basketball,']
['better,']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'is', 'better', ',', 'baseball', 'or', 'basketball', ',', 'and', 'tell', 'me', 'which', 'player', 'is', 'best', 'at', 'that', 'sport', '.', '?']
or simple split_sent 6
baseball basketball
aspects ['better,']
weights [1]
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
self predicate  better,
answer begin:  The baseball is better, than basketball. The reason are easier to quantify, easier to quantify statistically and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, skills, easier to quantify, smarter
easier to quantify statistically, skills, easier to quantify, smarter
winner_aspects_string1 easier to quantify, easier to quantify statistically and smarter
looser_aspects_string1 easier to project, faster and greater
make response  After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and smarter. Basketball is easier to project, faster and greater.
gen templates 3 After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and smarter. Basketball is easier to project, faster and greater.
full answer  After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and smarter. Basketball is easier to project, faster and greater.
After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and smarter. Basketball is easier to project, faster and greater.
381 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['who', 'can', 'jump', 'better,', 'baseball', 'or', 'basketball?']
['baseball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Who', 'can', 'jump', 'better', ',', 'baseball', 'or', 'basketball', '?']
or simple split_sent 6
baseball basketball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'easier to project', 'greater', 'easier'] ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter']
2
winnder: basketball  other: baseball
acpect winner  easier to project, faster and greater
acpect other  easier to quantify, easier to quantify statistically and smarter
type  templates
winnder: basketball  other: baseball
acpect winner  easier to project, faster and greater
acpect other  easier to quantify, easier to quantify statistically and smarter
self predicate  b
answer begin:  The basketball is b than baseball. The reason are easier to project, faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to project, greater, easier
faster, easier to project, greater, easier
winner_aspects_string1 easier to project, faster and greater
looser_aspects_string1 easier to quantify, easier to quantify statistically and smarter
make response  Looks like basketball is better, because of easier to project, faster and greater. But it will be useful for you to know that baseball is easier to quantify, easier to quantify statistically and smarter.
gen templates 3 Looks like basketball is better, because of easier to project, faster and greater. But it will be useful for you to know that baseball is easier to quantify, easier to quantify statistically and smarter.
full answer  Looks like basketball is better, because of easier to project, faster and greater. But it will be useful for you to know that baseball is easier to quantify, easier to quantify statistically and smarter.
Looks like basketball is better, because of easier to project, faster and greater. But it will be useful for you to know that baseball is easier to quantify, easier to quantify statistically and smarter.
382 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'most', 'popular', 'sport', 'in', 'the', 'us,', 'baseball,', 'basketball,', 'or', 'football?']
['baseball,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, skills, easier to quantify, smarter
easier to quantify statistically, skills, easier to quantify, smarter
winner_aspects_string1 easier to quantify, easier to quantify statistically and smarter
looser_aspects_string1 easier to project, faster and greater
make response  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
full answer  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
383 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'more:', 'football,', 'cricket,', 'basketball', 'or', 'baseball?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'more', ':', ' ', 'Football', ',', 'Cricket', ',', 'Basketball', 'or', 'baseball', '?']
or simple split_sent 13
Basketball baseball
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Basketball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['easier to quantify statistically', 'easier for me to see how small privates can dominate in basketball much easier', 'skills', 'easier to quantify'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
self predicate  m
answer begin:  The baseball is m than basketball. The reason are easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
winner_aspects_string1 easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
looser_aspects_string1 easier to project, faster and greater
make response  Looks like baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 Looks like baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
full answer  Looks like baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
Looks like baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
384 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['football', 'or', 'soccer&#92;', 'basketball', 'or', 'baseball&#92;', 'tennis', 'or', 'cricket', 'which', 'do', 'you', 'think', 'is', 'more', 'exciting', 'to', 'watch']
['basketball', 'tennis']
['more']
len(objects) 2
aspects ['more']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'tennis', 'fs': 'true', 'aspect1': 'more', 'weight1': 1}
1
create fro json predicates ['more']
create fro json self.predicates more
aspects  ['faster', 'cheaper', 'better for fernandez', 'larger'] ['greater', 'longer', 'easier to deal with', 'impact']
2
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
type  templates
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
self predicate  more
answer begin:  The tennis is more than basketball. The reason are faster, larger and better for fernandez. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, cheaper, better for fernandez, larger
faster, cheaper, better for fernandez, larger
winner_aspects_string1 faster, larger and better for fernandez
looser_aspects_string1 greater, easier to deal with and longer
make response  I would prefer to use tennis because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
gen templates 3 I would prefer to use tennis because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
full answer  I would prefer to use tennis because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
I would prefer to use tennis because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
385 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'better', 'basketball', 'or', 'baseball?']
['basketball']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'is', 'better', 'basketball', 'or', 'baseball', '?']
or simple split_sent 5
basketball baseball
aspects ['better']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to quantify statistically', 'easier for me to see how small privates can dominate in basketball much easier', 'skills', 'easier to quantify'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
winner_aspects_string1 easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
looser_aspects_string1 easier to project, faster and greater
make response  It's simple! Baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 It's simple! Baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
full answer  It's simple! Baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
It's simple! Baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
386 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['boys', 'would', 'you', 'prefer', 'baseball', 'or', 'basketballs?']
['baseball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Boys', 'would', 'you', 'prefer', 'baseball', 'or', 'basketballs', '?']
or simple split_sent 5
baseball basketballs
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'basketballs', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: basketballs  other: baseball
acpect winner  
acpect other  
type  templates
winnder: basketballs  other: baseball
acpect winner  
acpect other  
self predicate  better
answer begin:  The basketballs is better than baseball. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer basketballs than baseball.
full answer  I would prefer basketballs than baseball.
I would prefer basketballs than baseball.
387 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'basketball', 'or', 'baseball?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'basketball', 'or', 'baseball', '?']
or simple split_sent 4
basketball baseball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'basketball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to quantify statistically', 'easier for me to see how small privates can dominate in basketball much easier', 'skills', 'easier to quantify'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
self predicate  b
answer begin:  The baseball is b than basketball. The reason are easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
winner_aspects_string1 easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
looser_aspects_string1 easier to project, faster and greater
make response  After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. Basketball is easier to project, faster and greater.
gen templates 3 After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. Basketball is easier to project, faster and greater.
full answer  After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. Basketball is easier to project, faster and greater.
After much thought, I realized that  baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. Basketball is easier to project, faster and greater.
388 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'loves', 'basketball', 'more', 'than', 'softball', 'or', 'baseball?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Who', 'loves', 'basketball', 'more', 'than', 'softball', 'or', 'baseball', '?']
or simple split_sent 6
softball baseball
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'softball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['greater', 'longer', 'hevier', 'balll'] ['easier to hit', 'bigger', 'easier', 'girls']
2
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
type  templates
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
self predicate  m
answer begin:  The baseball is m than softball. The reason are greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, hevier, balll
greater, longer, hevier, balll
winner_aspects_string1 greater and longer
looser_aspects_string1 easier, easier to hit and bigger
make response  I would prefer to use baseball because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
gen templates 3 I would prefer to use baseball because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
full answer  I would prefer to use baseball because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
I would prefer to use baseball because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
389 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['do', 'chicks', 'dig', 'baseball', 'or', 'basketball', 'better', '?']
['baseball', 'basketball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, skills, easier to quantify, smarter
easier to quantify statistically, skills, easier to quantify, smarter
winner_aspects_string1 easier to quantify, easier to quantify statistically and smarter
looser_aspects_string1 easier to project, faster and greater
make response  Looks like baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 Looks like baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
full answer  Looks like baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
Looks like baseball is better, because of easier to quantify, easier to quantify statistically and smarter. But i should tell you that basketball is easier to project, faster and greater.
390 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'basketball', 'or', 'baseball?']
['basketball']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', 'basketball', 'or', 'baseball', '?']
or simple split_sent 4
basketball baseball
aspects ['better']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier to quantify statistically', 'easier for me to see how small privates can dominate in basketball much easier', 'skills', 'easier to quantify'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
easier to quantify statistically, easier for me to see how small privates can dominate in basketball much easier, skills, easier to quantify
winner_aspects_string1 easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier
looser_aspects_string1 easier to project, faster and greater
make response  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
gen templates 3 I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
full answer  I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
I came to the conclusion that baseball is better, because of easier to quantify, easier to quantify statistically and easier for me to see how small privates can dominate in basketball much easier. But i should tell you that basketball is easier to project, faster and greater.
391 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'pulls', 'in', 'more', 'viewers', 'from', 'all', 'over', 'the', 'world', 'football,', 'baseball,', 'basketball,', 'tennis,', 'or', 'soccer?']
['football,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  better
answer begin:  The basketball is better than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  I would prefer to use basketball because of safer, greater and simpler. Football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 I would prefer to use basketball because of safer, greater and simpler. Football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  I would prefer to use basketball because of safer, greater and simpler. Football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
I would prefer to use basketball because of safer, greater and simpler. Football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
392 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'would', 'u', 'like', 'to', 'watch?!', '&', 'which', 'sport', 'would', 'u', 'like', 'to', 'play?', 'football,', 'baseball,', 'or', 'basketball?']
['football,', 'baseball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'baseball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'safer', 'greater', 'training'] ['easier to project', 'faster', 'offense', 'speed']
2
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
type  templates
winnder: baseball  other: football
acpect winner  safer, smarter and greater
acpect other  easier to project and faster
self predicate  better
answer begin:  The baseball is better than football. The reason are safer, smarter and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, safer, greater, training
smarter, safer, greater, training
winner_aspects_string1 safer, smarter and greater
looser_aspects_string1 easier to project and faster
make response  I came to the conclusion that baseball is better, because of safer, smarter and greater. Football is easier to project and faster.
gen templates 3 I came to the conclusion that baseball is better, because of safer, smarter and greater. Football is easier to project and faster.
full answer  I came to the conclusion that baseball is better, because of safer, smarter and greater. Football is easier to project and faster.
I came to the conclusion that baseball is better, because of safer, smarter and greater. Football is easier to project and faster.
393 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['do', 'you', 'like', 'baseball', 'or', 'basketball', 'better?']
['baseball', 'basketball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to quantify statistically', 'skills', 'easier to quantify', 'smarter'] ['faster', 'easier to project', 'greater', 'easier']
2
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
type  templates
winnder: baseball  other: basketball
acpect winner  easier to quantify, easier to quantify statistically and smarter
acpect other  easier to project, faster and greater
self predicate  better
answer begin:  The baseball is better than basketball. The reason are easier to quantify, easier to quantify statistically and smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to quantify statistically, skills, easier to quantify, smarter
easier to quantify statistically, skills, easier to quantify, smarter
winner_aspects_string1 easier to quantify, easier to quantify statistically and smarter
looser_aspects_string1 easier to project, faster and greater
make response  I would prefer to use baseball because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
gen templates 3 I would prefer to use baseball because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
full answer  I would prefer to use baseball because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
I would prefer to use baseball because of easier to quantify, easier to quantify statistically and smarter. But it will be useful for you to know that basketball is easier to project, faster and greater.
394 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['of', 'these', 'cellphone', 'manufacturers,', 'which', 'is', 'the', 'best?', 'sony', 'ericsson,', 'motorola,', 'nokia,', 'samsung,', 'siemens,', 'and', 'lg?']
['sony']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'smoother', 'older', 'thinner'] ['richer', 'better to my eyes', 'longer', 'betterfaster']
winnder: sony  other: and
acpect winner  older, quicker and thinner
acpect other  longer, better to my eyes and richer
type  templates
sony has undeniable advantages. They are older, quicker and thinner.
395 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'cell', 'phone', '-', 'a', 'samsung', 'sgh', 'e315', 'or', 'a', 'motorola', 'v300?']
['motorola']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'cell', 'phone', '-', 'a', 'samsung', 'sgh', 'e315', 'or', 'a', 'motorola', 'v300', '?']
or simple split_sent 11
e315 a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'e315', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: a  other: e315
acpect winner  
acpect other  
type  templates
winnder: a  other: e315
acpect winner  
acpect other  
self predicate  b
answer begin:  The a is b than e315. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer a than e315.
full answer  I would prefer a than e315.
I would prefer a than e315.
396 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'I-PREDFULL', 'O']
extract_objects_predicates words ['alcatel,lg,motorola,nokia,panasonic,samsung,sanyo,siemens,sony', 'ericssion,sharp....which', 'is', 'best', 'mobile', 'to', 'use?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
397 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'brands', '(lg,', 'motorola,', 'samsung,', 'etc.)of', 'cell', 'phones', 'get', 'the', 'best', 'reception?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
398 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['whats', 'better-', 'the', 'samsung', 't809', 'or', 'the', 'motorola', 'pebl?']
['samsung', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'samsung', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'quicker', 'stronger', 'easier'] ['easier to carry around', 'heavier', 'longer', 'easier to unlock']
2
winnder: motorola  other: samsung
acpect winner  stronger, faster and quicker
acpect other  easier to carry around, heavier and easier to unlock
type  templates
winnder: motorola  other: samsung
acpect winner  stronger, faster and quicker
acpect other  easier to carry around, heavier and easier to unlock
self predicate  better
answer begin:  The motorola is better than samsung. The reason are stronger, faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, quicker, stronger, easier
faster, quicker, stronger, easier
winner_aspects_string1 stronger, faster and quicker
looser_aspects_string1 easier to carry around, heavier and easier to unlock
make response  I would prefer to use motorola because of stronger, faster and quicker. Samsung is easier to carry around, heavier and easier to unlock.
gen templates 3 I would prefer to use motorola because of stronger, faster and quicker. Samsung is easier to carry around, heavier and easier to unlock.
full answer  I would prefer to use motorola because of stronger, faster and quicker. Samsung is easier to carry around, heavier and easier to unlock.
I would prefer to use motorola because of stronger, faster and quicker. Samsung is easier to carry around, heavier and easier to unlock.
399 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'better', 'mobile', 'the', 'motorola', 'v3i', 'or', 'samsung', 'd600???']
['motorola']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'better', 'mobile', 'the', 'motorola', 'v3i', 'or', 'samsung', 'd600', '?', '?', '?']
or simple split_sent 8
v3i samsung
aspects ['better']
weights [1]
get url
params {'objectA': 'v3i', 'objectB': 'samsung', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['lighter'] []
2
winnder: samsung  other: v3i
acpect winner  lighter
acpect other  
type  templates
winnder: samsung  other: v3i
acpect winner  lighter
acpect other  
self predicate  better
answer begin:  The samsung is better than v3i. The reason are lighter. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like samsung is better than v3i because it is lighter.
full answer  It seems like samsung is better than v3i because it is lighter.
It seems like samsung is better than v3i because it is lighter.
400 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better:', 'motorola', 'v360', 'or', 'samsung', 't809?']
['motorola']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', ':', 'motorola', 'v360', 'or', 'samsung', 't809', '?']
or simple split_sent 6
v360 samsung
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'v360', 'objectB': 'samsung', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: samsung  other: v360
acpect winner  
acpect other  
type  templates
winnder: samsung  other: v360
acpect winner  
acpect other  
self predicate  b
answer begin:  The samsung is b than v360. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer samsung than v360.
full answer  I would prefer samsung than v360.
I would prefer samsung than v360.
401 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'brand', 'of', 'mobile', 'phone', 'do', 'you', 'think', 'is', 'the', 'best', '-', 'nokia,', 'motorola,', 'samsung,', 'etc??..?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
402 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best', '----', 'soney', 'ericsson,', 'nokia', ',', 'motorola', 'or', 'samsung?']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'the', 'best', '----', 'soney', 'ericsson', ',', 'nokia', ',', 'Motorola', 'or', ' ', 'Samsung', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'Motorola', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['thinner', 'quieter', 'faster', 'lighter'] ['cooler', 'smarter', 'smoother', 'easier to root']
winnder: motorola  other: and
acpect winner  lighter, faster and thinner
acpect other  smarter and easier to root
type  templates
motorola has undeniable advantages. They are lighter, faster and thinner.
403 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['motorola', 'razr', 'vs.', 'samsung', 'u420', 'nimbus?']
['motorola', 'samsung']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'motorola', 'objectB': 'samsung', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'greater', 'easier', 'heavier'] ['quicker to fix them', 'quicker', 'faster', 'faster to react']
2
winnder: samsung  other: motorola
acpect winner  lighter, greater and heavier
acpect other  faster, faster to react and quicker to fix them
type  templates
winnder: samsung  other: motorola
acpect winner  lighter, greater and heavier
acpect other  faster, faster to react and quicker to fix them
self predicate  better
answer begin:  The samsung is better than motorola. The reason are lighter, greater and heavier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, greater, easier, heavier
lighter, greater, easier, heavier
winner_aspects_string1 lighter, greater and heavier
looser_aspects_string1 faster, faster to react and quicker to fix them
make response  It's simple! Samsung is better, because of lighter, greater and heavier. But you should know that motorola is faster, faster to react and quicker to fix them.
gen templates 3 It's simple! Samsung is better, because of lighter, greater and heavier. But you should know that motorola is faster, faster to react and quicker to fix them.
full answer  It's simple! Samsung is better, because of lighter, greater and heavier. But you should know that motorola is faster, faster to react and quicker to fix them.
It's simple! Samsung is better, because of lighter, greater and heavier. But you should know that motorola is faster, faster to react and quicker to fix them.
404 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'phone', 'is', 'better,', 'the', 'samsung', 'sync', 'or', 'the', 'motorola', 'rokr', 'e1?']
['samsung', 'motorola']
['better,']
len(objects) 2
aspects ['better,']
weights [1]
get url
params {'objectA': 'samsung', 'objectB': 'motorola', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['faster', 'stronger', 'quicker', 'easier'] ['longer', 'easier to carry around', 'heavier', 'easier to unlock']
2
winnder: motorola  other: samsung
acpect winner  faster, easier and stronger
acpect other  easier to carry around, longer and easier to unlock
type  templates
winnder: motorola  other: samsung
acpect winner  faster, easier and stronger
acpect other  easier to carry around, longer and easier to unlock
self predicate  better,
answer begin:  The motorola is better, than samsung. The reason are faster, easier and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, stronger, quicker, easier
faster, stronger, quicker, easier
winner_aspects_string1 faster, easier and stronger
looser_aspects_string1 easier to carry around, longer and easier to unlock
make response  It's simple! Motorola is better, because of faster, easier and stronger. But it will be useful for you to know that samsung is easier to carry around, longer and easier to unlock.
gen templates 3 It's simple! Motorola is better, because of faster, easier and stronger. But it will be useful for you to know that samsung is easier to carry around, longer and easier to unlock.
full answer  It's simple! Motorola is better, because of faster, easier and stronger. But it will be useful for you to know that samsung is easier to carry around, longer and easier to unlock.
It's simple! Motorola is better, because of faster, easier and stronger. But it will be useful for you to know that samsung is easier to carry around, longer and easier to unlock.
405 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wich', 'phone', 'would', 'you', 'prefer?', '-samsung', 'd807,', '-motorola', 'slvr', 'l7,', '-sony-ericsson', 'w600i?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
406 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['of', 'these', 'cellphone', 'manufacturers,', 'which', 'is', 'the', 'best?', 'sony', 'ericsson,', 'motorola,', 'nokia,', 'samsung,', 'siemens,', 'and', 'lg?']
['sony']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'smoother', 'older', 'thinner'] ['richer', 'better to my eyes', 'longer', 'betterfaster']
winnder: sony  other: and
acpect winner  older, quicker and thinner
acpect other  longer, better to my eyes and richer
type  templates
sony has undeniable advantages. They are older, quicker and thinner.
407 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'I-PREDFULL', 'O']
extract_objects_predicates words ['alcatel,lg,motorola,nokia,panasonic,samsung,sanyo,siemens,sony', 'ericssion,sharp....which', 'is', 'best', 'mobile', 'to', 'use?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
408 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better,', 'siemens', 's75', 'or', 'nokia', '6630?']
['siemens', 'nokia']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'siemens', 'objectB': 'nokia', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'easier to operate', 'bigger'] ['greater', 'easier for a bidder to buy nsn when siemens owned half']
2
winnder: nokia  other: siemens
acpect winner  faster, easier to operate and bigger
acpect other  easier for a bidder to buy nsn when siemens owned half and greater
type  templates
winnder: nokia  other: siemens
acpect winner  faster, easier to operate and bigger
acpect other  easier for a bidder to buy nsn when siemens owned half and greater
self predicate  better
answer begin:  The nokia is better than siemens. The reason are faster, easier to operate and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, easier to operate, bigger
faster, easier, easier to operate, bigger
winner_aspects_string1 faster, easier to operate and bigger
looser_aspects_string1 easier for a bidder to buy nsn when siemens owned half and greater
make response  I came to the conclusion that nokia is better, because of faster, easier to operate and bigger. But you should know that siemens is easier for a bidder to buy nsn when siemens owned half and greater.
gen templates 3 I came to the conclusion that nokia is better, because of faster, easier to operate and bigger. But you should know that siemens is easier for a bidder to buy nsn when siemens owned half and greater.
full answer  I came to the conclusion that nokia is better, because of faster, easier to operate and bigger. But you should know that siemens is easier for a bidder to buy nsn when siemens owned half and greater.
I came to the conclusion that nokia is better, because of faster, easier to operate and bigger. But you should know that siemens is easier for a bidder to buy nsn when siemens owned half and greater.
409 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['of', 'these', 'cellphone', 'manufacturers,', 'which', 'is', 'the', 'best?', 'sony', 'ericsson,', 'motorola,', 'nokia,', 'samsung,', 'siemens,', 'and', 'lg?']
['sony']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'smoother', 'older', 'thinner'] ['richer', 'better to my eyes', 'longer', 'betterfaster']
winnder: sony  other: and
acpect winner  older, quicker and thinner
acpect other  longer, better to my eyes and richer
type  templates
sony has undeniable advantages. They are older, quicker and thinner.
410 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'motorola', 'razor', 'or', 'a', 'nokia', '6102?']
['motorola', 'nokia']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'motorola', 'objectB': 'nokia', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'cheaper', 'phones'] ['better for me', 'easier for me to hold it', 'bigger', 'quicker']
2
winnder: nokia  other: motorola
acpect winner  cheaper, faster and easier
acpect other  easier for me to hold it, better for me and quicker
type  templates
winnder: nokia  other: motorola
acpect winner  cheaper, faster and easier
acpect other  easier for me to hold it, better for me and quicker
self predicate  better
answer begin:  The nokia is better than motorola. The reason are cheaper, faster and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, cheaper, phones
faster, easier, cheaper, phones
winner_aspects_string1 cheaper, faster and easier
looser_aspects_string1 easier for me to hold it, better for me and quicker
make response  I would prefer to use nokia because of cheaper, faster and easier. But you should know that motorola is easier for me to hold it, better for me and quicker.
gen templates 3 I would prefer to use nokia because of cheaper, faster and easier. But you should know that motorola is easier for me to hold it, better for me and quicker.
full answer  I would prefer to use nokia because of cheaper, faster and easier. But you should know that motorola is easier for me to hold it, better for me and quicker.
I would prefer to use nokia because of cheaper, faster and easier. But you should know that motorola is easier for me to hold it, better for me and quicker.
411 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['better', 'phone', 'nokia', '3595', 'or', 'motorola', 'v190?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
gen templates 3 I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
full answer  I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
412 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'nokia', 'or', 'motorola', 'better?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But it will be useful for you to know that nokia is longer to use, easier and faster.
gen templates 3 I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But it will be useful for you to know that nokia is longer to use, easier and faster.
full answer  I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But it will be useful for you to know that nokia is longer to use, easier and faster.
I would prefer to use motorola because of easier for me to hold it, better for me and quicker. But it will be useful for you to know that nokia is longer to use, easier and faster.
413 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'I-PREDFULL', 'O']
extract_objects_predicates words ['alcatel,lg,motorola,nokia,panasonic,samsung,sanyo,siemens,sony', 'ericssion,sharp....which', 'is', 'best', 'mobile', 'to', 'use?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
414 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'company', 'makes', 'the', 'better', 'camera', 'phone,', 'sony', 'erickson,', 'motorola,', 'nokia', 'or', 'lg?']
['sony', 'nokia']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'nokia', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'lighter', 'easier to use', 'quicker'] ['faster', 'easier', 'smarter', 'easier to set up']
2
winnder: nokia  other: sony
acpect winner  lighter, greater and quicker
acpect other  faster, easier to set up and smarter
type  templates
winnder: nokia  other: sony
acpect winner  lighter, greater and quicker
acpect other  faster, easier to set up and smarter
self predicate  better
answer begin:  The nokia is better than sony. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier to use, quicker
greater, lighter, easier to use, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 faster, easier to set up and smarter
make response  It's simple! Nokia is better, because of lighter, greater and quicker. But you should know that sony is faster, easier to set up and smarter.
gen templates 3 It's simple! Nokia is better, because of lighter, greater and quicker. But you should know that sony is faster, easier to set up and smarter.
full answer  It's simple! Nokia is better, because of lighter, greater and quicker. But you should know that sony is faster, easier to set up and smarter.
It's simple! Nokia is better, because of lighter, greater and quicker. But you should know that sony is faster, easier to set up and smarter.
415 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['wich', 'one', 'is', 'better,', 'nokia', 'or', 'motorola???']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['wich', 'one', 'is', 'better', ',', 'nokia', 'or', 'motorola', '?', '?', '?']
or simple split_sent 6
nokia motorola
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'cheaper', 'longer to use'] ['better for me', 'easier for me to hold it', 'bigger', 'quicker']
2
winnder: nokia  other: motorola
acpect winner  longer to use, easier and faster
acpect other  easier for me to hold it, better for me and quicker
type  templates
winnder: nokia  other: motorola
acpect winner  longer to use, easier and faster
acpect other  easier for me to hold it, better for me and quicker
self predicate  b
answer begin:  The nokia is b than motorola. The reason are longer to use, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, cheaper, longer to use
easier, faster, cheaper, longer to use
winner_aspects_string1 longer to use, easier and faster
looser_aspects_string1 easier for me to hold it, better for me and quicker
make response  After much thought, I realized that  nokia is better, because of longer to use, easier and faster. But it will be useful for you to know that motorola is easier for me to hold it, better for me and quicker.
gen templates 3 After much thought, I realized that  nokia is better, because of longer to use, easier and faster. But it will be useful for you to know that motorola is easier for me to hold it, better for me and quicker.
full answer  After much thought, I realized that  nokia is better, because of longer to use, easier and faster. But it will be useful for you to know that motorola is easier for me to hold it, better for me and quicker.
After much thought, I realized that  nokia is better, because of longer to use, easier and faster. But it will be useful for you to know that motorola is easier for me to hold it, better for me and quicker.
416 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'brand', 'of', 'mobile', 'phone', 'do', 'you', 'think', 'is', 'the', 'best', '-', 'nokia,', 'motorola,', 'samsung,', 'etc??..?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
417 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best', '----', 'soney', 'ericsson,', 'nokia', ',', 'motorola', 'or', 'samsung?']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'the', 'best', '----', 'soney', 'ericsson', ',', 'nokia', ',', 'Motorola', 'or', ' ', 'Samsung', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'Motorola', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['thinner', 'quieter', 'faster', 'lighter'] ['cooler', 'smarter', 'smoother', 'easier to root']
winnder: motorola  other: and
acpect winner  lighter, faster and thinner
acpect other  smarter and easier to root
type  templates
motorola has undeniable advantages. They are lighter, faster and thinner.
418 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'mobile', 'phone', 'should', 'i', 'buy?', 'motorola', 'v3i', 'or', 'nokia', 'n71?']
['motorola']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'mobile', 'phone', 'should', 'i', 'buy', '?', 'Motorola', 'V3i', 'or', 'Nokia', 'N71', '?']
aspects []
weights []
get url
params {'objectA': 'motorola', 'objectB': 'Nokia N71', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: nokia n71  other: motorola
acpect winner  
acpect other  
type  templates
winnder: nokia n71  other: motorola
acpect winner  
acpect other  
self predicate  better
answer begin:  The nokia n71 is better than motorola. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer nokia n71 than motorola.
full answer  I would prefer nokia n71 than motorola.
I would prefer nokia n71 than motorola.
419 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'the', 'nokia', '6101', 'or', 'the', 'motorola', 'v3?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
gen templates 3 Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
full answer  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
420 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'phone', 'is', 'more', 'popular?the', 'nokia', '6101', 'or', 'the', 'motorola', 'razr', 'v3?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. But you should know that nokia is longer to use, easier and faster.
gen templates 3 Looks like motorola is better, because of easier for me to hold it, better for me and quicker. But you should know that nokia is longer to use, easier and faster.
full answer  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. But you should know that nokia is longer to use, easier and faster.
Looks like motorola is better, because of easier for me to hold it, better for me and quicker. But you should know that nokia is longer to use, easier and faster.
421 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'cell', 'phone', 'company...nokia', 'or', 'motorola?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'cell', 'phone', 'company', '...', 'nokia', 'or', 'motorola', '?']
or simple split_sent 8
nokia motorola
aspects ['better']
weights [1]
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['better for me', 'bigger', 'easier for me to hold it', 'quicker'] ['easier', 'faster', 'cheaper', 't720']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  easier, faster and cheaper
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  easier, faster and cheaper
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, bigger, easier for me to hold it, quicker
better for me, bigger, easier for me to hold it, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 easier, faster and cheaper
make response  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is easier, faster and cheaper.
gen templates 3 Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is easier, faster and cheaper.
full answer  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is easier, faster and cheaper.
Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is easier, faster and cheaper.
422 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'buying', 'nokia', '2310', 'is', 'better', 'idea', 'than', 'motorola', 'c168?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
gen templates 3 Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
full answer  Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
Looks like motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
423 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'company', 'is', 'good', 'in', 'mobile', ';', 'nokia', ',', 'motorola', ',', 'sony', 'ericsson?']
['nokia', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'phone', 'easier to use', 'smarter'] ['lighter', 'easier to hack into', 'larger', 'richer']
2
winnder: sony  other: nokia
acpect winner  faster, smarter and easier to use
acpect other  lighter, easier to hack into and larger
type  templates
winnder: sony  other: nokia
acpect winner  faster, smarter and easier to use
acpect other  lighter, easier to hack into and larger
self predicate  better
answer begin:  The sony is better than nokia. The reason are faster, smarter and easier to use. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, phone, easier to use, smarter
faster, phone, easier to use, smarter
winner_aspects_string1 faster, smarter and easier to use
looser_aspects_string1 lighter, easier to hack into and larger
make response  I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
gen templates 3 I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
full answer  I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
I would prefer to use sony because of faster, smarter and easier to use. Nokia is lighter, easier to hack into and larger.
424 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'best', 'one', 'sonyericsson', 'k', '750', 'i,nokia', '3230,', 'motorola', 'v3i?']
['motorola']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'motorola', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['thinner', 'quieter', 'faster', 'lighter'] ['cooler', 'smarter', 'smoother', 'easier to root']
winnder: motorola  other: and
acpect winner  lighter, faster and thinner
acpect other  smarter and easier to root
type  templates
motorola has undeniable advantages. They are lighter, faster and thinner.
425 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['who', 'makes', 'the', 'better', 'flip', 'phone,', 'nokia,', 'motorola', 'or', 'sony', 'ericsson?']
['sony']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['who', 'makes', 'the', 'better', 'flip', 'phone', ',', 'nokia', ',', 'motorola', 'or', 'sony', 'ericsson', '?']
or simple split_sent 10
motorola sony
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'motorola', 'objectB': 'sony', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'lighter', 'heavier', 'cheaper'] ['better for me', 'easier']
2
winnder: sony  other: motorola
acpect winner  lighter, faster and cheaper
acpect other  better for me and easier
type  templates
winnder: sony  other: motorola
acpect winner  lighter, faster and cheaper
acpect other  better for me and easier
self predicate  b
answer begin:  The sony is b than motorola. The reason are lighter, faster and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, lighter, heavier, cheaper
faster, lighter, heavier, cheaper
winner_aspects_string1 lighter, faster and cheaper
looser_aspects_string1 better for me and easier
make response  It's simple! Sony is better, because of lighter, faster and cheaper. But i should tell you that motorola is better for me and easier.
gen templates 3 It's simple! Sony is better, because of lighter, faster and cheaper. But i should tell you that motorola is better for me and easier.
full answer  It's simple! Sony is better, because of lighter, faster and cheaper. But i should tell you that motorola is better for me and easier.
It's simple! Sony is better, because of lighter, faster and cheaper. But i should tell you that motorola is better for me and easier.
426 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'nokia', '6101', 'or', 'motorola', 'razor', 'v3?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
gen templates 3 After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
full answer  After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
427 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['nokia', '6133', 'and', 'motorola', 'v3i.', 'which', 'one', 'better?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  It's simple! Motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
gen templates 3 It's simple! Motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
full answer  It's simple! Motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
It's simple! Motorola is better, because of easier for me to hold it, better for me and quicker. Nokia is longer to use, easier and faster.
428 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'celfone', 'is', 'better', 'nokia', '3250', 'or', 'motorola', 'razr', 'v3x?']
['nokia']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'celfone', 'is', 'better', 'nokia', '3250', 'or', 'motorola', 'razr', 'v3x', '?']
or simple split_sent 6
3250 motorola
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': '3250', 'objectB': 'motorola', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: motorola  other: 3250
acpect winner  
acpect other  
type  templates
winnder: motorola  other: 3250
acpect winner  
acpect other  
self predicate  b
answer begin:  The motorola is b than 3250. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer motorola than 3250.
full answer  I would prefer motorola than 3250.
I would prefer motorola than 3250.
429 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['should', 'i', 'buy', 'a', 'nokia', '6101', 'or', 'a', 'motorola', 'v3i?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  I came to the conclusion that motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
gen templates 3 I came to the conclusion that motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
full answer  I came to the conclusion that motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
I came to the conclusion that motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
430 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'phone', 'is', 'better', 'the', 'nokia', '6682', 'or', 'motorola', 'slvr?']
['nokia', 'motorola']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nokia', 'objectB': 'motorola', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['better for me', 'easier for me to hold it', 'bigger', 'quicker'] ['easier', 'faster', 'cheaper', 'longer to use']
2
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
type  templates
winnder: motorola  other: nokia
acpect winner  easier for me to hold it, better for me and quicker
acpect other  longer to use, easier and faster
self predicate  better
answer begin:  The motorola is better than nokia. The reason are easier for me to hold it, better for me and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for me, easier for me to hold it, bigger, quicker
better for me, easier for me to hold it, bigger, quicker
winner_aspects_string1 easier for me to hold it, better for me and quicker
looser_aspects_string1 longer to use, easier and faster
make response  After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
gen templates 3 After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
full answer  After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
After much thought, I realized that  motorola is better, because of easier for me to hold it, better for me and quicker. But i should tell you that nokia is longer to use, easier and faster.
431 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'mobile', 'resell', 'value', 'count', 'more...nokia,sony,motorola,lg..?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
432 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'ruby', 'better', 'than', 'php/c#', 'in', 'any', 'way', 'and', 'is', 'rails', 'all', 'that?']
['ruby']
['better']
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects ['better']
weights [1]
get url
params {'objectA': 'ruby', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['lighter', 'languages', 'simpler', 'level'] ['easier', 'easier to read', 'easier to use', 'easier to write and less productive']
winnder: and  other: ruby
acpect winner  lighter and simpler
acpect other  easier, easier to read and easier to write and less productive
type  templates
ruby has undeniable advantages. They are lighter and simpler.
433 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ruby', 'on', 'rails', 'vs', 'php', 'for', 'webapp?']
['ruby']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Ruby', 'on', 'Rails', 'vs', 'PHP', 'for', 'Webapp', '?']
aspects []
weights []
get url
params {'objectA': 'ruby', 'objectB': 'PHP', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['simpler', 'easier', 'easier to read and figure out', 'simpler to work with'] ['faster', 'right', 'faster to write in ruby', 'easier to learn']
2
winnder: ruby  other: php
acpect winner  easier, simpler to work with and simpler
acpect other  faster, faster to write in ruby and easier to learn
type  templates
winnder: ruby  other: php
acpect winner  easier, simpler to work with and simpler
acpect other  faster, faster to write in ruby and easier to learn
self predicate  better
answer begin:  The ruby is better than php. The reason are easier, simpler to work with and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
simpler, easier, easier to read and figure out, simpler to work with
simpler, easier, easier to read and figure out, simpler to work with
winner_aspects_string1 easier, simpler to work with and simpler
looser_aspects_string1 faster, faster to write in ruby and easier to learn
make response  It's simple! Ruby is better, because of easier, simpler to work with and simpler. But i should tell you that php is faster, faster to write in ruby and easier to learn.
gen templates 3 It's simple! Ruby is better, because of easier, simpler to work with and simpler. But i should tell you that php is faster, faster to write in ruby and easier to learn.
full answer  It's simple! Ruby is better, because of easier, simpler to work with and simpler. But i should tell you that php is faster, faster to write in ruby and easier to learn.
It's simple! Ruby is better, because of easier, simpler to work with and simpler. But i should tell you that php is faster, faster to write in ruby and easier to learn.
434 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'server', 'side', 'language', 'for', 'ajax', 'implementation', '-', 'php,', 'java,', 'ruby,', '.net?']
['ruby,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ruby', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'languages', 'simpler', 'level'] ['easier', 'easier to use', 'easier to read', 'easier to write and less productive']
winnder: and  other: ruby
acpect winner  lighter and simpler
acpect other  easier, easier to read and easier to write and less productive
type  templates
ruby has undeniable advantages. They are lighter and simpler.
435 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['can', 'someone', 'tell', 'me', 'the', 'major', 'differences', 'between', 'mysql/php,', 'rubyonrails,', 'lamp,', 'and', 'asp.net?']
['mysql/php,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'mysql/php', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  [] ['mins', 'version', 'running', 'joomla']
winnder: and  other: mysql/php
acpect winner  
acpect other  
type  templates
and is better.
436 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'differences', 'between', 'cakephp', 'and', '"ruby', 'on', 'rails"?']
['cakephp']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'cakephp', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'faster', 'easier', 'benchmark'] ['migration', 'databases', 'party', 'collections']
winnder: and  other: cakephp
acpect winner  lighter, faster and easier
acpect other  
type  templates
cakephp has undeniable advantages. They are lighter, faster and easier.
437 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'way', 'to', 'build', 'and', 'e-commerce', 'site', 'and', 'why?', '(joomla,', 'mysql/php,', 'rubyonrails?)?']
['mysql/php,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'mysql/php', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  [] ['mins', 'version', 'running', 'joomla']
winnder: and  other: mysql/php
acpect winner  
acpect other  
type  templates
and is better.
438 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'option', 'for', 'making', 'money', 'from', 'ads', 'on', 'my', 'blogsite.....google,yahoo,or', 'amazon', 'or', 'some', 'other?']
['amazon']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'a', 'better', 'option', 'for', 'making', 'money', 'from', 'ads', 'on', 'my', 'blogsite', '.....', 'google', ',', 'yahoo', ',', 'or', 'amazon', 'or', 'some', 'other', '?']
or simple split_sent 18
, amazon
We can't recognize objects for comparision
439 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'differences', 'between', 'trucks', 'and', 'suvs?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
440 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'want', 'to', 'buy', 'an', 'suv', 'or', 'a', 'truck...?']
['suv']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I', 'want', 'to', 'buy', 'an', 'SUV', 'or', 'a', 'truck', '...', '?']
or simple split_sent 6
SUV a
aspects []
weights []
get url
params {'objectA': 'SUV', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'safer', 'lighter', 'smoother'] ['stronger', 'worse for the environment']
2
winnder: a  other: suv
acpect winner  safer, easier and lighter
acpect other  stronger and worse for the environment
type  templates
winnder: a  other: suv
acpect winner  safer, easier and lighter
acpect other  stronger and worse for the environment
self predicate  better
answer begin:  The a is better than suv. The reason are safer, easier and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, safer, lighter, smoother
easier, safer, lighter, smoother
winner_aspects_string1 safer, easier and lighter
looser_aspects_string1 stronger and worse for the environment
make response  I came to the conclusion that a is better, because of safer, easier and lighter. But i should tell you that suv is stronger and worse for the environment.
gen templates 3 I came to the conclusion that a is better, because of safer, easier and lighter. But i should tell you that suv is stronger and worse for the environment.
full answer  I came to the conclusion that a is better, because of safer, easier and lighter. But i should tell you that suv is stronger and worse for the environment.
I came to the conclusion that a is better, because of safer, easier and lighter. But i should tell you that suv is stronger and worse for the environment.
441 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'domestic', 'car', 'manufacturer', 'is', 'better', 'in', 'your', 'opinion?', 'gm,', 'ford,', 'or', 'diamler', 'chrysler?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'domestic', 'car', 'manufacturer', 'is', 'better', 'in', 'your', 'opinion', '?', 'GM', ',', 'Ford', ',', 'or', 'Diamler', 'Chrysler', '?']
We can't recognize objects for comparision
442 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'better?', 'soccer,', 'american', 'football,', 'basketball,', 'baseball,', 'or', 'tennis?']
['football,']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'better', '?', 'Soccer', ',', 'American', 'Football', ',', 'Basketball', ',', 'Baseball', ',', 'or', 'Tennis', '?']
aspects ['better?']
weights [1]
get url
params {'objectA': 'football', 'objectB': 'Tennis', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'easier', 'safer', 'easier to pitch a 95 mph fastball for a strike is easier'] ['greater', 'arm', 'slot', 'shooting']
2
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
type  templates
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
self predicate  better?
answer begin:  The tennis is better? than football. The reason are safer, faster and easier to pitch a 95 mph fastball for a strike is easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
winner_aspects_string1 safer, faster and easier to pitch a 95 mph fastball for a strike is easier
looser_aspects_string1  and greater
make response  It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
gen templates 3 It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
full answer  It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
443 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['football', 'or', 'soccer&#92;', 'basketball', 'or', 'baseball&#92;', 'tennis', 'or', 'cricket', 'which', 'do', 'you', 'think', 'is', 'more', 'exciting', 'to', 'watch']
['basketball', 'tennis']
['more']
len(objects) 2
aspects ['more']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'tennis', 'fs': 'true', 'aspect1': 'more', 'weight1': 1}
1
create fro json predicates ['more']
create fro json self.predicates more
aspects  ['faster', 'cheaper', 'better for fernandez', 'larger'] ['greater', 'longer', 'easier to deal with', 'impact']
2
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
type  templates
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
self predicate  more
answer begin:  The tennis is more than basketball. The reason are faster, larger and better for fernandez. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, cheaper, better for fernandez, larger
faster, cheaper, better for fernandez, larger
winner_aspects_string1 faster, larger and better for fernandez
looser_aspects_string1 greater, easier to deal with and longer
make response  After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
gen templates 3 After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
full answer  After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
444 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'pulls', 'in', 'more', 'viewers', 'from', 'all', 'over', 'the', 'world', 'football,', 'baseball,', 'basketball,', 'tennis,', 'or', 'soccer?']
['football,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  better
answer begin:  The basketball is better than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  It's simple! Basketball is better, because of safer, greater and simpler. But i should tell you that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 It's simple! Basketball is better, because of safer, greater and simpler. But i should tell you that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  It's simple! Basketball is better, because of safer, greater and simpler. But i should tell you that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
It's simple! Basketball is better, because of safer, greater and simpler. But i should tell you that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
445 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'better?', 'soccer,', 'american', 'football,', 'basketball,', 'baseball,', 'or', 'tennis?']
['football,']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'better', '?', 'Soccer', ',', 'American', 'Football', ',', 'Basketball', ',', 'Baseball', ',', 'or', 'Tennis', '?']
aspects ['better?']
weights [1]
get url
params {'objectA': 'football', 'objectB': 'Tennis', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'easier', 'safer', 'easier to pitch a 95 mph fastball for a strike is easier'] ['greater', 'arm', 'slot', 'shooting']
2
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
type  templates
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
self predicate  better?
answer begin:  The tennis is better? than football. The reason are safer, faster and easier to pitch a 95 mph fastball for a strike is easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
winner_aspects_string1 safer, faster and easier to pitch a 95 mph fastball for a strike is easier
looser_aspects_string1  and greater
make response  I came to the conclusion that tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
gen templates 3 I came to the conclusion that tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
full answer  I came to the conclusion that tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
I came to the conclusion that tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. Football is  and greater.
446 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['football', 'or', 'soccer&#92;', 'basketball', 'or', 'baseball&#92;', 'tennis', 'or', 'cricket', 'which', 'do', 'you', 'think', 'is', 'more', 'exciting', 'to', 'watch']
['basketball', 'tennis']
['more']
len(objects) 2
aspects ['more']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'tennis', 'fs': 'true', 'aspect1': 'more', 'weight1': 1}
1
create fro json predicates ['more']
create fro json self.predicates more
aspects  ['faster', 'cheaper', 'better for fernandez', 'larger'] ['greater', 'longer', 'easier to deal with', 'impact']
2
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
type  templates
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
self predicate  more
answer begin:  The tennis is more than basketball. The reason are faster, larger and better for fernandez. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, cheaper, better for fernandez, larger
faster, cheaper, better for fernandez, larger
winner_aspects_string1 faster, larger and better for fernandez
looser_aspects_string1 greater, easier to deal with and longer
make response  It's simple! Tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
gen templates 3 It's simple! Tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
full answer  It's simple! Tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
It's simple! Tennis is better, because of faster, larger and better for fernandez. But it will be useful for you to know that basketball is greater, easier to deal with and longer.
447 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'pulls', 'in', 'more', 'viewers', 'from', 'all', 'over', 'the', 'world', 'football,', 'baseball,', 'basketball,', 'tennis,', 'or', 'soccer?']
['football,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  better
answer begin:  The basketball is better than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  I would prefer to use basketball because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 I would prefer to use basketball because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  I would prefer to use basketball because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
I would prefer to use basketball because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
448 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'better?', 'soccer,', 'american', 'football,', 'basketball,', 'baseball,', 'or', 'tennis?']
['football,']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'better', '?', 'Soccer', ',', 'American', 'Football', ',', 'Basketball', ',', 'Baseball', ',', 'or', 'Tennis', '?']
aspects ['better?']
weights [1]
get url
params {'objectA': 'football', 'objectB': 'Tennis', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'easier', 'safer', 'easier to pitch a 95 mph fastball for a strike is easier'] ['greater', 'arm', 'slot', 'shooting']
2
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
type  templates
winnder: tennis  other: football
acpect winner  safer, faster and easier to pitch a 95 mph fastball for a strike is easier
acpect other  greater
self predicate  better?
answer begin:  The tennis is better? than football. The reason are safer, faster and easier to pitch a 95 mph fastball for a strike is easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
faster, easier, safer, easier to pitch a 95 mph fastball for a strike is easier
winner_aspects_string1 safer, faster and easier to pitch a 95 mph fastball for a strike is easier
looser_aspects_string1  and greater
make response  It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
gen templates 3 It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
full answer  It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
It's simple! Tennis is better, because of safer, faster and easier to pitch a 95 mph fastball for a strike is easier. But you should know that football is  and greater.
449 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['football', 'or', 'soccer&#92;', 'basketball', 'or', 'baseball&#92;', 'tennis', 'or', 'cricket', 'which', 'do', 'you', 'think', 'is', 'more', 'exciting', 'to', 'watch']
['basketball', 'tennis']
['more']
len(objects) 2
aspects ['more']
weights [1]
get url
params {'objectA': 'basketball', 'objectB': 'tennis', 'fs': 'true', 'aspect1': 'more', 'weight1': 1}
1
create fro json predicates ['more']
create fro json self.predicates more
aspects  ['faster', 'cheaper', 'better for fernandez', 'larger'] ['greater', 'longer', 'easier to deal with', 'impact']
2
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
type  templates
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
self predicate  more
answer begin:  The tennis is more than basketball. The reason are faster, larger and better for fernandez. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, cheaper, better for fernandez, larger
faster, cheaper, better for fernandez, larger
winner_aspects_string1 faster, larger and better for fernandez
looser_aspects_string1 greater, easier to deal with and longer
make response  Looks like tennis is better, because of faster, larger and better for fernandez. Basketball is greater, easier to deal with and longer.
gen templates 3 Looks like tennis is better, because of faster, larger and better for fernandez. Basketball is greater, easier to deal with and longer.
full answer  Looks like tennis is better, because of faster, larger and better for fernandez. Basketball is greater, easier to deal with and longer.
Looks like tennis is better, because of faster, larger and better for fernandez. Basketball is greater, easier to deal with and longer.
450 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'your', 'favourite', 'sport?basketball', 'or', 'cricket', 'or', 'tennis?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'your', 'favourite', 'sport?basketball', 'or', 'cricket', 'or', 'tennis', '?']
or simple split_sent 5
sport?basketball cricket
aspects []
weights []
get url
params {'objectA': 'sport?basketball', 'objectB': 'cricket', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: cricket  other: sport?basketball
acpect winner  
acpect other  
type  templates
winnder: cricket  other: sport?basketball
acpect winner  
acpect other  
self predicate  better
answer begin:  The cricket is better than sport?basketball. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer cricket than sport?basketball.
full answer  I would prefer cricket than sport?basketball.
I would prefer cricket than sport?basketball.
451 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['girls,', 'do', 'you', 'like', 'basketball', 'or', 'tennis', 'better?']
['basketball', 'tennis']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'basketball', 'objectB': 'tennis', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'cheaper', 'better for fernandez', 'larger'] ['greater', 'longer', 'easier to deal with', 'impact']
2
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
type  templates
winnder: tennis  other: basketball
acpect winner  faster, larger and better for fernandez
acpect other  greater, easier to deal with and longer
self predicate  better
answer begin:  The tennis is better than basketball. The reason are faster, larger and better for fernandez. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, cheaper, better for fernandez, larger
faster, cheaper, better for fernandez, larger
winner_aspects_string1 faster, larger and better for fernandez
looser_aspects_string1 greater, easier to deal with and longer
make response  After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But i should tell you that basketball is greater, easier to deal with and longer.
gen templates 3 After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But i should tell you that basketball is greater, easier to deal with and longer.
full answer  After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But i should tell you that basketball is greater, easier to deal with and longer.
After much thought, I realized that  tennis is better, because of faster, larger and better for fernandez. But i should tell you that basketball is greater, easier to deal with and longer.
452 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'soccer,', 'tennis,', 'volleyball,', 'badminton', 'or', 'basketball??']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'soccer', ',', 'tennis', ',', 'volleyball', ',', 'badminton', 'or', 'basketball', '?', '?']
or simple split_sent 10
badminton basketball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'badminton', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'easier', 'faster'] []
2
winnder: basketball  other: badminton
acpect winner  lighter, easier and faster
acpect other  
type  templates
winnder: basketball  other: badminton
acpect winner  lighter, easier and faster
acpect other  
self predicate  b
answer begin:  The basketball is b than badminton. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like basketball is better than badminton because it is lighter, easier, faster.
full answer  It seems like basketball is better than badminton because it is lighter, easier, faster.
It seems like basketball is better than badminton because it is lighter, easier, faster.
453 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'pulls', 'in', 'more', 'viewers', 'from', 'all', 'over', 'the', 'world', 'football,', 'baseball,', 'basketball,', 'tennis,', 'or', 'soccer?']
['football,', 'basketball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'basketball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to develop in football', 'safer', 'simpler'] ['easier to make it to', 'faster', 'smarter', 'easier to recover from being behind by many points in basketball due to the nature of the game']
2
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
type  templates
winnder: basketball  other: football
acpect winner  safer, greater and simpler
acpect other  easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
self predicate  better
answer begin:  The basketball is better than football. The reason are safer, greater and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to develop in football, safer, simpler
greater, easier to develop in football, safer, simpler
winner_aspects_string1 safer, greater and simpler
looser_aspects_string1 easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game
make response  It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
gen templates 3 It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
full answer  It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
It's simple! Basketball is better, because of safer, greater and simpler. But you should know that football is easier to make it to, faster and easier to recover from being behind by many points in basketball due to the nature of the game.
454 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'is', 'more', 'extreme', 'football', 'or', 'hockey?']
['football']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'sport', 'is', 'more', 'extreme', 'Football', 'or', 'Hockey', '?']
or simple split_sent 6
Football Hockey
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Football', 'objectB': 'Hockey', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['faster', 'quicker', 'skates', 'demands'] ['view', 'field', 'earlier', 'backrest']
2
winnder: hockey  other: football
acpect winner  faster and quicker
acpect other  earlier
type  templates
winnder: hockey  other: football
acpect winner  faster and quicker
acpect other  earlier
self predicate  m
answer begin:  The hockey is m than football. The reason are faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, quicker, skates, demands
faster, quicker, skates, demands
winner_aspects_string1 faster and quicker
looser_aspects_string1  and earlier
make response  Looks like hockey is better, because of faster and quicker. But it will be useful for you to know that football is  and earlier.
gen templates 3 Looks like hockey is better, because of faster and quicker. But it will be useful for you to know that football is  and earlier.
full answer  Looks like hockey is better, because of faster and quicker. But it will be useful for you to know that football is  and earlier.
Looks like hockey is better, because of faster and quicker. But it will be useful for you to know that football is  and earlier.
455 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['in', 'india,', 'after', 'cricket,which', 'is', 'more', 'popular-hockey', 'or', 'football?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['In', 'India', ',', 'after', 'cricket', ',', 'which', 'is', 'more', 'popular', '-', 'hockey', 'or', 'football', '?']
or simple split_sent 12
hockey football
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'hockey', 'objectB': 'football', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['faster', 'skates', 'demands', 'easier to understand'] ['view', 'field', 'earlier', 'backrest']
2
winnder: hockey  other: football
acpect winner  faster and easier to understand
acpect other  earlier
type  templates
winnder: hockey  other: football
acpect winner  faster and easier to understand
acpect other  earlier
self predicate  m
answer begin:  The hockey is m than football. The reason are faster and easier to understand. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, skates, demands, easier to understand
faster, skates, demands, easier to understand
winner_aspects_string1 faster and easier to understand
looser_aspects_string1  and earlier
make response  I would prefer to use hockey because of faster and easier to understand. But it will be useful for you to know that football is  and earlier.
gen templates 3 I would prefer to use hockey because of faster and easier to understand. But it will be useful for you to know that football is  and earlier.
full answer  I would prefer to use hockey because of faster and easier to understand. But it will be useful for you to know that football is  and earlier.
I would prefer to use hockey because of faster and easier to understand. But it will be useful for you to know that football is  and earlier.
456 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'mobile', 'pc', 'connection', 'is', 'the', 'fastest', 'for', 'k700', 'bluetooth', 'infra', 'serial', 'or', 'usb?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'mobile', 'pc', 'connection', 'is', 'the', 'fastest', 'for', 'k700', 'bluetooth', 'infra', 'serial', 'or', 'usb', '?']
or simple split_sent 12
serial usb
aspects []
weights []
get url
params {'objectA': 'serial', 'objectB': 'usb', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to configure', 'newer', 'older', 'faster'] ['easier to just send raw serial commands', 'commands', 'stack', 'driver']
2
winnder: usb  other: serial
acpect winner  faster, newer and older
acpect other  easier to just send raw serial commands
type  templates
winnder: usb  other: serial
acpect winner  faster, newer and older
acpect other  easier to just send raw serial commands
self predicate  better
answer begin:  The usb is better than serial. The reason are faster, newer and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to configure, newer, older, faster
easier to configure, newer, older, faster
winner_aspects_string1 faster, newer and older
looser_aspects_string1  and easier to just send raw serial commands
make response  It's simple! Usb is better, because of faster, newer and older. But it will be useful for you to know that serial is  and easier to just send raw serial commands.
gen templates 3 It's simple! Usb is better, because of faster, newer and older. But it will be useful for you to know that serial is  and easier to just send raw serial commands.
full answer  It's simple! Usb is better, because of faster, newer and older. But it will be useful for you to know that serial is  and easier to just send raw serial commands.
It's simple! Usb is better, because of faster, newer and older. But it will be useful for you to know that serial is  and easier to just send raw serial commands.
457 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['can', 'anyone', 'tell', 'me', 'he', 'difference', 'between', 'usb,', 'infrared', 'and', 'bluetooth?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
458 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'uses', 'more', 'battery', 'power,', 'bluetooth', 'mouse', 'or', 'usb', 'mouse?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'uses', 'more', 'battery', 'power', ',', 'bluetooth', 'mouse', 'or', 'USB', 'mouse', '?']
or simple split_sent 8
mouse USB
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'mouse', 'objectB': 'USB', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['higher', 'bigger', 'larger', 'smoother'] ['cooler', 'easier to forget about and leave behind your mouse', 'nicer', 'easier to insert the usb stick into the docking element']
2
winnder: usb  other: mouse
acpect winner  higher, larger and bigger
acpect other  easier to forget about and leave behind your mouse and easier to insert the usb stick into the docking element
type  templates
winnder: usb  other: mouse
acpect winner  higher, larger and bigger
acpect other  easier to forget about and leave behind your mouse and easier to insert the usb stick into the docking element
self predicate  m
answer begin:  The usb is m than mouse. The reason are higher, larger and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, bigger, larger, smoother
higher, bigger, larger, smoother
winner_aspects_string1 higher, larger and bigger
looser_aspects_string1 easier to forget about and leave behind your mouse and easier to insert the usb stick into the docking element
make response  After much thought, I realized that  usb is better, because of higher, larger and bigger. But it will be useful for you to know that mouse is easier to forget about and leave behind your mouse and easier to insert the usb stick into the docking element.
gen templates 3 After much thought, I realized that  usb is better, because of higher, larger and bigger. But it will be useful for you to know that mouse is easier to forget about and leave behind your mouse and easier to insert the usb stick into the docking element.
full answer  After much thought, I realized that  usb is better, because of higher, larger and bigger. But it will be useful for you to know that mouse is easier to forget about and leave behind your mouse and easier to insert the usb stick into the docking element.
After much thought, I realized that  usb is better, because of higher, larger and bigger. But it will be useful for you to know that mouse is easier to forget about and leave behind your mouse and easier to insert the usb stick into the docking element.
459 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'major', 'difference', 'between', 'a', 'bluetooth,infrared.and', 'usb', 'connectivity?']
['usb']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'usb', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to configure', 'newer', 'easier to set up'] ['simpler', 'larger', 'lighter', 'betterfaster']
winnder: usb  other: and
acpect winner  greater, newer and easier to configure
acpect other  lighter, larger and simpler
type  templates
usb has undeniable advantages. They are greater, newer and easier to configure.
460 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'between', 'concrete', 'and', 'cement?']
['concrete']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'concrete', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to handle and much lighter', 'quicker', 'smoother', 'longer'] ['cooler', 'easier to read', 'older', 'easier to transport and install']
winnder: and  other: concrete
acpect winner  easier to handle and much lighter, quicker and longer
acpect other  easier to read, older and easier to transport and install
type  templates
concrete has undeniable advantages. They are easier to handle and much lighter, quicker and longer.
461 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', '"concrete"', 'and', '"cement?"?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
462 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'difference', 'between', 'concrete', 'and', 'cement?']
['concrete']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'concrete', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to handle and much lighter', 'quicker', 'smoother', 'longer'] ['cooler', 'easier to read', 'older', 'easier to transport and install']
winnder: and  other: concrete
acpect winner  easier to handle and much lighter, quicker and longer
acpect other  easier to read, older and easier to transport and install
type  templates
concrete has undeniable advantages. They are easier to handle and much lighter, quicker and longer.
463 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'car', 'to', 'buy', 'in', 'india', '-', 'ford', 'fiesta', 'sedan', 'petrol', 'or', 'honda', 'city', 'gxi', 'or', 'honda', 'city', 'zx', 'vtec?']
['ford', 'honda', 'honda']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'larger', 'faster', 'smoother'] ['greater', 'easier', 'longer', 'lighter']
2
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
type  templates
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
self predicate  better
answer begin:  The honda is better than ford. The reason are faster, larger and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, larger, faster, smoother
quicker, larger, faster, smoother
winner_aspects_string1 faster, larger and quicker
looser_aspects_string1 lighter, greater and longer
make response  It's simple! Honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
gen templates 3 It's simple! Honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
full answer  It's simple! Honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
It's simple! Honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
464 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['between', 'a', 'honda', 'civic,', 'mazda3,', 'ford', 'focus,', 'and', 'scion', 'tc,', 'what', 'should', 'i', 'buy?', 'any', 'other', 'suggestions?']
['honda', 'ford']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'ford', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'quicker', 'lighter', 'easier'] ['richer', 'larger', 'faster to charge', 'safer']
2
winnder: ford  other: honda
acpect winner  lighter, greater and quicker
acpect other  safer, larger and faster to charge
type  templates
winnder: ford  other: honda
acpect winner  lighter, greater and quicker
acpect other  safer, larger and faster to charge
self predicate  better
answer begin:  The ford is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, quicker, lighter, easier
greater, quicker, lighter, easier
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 safer, larger and faster to charge
make response  I would prefer to use ford because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
gen templates 3 I would prefer to use ford because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
full answer  I would prefer to use ford because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
I would prefer to use ford because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
465 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'mini', 'van..dodge,honda,nissan,or', 'ford', '??']
['ford']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
466 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'the', 'best', 'automobie???', 'toyota?', 'honda?', 'ford?', 'porsche?']
['ford?']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
467 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'much', 'better', 'ford', 'or', 'honda?']
['ford']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'much', 'better', 'ford', 'or', 'honda', '?']
or simple split_sent 5
ford honda
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ford', 'objectB': 'honda', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['quicker', 'larger', 'faster', 'smoother'] ['greater', 'easier', 'longer', 'lighter']
2
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
type  templates
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
self predicate  b
answer begin:  The honda is b than ford. The reason are faster, larger and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, larger, faster, smoother
quicker, larger, faster, smoother
winner_aspects_string1 faster, larger and quicker
looser_aspects_string1 lighter, greater and longer
make response  I came to the conclusion that honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
gen templates 3 I came to the conclusion that honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
full answer  I came to the conclusion that honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
I came to the conclusion that honda is better, because of faster, larger and quicker. Ford is lighter, greater and longer.
468 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'car', 'is', 'better', 'for', 'afamily', 'of', 'four', 'living', 'in', 'the', 'bay', 'area', 'of', 'san', 'fran', 'sisco?', 'ford,honda,lexus', 'or', 'a', 'toyota?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'car', 'is', 'better', 'for', 'afamily', 'of', 'four', 'living', 'in', 'the', 'bay', 'area', 'of', 'San', 'Fran', 'Sisco', '?', 'Ford', ',', 'honda', ',', 'lexus', 'or', 'a', 'toyota', '?']
We can't recognize objects for comparision
469 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', '1', 'do', 'u', 'feel', 'is', 'better', 'honda', 'city', 'or', 'ford', 'fiesta', '(', 'to', 'indians)?']
['honda', 'ford']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'ford', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'quicker', 'lighter', 'easier'] ['richer', 'larger', 'faster to charge', 'safer']
2
winnder: ford  other: honda
acpect winner  lighter, greater and quicker
acpect other  safer, larger and faster to charge
type  templates
winnder: ford  other: honda
acpect winner  lighter, greater and quicker
acpect other  safer, larger and faster to charge
self predicate  better
answer begin:  The ford is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, quicker, lighter, easier
greater, quicker, lighter, easier
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 safer, larger and faster to charge
make response  After much thought, I realized that  ford is better, because of lighter, greater and quicker. But you should know that honda is safer, larger and faster to charge.
gen templates 3 After much thought, I realized that  ford is better, because of lighter, greater and quicker. But you should know that honda is safer, larger and faster to charge.
full answer  After much thought, I realized that  ford is better, because of lighter, greater and quicker. But you should know that honda is safer, larger and faster to charge.
After much thought, I realized that  ford is better, because of lighter, greater and quicker. But you should know that honda is safer, larger and faster to charge.
470 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'ford', 'escort', 'zx2', 'or', 'honda', 'civic!!!?']
['ford', 'honda']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'ford', 'objectB': 'honda', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'larger', 'faster', 'smoother'] ['greater', 'easier', 'longer', 'lighter']
2
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
type  templates
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
self predicate  better
answer begin:  The honda is better than ford. The reason are faster, larger and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, larger, faster, smoother
quicker, larger, faster, smoother
winner_aspects_string1 faster, larger and quicker
looser_aspects_string1 lighter, greater and longer
make response  I came to the conclusion that honda is better, because of faster, larger and quicker. But i should tell you that ford is lighter, greater and longer.
gen templates 3 I came to the conclusion that honda is better, because of faster, larger and quicker. But i should tell you that ford is lighter, greater and longer.
full answer  I came to the conclusion that honda is better, because of faster, larger and quicker. But i should tell you that ford is lighter, greater and longer.
I came to the conclusion that honda is better, because of faster, larger and quicker. But i should tell you that ford is lighter, greater and longer.
471 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'best...', 'honda', 's2000', 'or', 'ford', 'focus', 'st?']
['honda', 'ford']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'ford', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'quicker', 'lighter', 'easier'] ['richer', 'larger', 'faster to charge', 'safer']
2
winnder: ford  other: honda
acpect winner  lighter, greater and quicker
acpect other  safer, larger and faster to charge
type  templates
winnder: ford  other: honda
acpect winner  lighter, greater and quicker
acpect other  safer, larger and faster to charge
self predicate  better
answer begin:  The ford is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, quicker, lighter, easier
greater, quicker, lighter, easier
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 safer, larger and faster to charge
make response  Looks like ford is better, because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
gen templates 3 Looks like ford is better, because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
full answer  Looks like ford is better, because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
Looks like ford is better, because of lighter, greater and quicker. But i should tell you that honda is safer, larger and faster to charge.
472 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'you', 'had', 'to', 'choose', 'between', 'ford', 'focus', '1.6', 'and', 'honda', 'civic', '1.4', 'which', 'would', 'you', 'choose', 'and', 'why????']
['ford', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'larger', 'faster', 'smoother'] ['greater', 'easier', 'longer', 'lighter']
2
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
type  templates
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
self predicate  better
answer begin:  The honda is better than ford. The reason are faster, larger and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, larger, faster, smoother
quicker, larger, faster, smoother
winner_aspects_string1 faster, larger and quicker
looser_aspects_string1 lighter, greater and longer
make response  I would prefer to use honda because of faster, larger and quicker. But it will be useful for you to know that ford is lighter, greater and longer.
gen templates 3 I would prefer to use honda because of faster, larger and quicker. But it will be useful for you to know that ford is lighter, greater and longer.
full answer  I would prefer to use honda because of faster, larger and quicker. But it will be useful for you to know that ford is lighter, greater and longer.
I would prefer to use honda because of faster, larger and quicker. But it will be useful for you to know that ford is lighter, greater and longer.
473 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'car', 'is', 'better-', 'ford', 'fiesta', '1.6', 'or', 'honda', 'city', 'zx?']
['ford', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'larger', 'faster', 'smoother'] ['greater', 'easier', 'longer', 'lighter']
2
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
type  templates
winnder: honda  other: ford
acpect winner  faster, larger and quicker
acpect other  lighter, greater and longer
self predicate  better
answer begin:  The honda is better than ford. The reason are faster, larger and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, larger, faster, smoother
quicker, larger, faster, smoother
winner_aspects_string1 faster, larger and quicker
looser_aspects_string1 lighter, greater and longer
make response  It's simple! Honda is better, because of faster, larger and quicker. But you should know that ford is lighter, greater and longer.
gen templates 3 It's simple! Honda is better, because of faster, larger and quicker. But you should know that ford is lighter, greater and longer.
full answer  It's simple! Honda is better, because of faster, larger and quicker. But you should know that ford is lighter, greater and longer.
It's simple! Honda is better, because of faster, larger and quicker. But you should know that ford is lighter, greater and longer.
474 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'company', 'of', 'cars', 'that', 'you', 'can', 'gat', '(honda,', 'ford,', 'ect....)', 'ps:i', 'dont', 'care', 'about', 'the', 'price?']
['ford,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
475 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'honda', 'accord', 'or', 'nissan', 'altima?']
['honda', 'nissan']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'honda', 'objectB': 'nissan', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['greater', 'lighter', 'easier', 'quicker'] ['richer', 'higher', 'more to', 'better to drive']
2
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
type  templates
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
self predicate  better
answer begin:  The nissan is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier, quicker
greater, lighter, easier, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 better to drive, higher and more to
make response  It's simple! Nissan is better, because of lighter, greater and quicker. But it will be useful for you to know that honda is better to drive, higher and more to.
gen templates 3 It's simple! Nissan is better, because of lighter, greater and quicker. But it will be useful for you to know that honda is better to drive, higher and more to.
full answer  It's simple! Nissan is better, because of lighter, greater and quicker. But it will be useful for you to know that honda is better to drive, higher and more to.
It's simple! Nissan is better, because of lighter, greater and quicker. But it will be useful for you to know that honda is better to drive, higher and more to.
476 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'mini', 'van..dodge,honda,nissan,or', 'ford', '??']
['ford']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
477 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'in', 'mpg,', 'toyota,', 'honda,', 'mazda', 'or', 'nissan?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'in', 'MPG', ',', 'Toyota', ',', 'Honda', ',', 'Mazda', 'or', 'Nissan', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Mazda', 'objectB': 'Nissan', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'bigger', 'lighter', 'lbs'] ['base', 'car', 'kilos', 'better to drive']
2
winnder: nissan  other: mazda
acpect winner  lighter, greater and bigger
acpect other  better to drive
type  templates
winnder: nissan  other: mazda
acpect winner  lighter, greater and bigger
acpect other  better to drive
self predicate  b
answer begin:  The nissan is b than mazda. The reason are lighter, greater and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, bigger, lighter, lbs
greater, bigger, lighter, lbs
winner_aspects_string1 lighter, greater and bigger
looser_aspects_string1  and better to drive
make response  I would prefer to use nissan because of lighter, greater and bigger. But i should tell you that mazda is  and better to drive.
gen templates 3 I would prefer to use nissan because of lighter, greater and bigger. But i should tell you that mazda is  and better to drive.
full answer  I would prefer to use nissan because of lighter, greater and bigger. But i should tell you that mazda is  and better to drive.
I would prefer to use nissan because of lighter, greater and bigger. But i should tell you that mazda is  and better to drive.
478 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['honda', 'pilot', 'vs', 'nissan', 'pathfinder,', 'which', 'is', 'better?']
['honda', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'lighter', 'easier', 'quicker'] ['richer', 'higher', 'more to', 'better to drive']
2
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
type  templates
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
self predicate  better
answer begin:  The nissan is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier, quicker
greater, lighter, easier, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 better to drive, higher and more to
make response  It's simple! Nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
gen templates 3 It's simple! Nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
full answer  It's simple! Nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
It's simple! Nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
479 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'car,', 'toyota,', 'nissan', 'or', 'honda?']
['nissan']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'car', ',', 'Toyota', ',', 'Nissan', 'or', 'Honda', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Nissan', 'objectB': 'Honda', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['richer', 'higher', 'longer', 'more to'] ['greater', 'head', 'legroom', 'lighter']
2
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
type  templates
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
self predicate  b
answer begin:  The honda is b than nissan. The reason are longer, higher and more to. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
richer, higher, longer, more to
richer, higher, longer, more to
winner_aspects_string1 longer, higher and more to
looser_aspects_string1 lighter and greater
make response  Looks like honda is better, because of longer, higher and more to. Nissan is lighter and greater.
gen templates 3 Looks like honda is better, because of longer, higher and more to. Nissan is lighter and greater.
full answer  Looks like honda is better, because of longer, higher and more to. Nissan is lighter and greater.
Looks like honda is better, because of longer, higher and more to. Nissan is lighter and greater.
480 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'car', 'to', 'by', 'with', 'high', 'mileage,', 'nissan,', 'honda,', 'toyota?']
['nissan,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'stronger', 'easier to manage'] ['bigger', 'heavier', 'easier to live with', 'larger']
winnder: nissan  other: and
acpect winner  stronger, longer and easier to manage
acpect other  heavier, larger and easier to live with
type  templates
nissan has undeniable advantages. They are stronger, longer and easier to manage.
481 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'car', 'should', 'i', 'buy', '-', 'the', 'new', 'nissan', 'tiida', 'or', 'honda', 'civic?']
['nissan', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['richer', 'higher', 'longer', 'more to'] ['greater', 'head', 'legroom', 'lighter']
2
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
type  templates
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
self predicate  better
answer begin:  The honda is better than nissan. The reason are longer, higher and more to. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
richer, higher, longer, more to
richer, higher, longer, more to
winner_aspects_string1 longer, higher and more to
looser_aspects_string1 lighter and greater
make response  I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
gen templates 3 I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
full answer  I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
482 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['compare', 'honda', 'pilot', 'to', 'nissan', 'pathfinder', 'as', 'far', 'as', 'price,', 'comfort', 'and', 'safety?']
['honda', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'lighter', 'easier', 'quicker'] ['richer', 'higher', 'more to', 'better to drive']
2
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
type  templates
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
self predicate  better
answer begin:  The nissan is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier, quicker
greater, lighter, easier, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 better to drive, higher and more to
make response  Looks like nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
gen templates 3 Looks like nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
full answer  Looks like nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
Looks like nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
483 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'car;', 'a', 'honda', 'nsx-r', 'or', 'a', 'nissan', 'skyline', 'gtr-v', '?']
['honda', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'lighter', 'easier', 'quicker'] ['richer', 'higher', 'more to', 'better to drive']
2
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
type  templates
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
self predicate  better
answer begin:  The nissan is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier, quicker
greater, lighter, easier, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 better to drive, higher and more to
make response  I would prefer to use nissan because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
gen templates 3 I would prefer to use nissan because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
full answer  I would prefer to use nissan because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
I would prefer to use nissan because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
484 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'the', 'nissan', 'altima', 'se-r', 'or', 'the', 'honda', 'accord?']
['nissan', 'honda']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'nissan', 'objectB': 'honda', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['richer', 'higher', 'longer', 'more to'] ['greater', 'head', 'legroom', 'lighter']
2
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
type  templates
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
self predicate  better
answer begin:  The honda is better than nissan. The reason are longer, higher and more to. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
richer, higher, longer, more to
richer, higher, longer, more to
winner_aspects_string1 longer, higher and more to
looser_aspects_string1 lighter and greater
make response  It's simple! Honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
gen templates 3 It's simple! Honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
full answer  It's simple! Honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
It's simple! Honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
485 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'does', 'honda,', 'toyota', 'or', 'nissan', 'have', 'a', 'better', 'track', 'record', 'of', 'reliability?']
['nissan']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'does', 'honda', ',', 'Toyota', 'or', 'Nissan', 'have', 'a', 'better', 'track', 'record', 'of', 'reliability', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Toyota', 'objectB': 'Nissan', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'faster', 'lighter', 'simpler'] ['easier', 'smarter', 'easier to park', 'corners']
2
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
type  templates
winnder: nissan  other: toyota
acpect winner  lighter, greater and faster
acpect other  easier, easier to park and smarter
self predicate  b
answer begin:  The nissan is b than toyota. The reason are lighter, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, lighter, simpler
greater, faster, lighter, simpler
winner_aspects_string1 lighter, greater and faster
looser_aspects_string1 easier, easier to park and smarter
make response  Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
gen templates 3 Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
full answer  Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
Looks like nissan is better, because of lighter, greater and faster. But it will be useful for you to know that toyota is easier, easier to park and smarter.
486 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['of', 'non', 'hybrids,', 'which', 'car', 'has', 'the', 'best', 'gas', 'mileage?', 'honda', 'civic,', 'toyota', 'matrix,', 'or', 'nissan', 'versa?']
['honda', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'lighter', 'easier', 'quicker'] ['richer', 'higher', 'more to', 'better to drive']
2
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
type  templates
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
self predicate  better
answer begin:  The nissan is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier, quicker
greater, lighter, easier, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 better to drive, higher and more to
make response  After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
gen templates 3 After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
full answer  After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But i should tell you that honda is better to drive, higher and more to.
487 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'a', 'good', 'car', 'for', 'starters?', 'either', 'a', 'madza,', 'honda,', 'or', 'nissan?']
['honda,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 's', 'a', 'good', 'car', 'for', 'starters', '?', 'either', 'a', 'madza', ',', 'honda', ',', 'or', 'nissan', '?']
or simple split_sent 14
, nissan
We can't recognize objects for comparision
488 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'i', 'want', 'the', 'best', '&', 'can', 'only', 'afford', '1', 'which', 'suv', 'should', 'i', 'buy?', 'nissan', 'xterra,', 'honda', 'crv,', 'or', 'toyota', 'rav?']
['suv', 'nissan', 'honda']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'suv', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'bigger', 'smoother'] ['greater', 'engine', 'quicker', 'seating']
2
winnder: nissan  other: suv
acpect winner  lighter, easier and bigger
acpect other  greater and quicker
type  templates
winnder: nissan  other: suv
acpect winner  lighter, easier and bigger
acpect other  greater and quicker
self predicate  better
answer begin:  The nissan is better than suv. The reason are lighter, easier and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, bigger, smoother
lighter, easier, bigger, smoother
winner_aspects_string1 lighter, easier and bigger
looser_aspects_string1 greater and quicker
make response  Looks like nissan is better, because of lighter, easier and bigger. But you should know that suv is greater and quicker.
gen templates 3 Looks like nissan is better, because of lighter, easier and bigger. But you should know that suv is greater and quicker.
full answer  Looks like nissan is better, because of lighter, easier and bigger. But you should know that suv is greater and quicker.
Looks like nissan is better, because of lighter, easier and bigger. But you should know that suv is greater and quicker.
489 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'a', 'nissan', '350z', 'or', 'an', '06', 'honda', 'si?']
['nissan', 'honda']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'nissan', 'objectB': 'honda', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['richer', 'higher', 'longer', 'more to'] ['greater', 'head', 'legroom', 'lighter']
2
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
type  templates
winnder: honda  other: nissan
acpect winner  longer, higher and more to
acpect other  lighter and greater
self predicate  better
answer begin:  The honda is better than nissan. The reason are longer, higher and more to. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
richer, higher, longer, more to
richer, higher, longer, more to
winner_aspects_string1 longer, higher and more to
looser_aspects_string1 lighter and greater
make response  I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
gen templates 3 I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
full answer  I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
I came to the conclusion that honda is better, because of longer, higher and more to. But i should tell you that nissan is lighter and greater.
490 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'car', 'is', 'better', 'for', 'a', 'college', 'graduate', 'the', 'honda', 'fit', 'or', 'nissan', 'versa?']
['honda', 'nissan']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'honda', 'objectB': 'nissan', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['greater', 'lighter', 'easier', 'quicker'] ['richer', 'higher', 'more to', 'better to drive']
2
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
type  templates
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
self predicate  better
answer begin:  The nissan is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier, quicker
greater, lighter, easier, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 better to drive, higher and more to
make response  It's simple! Nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
gen templates 3 It's simple! Nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
full answer  It's simple! Nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
It's simple! Nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
491 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['who', 'makes', 'better', 'transmissions?', 'honda,', 'nissan', 'or', 'mazda?']
['honda,', 'nissan']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'honda', 'objectB': 'nissan', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'lighter', 'easier', 'quicker'] ['richer', 'higher', 'more to', 'better to drive']
2
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
type  templates
winnder: nissan  other: honda
acpect winner  lighter, greater and quicker
acpect other  better to drive, higher and more to
self predicate  better
answer begin:  The nissan is better than honda. The reason are lighter, greater and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, easier, quicker
greater, lighter, easier, quicker
winner_aspects_string1 lighter, greater and quicker
looser_aspects_string1 better to drive, higher and more to
make response  After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
gen templates 3 After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
full answer  After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
After much thought, I realized that  nissan is better, because of lighter, greater and quicker. But you should know that honda is better to drive, higher and more to.
492 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'differences', 'between', 'postgresql', 'and', 'oracle?']
['postgresql']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'postgresql', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to execute', 'smoother', 'hardware', 'problems'] ['easier to use', 'simpler to use', 'simpler', 'faster']
winnder: postgresql  other: and
acpect winner  easier to execute
acpect other  faster, simpler and easier to use
type  templates
postgresql has undeniable advantages. They are easier to execute.
493 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['can', 'some', 'one', 'tell', 'me', 'difference', 'between', 'oracle,', 'microsoft', 'and', 'ibm', 'etl', 'tools?']
['oracle,', 'microsoft', 'ibm']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'oracle', 'objectB': 'microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smoother', 'quicker', 'easier for customers to connect critical business applications such as sap'] ['easier to manage', 'clumsier', 'better for mainframes']
2
winnder: microsoft  other: oracle
acpect winner  greater, quicker and easier for customers to connect critical business applications such as sap
acpect other  clumsier, better for mainframes and easier to manage
type  templates
winnder: microsoft  other: oracle
acpect winner  greater, quicker and easier for customers to connect critical business applications such as sap
acpect other  clumsier, better for mainframes and easier to manage
self predicate  better
answer begin:  The microsoft is better than oracle. The reason are greater, quicker and easier for customers to connect critical business applications such as sap. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, smoother, quicker, easier for customers to connect critical business applications such as sap
greater, smoother, quicker, easier for customers to connect critical business applications such as sap
winner_aspects_string1 greater, quicker and easier for customers to connect critical business applications such as sap
looser_aspects_string1 clumsier, better for mainframes and easier to manage
make response  It's simple! Microsoft is better, because of greater, quicker and easier for customers to connect critical business applications such as sap. But it will be useful for you to know that oracle is clumsier, better for mainframes and easier to manage.
gen templates 3 It's simple! Microsoft is better, because of greater, quicker and easier for customers to connect critical business applications such as sap. But it will be useful for you to know that oracle is clumsier, better for mainframes and easier to manage.
full answer  It's simple! Microsoft is better, because of greater, quicker and easier for customers to connect critical business applications such as sap. But it will be useful for you to know that oracle is clumsier, better for mainframes and easier to manage.
It's simple! Microsoft is better, because of greater, quicker and easier for customers to connect critical business applications such as sap. But it will be useful for you to know that oracle is clumsier, better for mainframes and easier to manage.
494 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['should', 'i', 'buy', 'an', 'apple', 'ibook', 'laptop', 'or', 'a', 'sony', 'laptop?']
['apple', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'thinner', 'bigger', 'faster'] ['easier', 'cooler', 'greater', 'fancier']
2
winnder: sony  other: apple
acpect winner  lighter, faster and thinner
acpect other  easier, greater and fancier
type  templates
winnder: sony  other: apple
acpect winner  lighter, faster and thinner
acpect other  easier, greater and fancier
self predicate  better
answer begin:  The sony is better than apple. The reason are lighter, faster and thinner. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, thinner, bigger, faster
lighter, thinner, bigger, faster
winner_aspects_string1 lighter, faster and thinner
looser_aspects_string1 easier, greater and fancier
make response  Looks like sony is better, because of lighter, faster and thinner. But you should know that apple is easier, greater and fancier.
gen templates 3 Looks like sony is better, because of lighter, faster and thinner. But you should know that apple is easier, greater and fancier.
full answer  Looks like sony is better, because of lighter, faster and thinner. But you should know that apple is easier, greater and fancier.
Looks like sony is better, because of lighter, faster and thinner. But you should know that apple is easier, greater and fancier.
495 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['witch', 'is', 'better', 'alienware,', 'sony,', 'dell', 'xps,', 'or', 'the', 'new', 'apple', 'computer??????']
['sony,', 'dell', 'apple']
['better']
len(objects) 3
aspects ['better']
weights [1]
get url
params {'objectA': 'sony', 'objectB': 'dell', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['quicker', 'faster', 'cheaper', 'wider'] ['heavier', 'larger', 'bigger', 'thinner']
2
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
type  templates
winnder: dell  other: sony
acpect winner  faster, wider and quicker
acpect other  heavier, larger and thinner
self predicate  better
answer begin:  The dell is better than sony. The reason are faster, wider and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, faster, cheaper, wider
quicker, faster, cheaper, wider
winner_aspects_string1 faster, wider and quicker
looser_aspects_string1 heavier, larger and thinner
make response  Looks like dell is better, because of faster, wider and quicker. But you should know that sony is heavier, larger and thinner.
gen templates 3 Looks like dell is better, because of faster, wider and quicker. But you should know that sony is heavier, larger and thinner.
full answer  Looks like dell is better, because of faster, wider and quicker. But you should know that sony is heavier, larger and thinner.
Looks like dell is better, because of faster, wider and quicker. But you should know that sony is heavier, larger and thinner.
496 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'laptop', 'apple', 'g4', 'sony', 'vaio?']
['apple', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'thinner', 'bigger', 'faster'] ['easier', 'cooler', 'greater', 'fancier']
2
winnder: sony  other: apple
acpect winner  lighter, faster and thinner
acpect other  easier, greater and fancier
type  templates
winnder: sony  other: apple
acpect winner  lighter, faster and thinner
acpect other  easier, greater and fancier
self predicate  better
answer begin:  The sony is better than apple. The reason are lighter, faster and thinner. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, thinner, bigger, faster
lighter, thinner, bigger, faster
winner_aspects_string1 lighter, faster and thinner
looser_aspects_string1 easier, greater and fancier
make response  I would prefer to use sony because of lighter, faster and thinner. But i should tell you that apple is easier, greater and fancier.
gen templates 3 I would prefer to use sony because of lighter, faster and thinner. But i should tell you that apple is easier, greater and fancier.
full answer  I would prefer to use sony because of lighter, faster and thinner. But i should tell you that apple is easier, greater and fancier.
I would prefer to use sony because of lighter, faster and thinner. But i should tell you that apple is easier, greater and fancier.
497 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'better', 'choice', 'of', 'laptop?', 'dell', 'or', 'apple', 'or', 'sony?']
['dell', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'faster', 'bigger'] ['cheaper', 'easier to become an ibm', 'laptops']
2
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
type  templates
winnder: apple  other: dell
acpect winner  lighter, easier and faster
acpect other  easier to become an ibm and cheaper
self predicate  better
answer begin:  The apple is better than dell. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, faster, bigger
lighter, easier, faster, bigger
winner_aspects_string1 lighter, easier and faster
looser_aspects_string1 easier to become an ibm and cheaper
make response  It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
gen templates 3 It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
full answer  It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
It's simple! Apple is better, because of lighter, easier and faster. But you should know that dell is easier to become an ibm and cheaper.
498 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'notebook', 'brand', 'and', 'why?', 'dell,', 'sony', 'vaio,', 'apple,', 'toshiba,', 'ibm,', '...', '?', '(in', 'general', 'comparison)']
['dell,', 'ibm,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'dell', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'older', 'greater', 'cheaper'] ['easier', 'lighter', 'easier to become an ibm']
2
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
type  templates
winnder: ibm  other: dell
acpect winner  greater, older and bigger
acpect other  lighter, easier and easier to become an ibm
self predicate  better
answer begin:  The ibm is better than dell. The reason are greater, older and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
bigger, older, greater, cheaper
bigger, older, greater, cheaper
winner_aspects_string1 greater, older and bigger
looser_aspects_string1 lighter, easier and easier to become an ibm
make response  I would prefer to use ibm because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
gen templates 3 I would prefer to use ibm because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
full answer  I would prefer to use ibm because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
I would prefer to use ibm because of greater, older and bigger. But you should know that dell is lighter, easier and easier to become an ibm.
499 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'laptop', 'company', 'is', 'better', 'sony', 'hp', 'ibm', 'or', 'apple?']
['sony', 'ibm']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'ibm', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'more for a better build quality'] ['easier', 'programmer']
2
winnder: sony  other: ibm
acpect winner  faster and more for a better build quality
acpect other  easier
type  templates
winnder: sony  other: ibm
acpect winner  faster and more for a better build quality
acpect other  easier
self predicate  better
answer begin:  The sony is better than ibm. The reason are faster and more for a better build quality. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, more for a better build quality
faster, more for a better build quality
winner_aspects_string1 faster and more for a better build quality
looser_aspects_string1  and easier
make response  After much thought, I realized that  sony is better, because of faster and more for a better build quality. But it will be useful for you to know that ibm is  and easier.
gen templates 3 After much thought, I realized that  sony is better, because of faster and more for a better build quality. But it will be useful for you to know that ibm is  and easier.
full answer  After much thought, I realized that  sony is better, because of faster and more for a better build quality. But it will be useful for you to know that ibm is  and easier.
After much thought, I realized that  sony is better, because of faster and more for a better build quality. But it will be useful for you to know that ibm is  and easier.
500 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['sony', 'vaio', 'vs.', 'apple', 'macbook.', 'which', 'one', 'is', 'better', 'for', 'my', 'money?', 'any', 'suggestions', 'would', 'be', 'awesome.?']
['sony', 'apple']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'sony', 'objectB': 'apple', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['faster', 'easier', 'greater', 'cooler'] ['lighter', 'thinner', 'bigger', 'fault']
2
winnder: apple  other: sony
acpect winner  faster, greater and easier
acpect other  lighter, thinner and bigger
type  templates
winnder: apple  other: sony
acpect winner  faster, greater and easier
acpect other  lighter, thinner and bigger
self predicate  better
answer begin:  The apple is better than sony. The reason are faster, greater and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, greater, cooler
faster, easier, greater, cooler
winner_aspects_string1 faster, greater and easier
looser_aspects_string1 lighter, thinner and bigger
make response  After much thought, I realized that  apple is better, because of faster, greater and easier. But it will be useful for you to know that sony is lighter, thinner and bigger.
gen templates 3 After much thought, I realized that  apple is better, because of faster, greater and easier. But it will be useful for you to know that sony is lighter, thinner and bigger.
full answer  After much thought, I realized that  apple is better, because of faster, greater and easier. But it will be useful for you to know that sony is lighter, thinner and bigger.
After much thought, I realized that  apple is better, because of faster, greater and easier. But it will be useful for you to know that sony is lighter, thinner and bigger.
501 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'can', 'brag', 'the', 'best', 'monitor', 'quality--apple', 'or', 'sony?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Who', 'can', 'brag', 'the', 'best', 'monitor', 'quality', '--', 'Apple', 'or', 'Sony', '?']
aspects []
weights []
get url
params {'objectA': 'Apple', 'objectB': 'Sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'thinner', 'bigger', 'faster'] ['easier', 'cooler', 'greater', 'fancier']
2
winnder: sony  other: apple
acpect winner  lighter, faster and thinner
acpect other  easier, greater and fancier
type  templates
winnder: sony  other: apple
acpect winner  lighter, faster and thinner
acpect other  easier, greater and fancier
self predicate  better
answer begin:  The sony is better than apple. The reason are lighter, faster and thinner. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, thinner, bigger, faster
lighter, thinner, bigger, faster
winner_aspects_string1 lighter, faster and thinner
looser_aspects_string1 easier, greater and fancier
make response  I came to the conclusion that sony is better, because of lighter, faster and thinner. But it will be useful for you to know that apple is easier, greater and fancier.
gen templates 3 I came to the conclusion that sony is better, because of lighter, faster and thinner. But it will be useful for you to know that apple is easier, greater and fancier.
full answer  I came to the conclusion that sony is better, because of lighter, faster and thinner. But it will be useful for you to know that apple is easier, greater and fancier.
I came to the conclusion that sony is better, because of lighter, faster and thinner. But it will be useful for you to know that apple is easier, greater and fancier.
502 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better?', 'youtube', 'or', 'google', 'video?']
['youtube', 'google']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'youtube', 'objectB': 'google', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'safer', 'videos'] ['faster to load the same apps', 'smarter', 'google+', 'data']
2
winnder: youtube  other: google
acpect winner  safer, easier and faster
acpect other  faster to load the same apps and smarter
type  templates
winnder: youtube  other: google
acpect winner  safer, easier and faster
acpect other  faster to load the same apps and smarter
self predicate  better
answer begin:  The youtube is better than google. The reason are safer, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, safer, videos
easier, faster, safer, videos
winner_aspects_string1 safer, easier and faster
looser_aspects_string1 faster to load the same apps and smarter
make response  It's simple! Youtube is better, because of safer, easier and faster. But it will be useful for you to know that google is faster to load the same apps and smarter.
gen templates 3 It's simple! Youtube is better, because of safer, easier and faster. But it will be useful for you to know that google is faster to load the same apps and smarter.
full answer  It's simple! Youtube is better, because of safer, easier and faster. But it will be useful for you to know that google is faster to load the same apps and smarter.
It's simple! Youtube is better, because of safer, easier and faster. But it will be useful for you to know that google is faster to load the same apps and smarter.
503 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whay', 'is', 'youtube', 'such', 'a', 'success,', 'compared', 'to', 'google', 'video,', 'dailymotion', 'or', 'others?']
['youtube', 'google']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'youtube', 'objectB': 'google', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'safer', 'videos'] ['faster to load the same apps', 'smarter', 'google+', 'data']
2
winnder: youtube  other: google
acpect winner  safer, easier and faster
acpect other  faster to load the same apps and smarter
type  templates
winnder: youtube  other: google
acpect winner  safer, easier and faster
acpect other  faster to load the same apps and smarter
self predicate  better
answer begin:  The youtube is better than google. The reason are safer, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, safer, videos
easier, faster, safer, videos
winner_aspects_string1 safer, easier and faster
looser_aspects_string1 faster to load the same apps and smarter
make response  It's simple! Youtube is better, because of safer, easier and faster. But you should know that google is faster to load the same apps and smarter.
gen templates 3 It's simple! Youtube is better, because of safer, easier and faster. But you should know that google is faster to load the same apps and smarter.
full answer  It's simple! Youtube is better, because of safer, easier and faster. But you should know that google is faster to load the same apps and smarter.
It's simple! Youtube is better, because of safer, easier and faster. But you should know that google is faster to load the same apps and smarter.
504 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whihc', 'one', 'is', 'better', 'ps2', 'or', 'xbox', 'or', 'gamecube?', 'and', 'why?']
['ps2', 'gamecube?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'nicersmoother', 'smoother', 'older'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
self predicate  better
answer begin:  The gamecube is better than ps2. The reason are faster and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, nicersmoother, smoother, older
faster, nicersmoother, smoother, older
winner_aspects_string1 faster and older
smth wrong in answer generation, please try again
505 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['who', 'thinks', 'gamecube', 'is', 'way', 'better', 'than', 'ps2?', 'and', 'why?']
['gamecube', 'ps2?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'ps2', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['higher', 'nicersmoother', 'older', 'game'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  higher and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  higher and older
acpect other  
self predicate  better
answer begin:  The gamecube is better than ps2. The reason are higher and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, nicersmoother, older, game
higher, nicersmoother, older, game
winner_aspects_string1 higher and older
smth wrong in answer generation, please try again
506 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'ps2', 'xbox', 'or', 'gamecube?']
['ps2']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'ps2', 'xbox', 'or', 'gamecube', '?']
or simple split_sent 5
xbox gamecube
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'xbox', 'objectB': 'gamecube', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['price', 'games', 'lighter', 'easier'] ['greater', 'easier to', 'wii', 'respects']
2
winnder: gamecube  other: xbox
acpect winner  lighter and easier
acpect other  greater and easier to
type  templates
winnder: gamecube  other: xbox
acpect winner  lighter and easier
acpect other  greater and easier to
self predicate  b
answer begin:  The gamecube is b than xbox. The reason are lighter and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
price, games, lighter, easier
price, games, lighter, easier
winner_aspects_string1 lighter and easier
looser_aspects_string1 greater and easier to
make response  After much thought, I realized that  gamecube is better, because of lighter and easier. Xbox is greater and easier to.
gen templates 3 After much thought, I realized that  gamecube is better, because of lighter and easier. Xbox is greater and easier to.
full answer  After much thought, I realized that  gamecube is better, because of lighter and easier. Xbox is greater and easier to.
After much thought, I realized that  gamecube is better, because of lighter and easier. Xbox is greater and easier to.
507 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'better?', 'xbox,', 'gamecube', 'or', 'ps2?']
['gamecube']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', "'s", 'better', '?', 'XBOX', ',', 'GAMECUBE', 'or', 'PS2', '?']
or simple split_sent 7
GAMECUBE PS2
aspects ['better?']
weights [1]
get url
params {'objectA': 'GAMECUBE', 'objectB': 'PS2', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['higher', 'nicersmoother', 'game', 'consoles'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  higher
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  higher
acpect other  
self predicate  better?
answer begin:  The gamecube is better? than ps2. The reason are higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, nicersmoother, game, consoles
higher, nicersmoother, game, consoles
winner_aspects_string1  and higher
smth wrong in answer generation, please try again
508 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'a', 'gamecube', 'or', 'a', 'ps2?']
['gamecube']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', ',', 'a', 'gamecube', 'or', 'a', 'ps2', '?']
or simple split_sent 6
gamecube a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'gamecube', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['spaceand', 'bonus', 'gameboy', 'player'] ['greater', 'dvd', 'faster', 'blurrier']
2
winnder: gamecube  other: a
acpect winner  
acpect other  greater and faster
type  templates
winnder: gamecube  other: a
acpect winner  
acpect other  greater and faster
self predicate  b
answer begin:  The gamecube is b than a. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
spaceand, bonus, gameboy, player
spaceand, bonus, gameboy, player
smth wrong in answer generation, please try again
509 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'do', 'u', 'like', 'the', 'best?gamecube', 'xbox', 'or', 'ps2??']
['best?gamecube']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'one', 'do', 'u', 'like', 'the', 'best?gamecube', 'xbox', 'or', 'ps2', '?', '?']
or simple split_sent 8
xbox ps2
aspects []
weights []
get url
params {'objectA': 'xbox', 'objectB': 'ps2', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'faster', 'easier', 'nicersmoother'] ['higher', 'hand', 'spaceand', 'bonus']
2
winnder: xbox  other: ps2
acpect winner  faster and easier
acpect other  higher
type  templates
winnder: xbox  other: ps2
acpect winner  faster and easier
acpect other  higher
self predicate  better
answer begin:  The xbox is better than ps2. The reason are faster and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, faster, easier, nicersmoother
smoother, faster, easier, nicersmoother
winner_aspects_string1 faster and easier
looser_aspects_string1  and higher
make response  Looks like xbox is better, because of faster and easier. But i should tell you that ps2 is  and higher.
gen templates 3 Looks like xbox is better, because of faster and easier. But i should tell you that ps2 is  and higher.
full answer  Looks like xbox is better, because of faster and easier. But i should tell you that ps2 is  and higher.
Looks like xbox is better, because of faster and easier. But i should tell you that ps2 is  and higher.
510 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'video', 'game', 'system', 'is', 'better', 'ps2', 'or', 'gamecube?']
['ps2']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'video', 'game', 'system', 'is', 'better', 'Ps2', 'or', 'Gamecube', '?']
or simple split_sent 7
Ps2 Gamecube
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Ps2', 'objectB': 'Gamecube', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'nicersmoother', 'smoother', 'older'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
self predicate  b
answer begin:  The gamecube is b than ps2. The reason are faster and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, nicersmoother, smoother, older
faster, nicersmoother, smoother, older
winner_aspects_string1 faster and older
smth wrong in answer generation, please try again
511 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'xbox,ps2', 'or', 'gamecube?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'xbox', ',', 'ps2', 'or', 'gamecube', '?']
or simple split_sent 6
ps2 gamecube
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps2', 'objectB': 'gamecube', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'nicersmoother', 'smoother', 'older'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
self predicate  b
answer begin:  The gamecube is b than ps2. The reason are faster and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, nicersmoother, smoother, older
faster, nicersmoother, smoother, older
winner_aspects_string1 faster and older
smth wrong in answer generation, please try again
512 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['xbox', '360', 'vs.', 'other', 'xbox', 'versions', 'or', 'gamecube', 'or', 'ps2?']
['gamecube']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['xbox', '360', 'vs.', 'other', 'xbox', 'versions', 'or', 'gamecube', 'or', 'ps2', '?']
or simple split_sent 6
versions gamecube
aspects []
weights []
get url
params {'objectA': 'versions', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['longer', 'faster', 'gameboy', 'colorn64'] ['more to offer', 'easier', 'earlier', 'animations']
2
winnder: versions  other: gamecube
acpect winner  longer and faster
acpect other  easier, more to offer and earlier
type  templates
winnder: versions  other: gamecube
acpect winner  longer and faster
acpect other  easier, more to offer and earlier
self predicate  better
answer begin:  The versions is better than gamecube. The reason are longer and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
longer, faster, gameboy, colorn64
longer, faster, gameboy, colorn64
winner_aspects_string1 longer and faster
looser_aspects_string1 easier, more to offer and earlier
make response  Looks like versions is better, because of longer and faster. Gamecube is easier, more to offer and earlier.
gen templates 3 Looks like versions is better, because of longer and faster. Gamecube is easier, more to offer and earlier.
full answer  Looks like versions is better, because of longer and faster. Gamecube is easier, more to offer and earlier.
Looks like versions is better, because of longer and faster. Gamecube is easier, more to offer and earlier.
513 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'you', 'think', 'gamecube', 'has', 'better', 'graphics', 'than', 'ps2??', 'i', 'realised', 'that.?']
['gamecube', 'ps2??']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'ps2', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['higher', 'nicersmoother', 'older', 'game'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  higher and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  higher and older
acpect other  
self predicate  better
answer begin:  The gamecube is better than ps2. The reason are higher and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, nicersmoother, older, game
higher, nicersmoother, older, game
winner_aspects_string1 higher and older
smth wrong in answer generation, please try again
514 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wii,', 'ps2', 'or', 'gamecube...what', 'you', 'recommend?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Wii', ',', 'PS2', 'or', 'GameCube', '...', 'what', 'you', 'recommend', '?']
or simple split_sent 3
PS2 GameCube
aspects []
weights []
get url
params {'objectA': 'PS2', 'objectB': 'GameCube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'nicersmoother', 'smoother', 'older'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
self predicate  better
answer begin:  The gamecube is better than ps2. The reason are faster and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, nicersmoother, smoother, older
faster, nicersmoother, smoother, older
winner_aspects_string1 faster and older
smth wrong in answer generation, please try again
515 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'game', 'system', 'should', 'i', 'get?', 'ps2,', 'gamecube,', 'or', 'xbox?']
['gamecube,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'Game', 'System', 'should', 'I', 'get', '?', 'PS2', ',', 'GameCube', ',', 'or', 'Xbox', '?']
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'Xbox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'faster', 'larger', 'wii'] ['price', 'games', 'easier', 'lighter']
2
winnder: xbox  other: gamecube
acpect winner  greater, larger and faster
acpect other  lighter and easier
type  templates
winnder: xbox  other: gamecube
acpect winner  greater, larger and faster
acpect other  lighter and easier
self predicate  better
answer begin:  The xbox is better than gamecube. The reason are greater, larger and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, larger, wii
greater, faster, larger, wii
winner_aspects_string1 greater, larger and faster
looser_aspects_string1 lighter and easier
make response  After much thought, I realized that  xbox is better, because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
gen templates 3 After much thought, I realized that  xbox is better, because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
full answer  After much thought, I realized that  xbox is better, because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
After much thought, I realized that  xbox is better, because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
516 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
gen templates 3 After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
full answer  After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
517 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'ps2', 'or', 'gamecube?']
['ps2']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'ps2', 'or', 'gamecube', '?']
or simple split_sent 4
ps2 gamecube
aspects ['better']
weights [1]
get url
params {'objectA': 'ps2', 'objectB': 'gamecube', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['faster', 'nicersmoother', 'smoother', 'older'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
self predicate  better
answer begin:  The gamecube is better than ps2. The reason are faster and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, nicersmoother, smoother, older
faster, nicersmoother, smoother, older
winner_aspects_string1 faster and older
smth wrong in answer generation, please try again
518 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better,', 'ps2,', 'xbox', 'or', 'gamecube?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 's', 'better', ',', 'PS2', ',', 'XBOX', 'or', 'GAMECUBE', '?']
or simple split_sent 7
XBOX GAMECUBE
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'XBOX', 'objectB': 'GAMECUBE', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['price', 'games', 'lighter', 'easier'] ['greater', 'easier to', 'wii', 'respects']
2
winnder: gamecube  other: xbox
acpect winner  lighter and easier
acpect other  greater and easier to
type  templates
winnder: gamecube  other: xbox
acpect winner  lighter and easier
acpect other  greater and easier to
self predicate  b
answer begin:  The gamecube is b than xbox. The reason are lighter and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
price, games, lighter, easier
price, games, lighter, easier
winner_aspects_string1 lighter and easier
looser_aspects_string1 greater and easier to
make response  Looks like gamecube is better, because of lighter and easier. But it will be useful for you to know that xbox is greater and easier to.
gen templates 3 Looks like gamecube is better, because of lighter and easier. But it will be useful for you to know that xbox is greater and easier to.
full answer  Looks like gamecube is better, because of lighter and easier. But it will be useful for you to know that xbox is greater and easier to.
Looks like gamecube is better, because of lighter and easier. But it will be useful for you to know that xbox is greater and easier to.
519 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'best:', 'ps3,', 'xbox', '360,', 'or', 'revolution?', 'ps2,', 'xbox,', 'or', 'gamecube?', 'psp', 'or', 'ds?']
['gamecube?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'best', ':', 'PS3', ',', 'XBox', '360', ',', 'or', 'Revolution', '?', 'PS2', ',', 'XBox', ',', 'or', 'Gamecube', '?', 'PSP', 'or', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'Revolution', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'nintendo', 'greater', 'imho'] []
2
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
type  templates
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
self predicate  better
answer begin:  The revolution is better than gamecube. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
full answer  It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
520 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['are', 'there', 'any', 'qualification', 'differences', 'between', 'michigan', 'and', 'virginia,', 'for', 'being', 'a', 'residential', 'home', 'appraiser?']
['michigan', 'virginia,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'michigan', 'objectB': 'virginia', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['tier', 'easier to get a top recruit to michigan', 'west', 'size'] ['greater', 'faster', 'easier to generate a big white swing in virginia', 'flightier']
2
winnder: virginia  other: michigan
acpect winner  easier to get a top recruit to michigan
acpect other  greater, easier to generate a big white swing in virginia and faster
type  templates
winnder: virginia  other: michigan
acpect winner  easier to get a top recruit to michigan
acpect other  greater, easier to generate a big white swing in virginia and faster
self predicate  better
answer begin:  The virginia is better than michigan. The reason are easier to get a top recruit to michigan. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
tier, easier to get a top recruit to michigan, west, size
tier, easier to get a top recruit to michigan, west, size
winner_aspects_string1  and easier to get a top recruit to michigan
looser_aspects_string1 greater, easier to generate a big white swing in virginia and faster
make response  Looks like virginia is better, because of  and easier to get a top recruit to michigan. But it will be useful for you to know that michigan is greater, easier to generate a big white swing in virginia and faster.
gen templates 3 Looks like virginia is better, because of  and easier to get a top recruit to michigan. But it will be useful for you to know that michigan is greater, easier to generate a big white swing in virginia and faster.
full answer  Looks like virginia is better, because of  and easier to get a top recruit to michigan. But it will be useful for you to know that michigan is greater, easier to generate a big white swing in virginia and faster.
Looks like virginia is better, because of  and easier to get a top recruit to michigan. But it will be useful for you to know that michigan is greater, easier to generate a big white swing in virginia and faster.
521 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'different', 'between', 'windows', 'xp', '&', 'windows', 'vista?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
522 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'windows', 'vista', 'beta', '2', 'better', 'than', 'windows', 'xp?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
523 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'windows', 'xp', 'and', 'windows', 'vista?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
524 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'differences', 'between', 'windows', 'xp', 'and', 'windows', 'vista?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
525 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'worse', 'beer', 'or', 'soda?']
['beer']
['worse']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'worse', 'beer', 'or', 'soda', '?']
or simple split_sent 4
beer soda
aspects ['worse']
weights [1]
get url
params {'objectA': 'beer', 'objectB': 'soda', 'fs': 'true', 'aspect1': 'worse', 'weight1': 1}
1
create fro json predicates ['worse']
create fro json self.predicates worse
aspects  ['better for you', 'healthier', 'greater', 'worse for you'] ['person', 'easier to break in general', 'easier for a soda to become a bottle bomb', 'better for your paddy s day breakfast']
2
winnder: beer  other: soda
acpect winner  healthier, greater and better for you
acpect other  easier to break in general, easier for a soda to become a bottle bomb and better for your paddy s day breakfast
type  templates
winnder: beer  other: soda
acpect winner  healthier, greater and better for you
acpect other  easier to break in general, easier for a soda to become a bottle bomb and better for your paddy s day breakfast
self predicate  worse
answer begin:  The beer is worse than soda. The reason are healthier, greater and better for you. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for you, healthier, greater, worse for you
better for you, healthier, greater, worse for you
winner_aspects_string1 healthier, greater and better for you
looser_aspects_string1 easier to break in general, easier for a soda to become a bottle bomb and better for your paddy s day breakfast
make response  I would prefer to use beer because of healthier, greater and better for you. But i should tell you that soda is easier to break in general, easier for a soda to become a bottle bomb and better for your paddy s day breakfast.
gen templates 3 I would prefer to use beer because of healthier, greater and better for you. But i should tell you that soda is easier to break in general, easier for a soda to become a bottle bomb and better for your paddy s day breakfast.
full answer  I would prefer to use beer because of healthier, greater and better for you. But i should tell you that soda is easier to break in general, easier for a soda to become a bottle bomb and better for your paddy s day breakfast.
I would prefer to use beer because of healthier, greater and better for you. But i should tell you that soda is easier to break in general, easier for a soda to become a bottle bomb and better for your paddy s day breakfast.
526 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'worse', 'for', 'you,', 'soda', 'or', 'beer?']
[]
['worse']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'worse', 'for', 'you', ',', 'soda', 'or', 'beer', '?']
or simple split_sent 7
soda beer
aspects ['worse']
weights [1]
get url
params {'objectA': 'soda', 'objectB': 'beer', 'fs': 'true', 'aspect1': 'worse', 'weight1': 1}
1
create fro json predicates ['worse']
create fro json self.predicates worse
aspects  ['lighter', 'better for you', 'faster', 'worse for you'] ['carbonation', 'salty', 'aftertaste', 'easier to break in general']
2
winnder: beer  other: soda
acpect winner  lighter, faster and better for you
acpect other  easier to break in general
type  templates
winnder: beer  other: soda
acpect winner  lighter, faster and better for you
acpect other  easier to break in general
self predicate  worse
answer begin:  The beer is worse than soda. The reason are lighter, faster and better for you. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, better for you, faster, worse for you
lighter, better for you, faster, worse for you
winner_aspects_string1 lighter, faster and better for you
looser_aspects_string1  and easier to break in general
make response  I would prefer to use beer because of lighter, faster and better for you. Soda is  and easier to break in general.
gen templates 3 I would prefer to use beer because of lighter, faster and better for you. Soda is  and easier to break in general.
full answer  I would prefer to use beer because of lighter, faster and better for you. Soda is  and easier to break in general.
I would prefer to use beer because of lighter, faster and better for you. Soda is  and easier to break in general.
527 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'for', 'you', 'beer', 'or', 'soda?']
['beer']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'for', 'you', 'beer', 'or', 'soda', '?']
or simple split_sent 6
beer soda
aspects ['better']
weights [1]
get url
params {'objectA': 'beer', 'objectB': 'soda', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['better for you', 'healthier', 'greater', 'faster'] ['person', 'better for your paddy s day breakfast', 'better for his teeth to drink beer', 'lemonade']
2
winnder: beer  other: soda
acpect winner  healthier, greater and better for you
acpect other  better for your paddy s day breakfast and better for his teeth to drink beer
type  templates
winnder: beer  other: soda
acpect winner  healthier, greater and better for you
acpect other  better for your paddy s day breakfast and better for his teeth to drink beer
self predicate  better
answer begin:  The beer is better than soda. The reason are healthier, greater and better for you. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
better for you, healthier, greater, faster
better for you, healthier, greater, faster
winner_aspects_string1 healthier, greater and better for you
looser_aspects_string1 better for your paddy s day breakfast and better for his teeth to drink beer
make response  It's simple! Beer is better, because of healthier, greater and better for you. But you should know that soda is better for your paddy s day breakfast and better for his teeth to drink beer.
gen templates 3 It's simple! Beer is better, because of healthier, greater and better for you. But you should know that soda is better for your paddy s day breakfast and better for his teeth to drink beer.
full answer  It's simple! Beer is better, because of healthier, greater and better for you. But you should know that soda is better for your paddy s day breakfast and better for his teeth to drink beer.
It's simple! Beer is better, because of healthier, greater and better for you. But you should know that soda is better for your paddy s day breakfast and better for his teeth to drink beer.
528 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'dietary', 'drink,', 'soda', 'pop', 'or', 'beer?']
['soda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'dietary', 'drink', ',', 'soda', 'pop', 'or', 'beer', '?']
or simple split_sent 9
pop beer
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'pop', 'objectB': 'beer', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'better for you', 'lighter', 'faster'] ['easier to put such awesome brews away in storage', 'easier', 'better for me']
2
winnder: beer  other: pop
acpect winner  lighter, greater and better for you
acpect other  easier to put such awesome brews away in storage, better for me and easier
type  templates
winnder: beer  other: pop
acpect winner  lighter, greater and better for you
acpect other  easier to put such awesome brews away in storage, better for me and easier
self predicate  b
answer begin:  The beer is b than pop. The reason are lighter, greater and better for you. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, better for you, lighter, faster
greater, better for you, lighter, faster
winner_aspects_string1 lighter, greater and better for you
looser_aspects_string1 easier to put such awesome brews away in storage, better for me and easier
make response  I would prefer to use beer because of lighter, greater and better for you. Pop is easier to put such awesome brews away in storage, better for me and easier.
gen templates 3 I would prefer to use beer because of lighter, greater and better for you. Pop is easier to put such awesome brews away in storage, better for me and easier.
full answer  I would prefer to use beer because of lighter, greater and better for you. Pop is easier to put such awesome brews away in storage, better for me and easier.
I would prefer to use beer because of lighter, greater and better for you. Pop is easier to put such awesome brews away in storage, better for me and easier.
529 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['should', 'i', 'make', 'an', 'italian', 'cream', 'soda', 'or', 'a', 'root', 'beer', 'float?']
['soda', 'beer']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'soda', 'objectB': 'beer', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'better for you', 'faster', 'worse for you'] ['carbonation', 'salty', 'aftertaste', 'easier to break in general']
2
winnder: beer  other: soda
acpect winner  lighter, faster and better for you
acpect other  easier to break in general
type  templates
winnder: beer  other: soda
acpect winner  lighter, faster and better for you
acpect other  easier to break in general
self predicate  better
answer begin:  The beer is better than soda. The reason are lighter, faster and better for you. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, better for you, faster, worse for you
lighter, better for you, faster, worse for you
winner_aspects_string1 lighter, faster and better for you
looser_aspects_string1  and easier to break in general
make response  It's simple! Beer is better, because of lighter, faster and better for you. Soda is  and easier to break in general.
gen templates 3 It's simple! Beer is better, because of lighter, faster and better for you. Soda is  and easier to break in general.
full answer  It's simple! Beer is better, because of lighter, faster and better for you. Soda is  and easier to break in general.
It's simple! Beer is better, because of lighter, faster and better for you. Soda is  and easier to break in general.
530 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'something', 'different', 'from', 'a', 'ps2', 'vs.', 'a', 'ps3?']
['ps2']
[]
len(objects) 1
We try to use spacy
comp_elem vs.
tokens ['what', 'is', 'something', 'different', 'from', 'a', 'ps2', 'vs.', 'a', 'ps3', '?']
or simple split_sent 7
ps2 a
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'older', 'easier to emulate using only software'] ['spaceand', 'bonus', 'gameboy', 'player']
2
winnder: a  other: ps2
acpect winner  easier, older and easier to emulate using only software
acpect other  
type  templates
winnder: a  other: ps2
acpect winner  easier, older and easier to emulate using only software
acpect other  
self predicate  better
answer begin:  The a is better than ps2. The reason are easier, older and easier to emulate using only software. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, older, easier to emulate using only software
easier, smoother, older, easier to emulate using only software
winner_aspects_string1 easier, older and easier to emulate using only software
smth wrong in answer generation, please try again
531 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'is', 'different', 'about', 'the', 'new', 'ps3', 'compared', 'to', 'ps2?']
['ps3']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'easier to use', 'easier', 'lighter'] ['cell', 'easier to setup', 'bigger', 'version']
winnder: and  other: ps3
acpect winner  lighter, easier to use and easier
acpect other  bigger and easier to setup
type  templates
ps3 has undeniable advantages. They are lighter, easier to use and easier.
532 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'ps2', 'or', 'x', 'box,', 'xbox', '360', 'or', 'ps3?']
['ps2']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'ps2', 'or', 'x', 'box', ',', '    ', 'xbox', '360', 'or', 'ps3', '?']
or simple split_sent 4
ps2 x
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps2', 'objectB': 'x', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['beat', 'faster', 'easier', 'greater'] ['bigger', 'box', 'cube', 'booger']
2
winnder: x  other: ps2
acpect winner  faster, greater and easier
acpect other  bigger
type  templates
winnder: x  other: ps2
acpect winner  faster, greater and easier
acpect other  bigger
self predicate  b
answer begin:  The x is b than ps2. The reason are faster, greater and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
beat, faster, easier, greater
beat, faster, easier, greater
winner_aspects_string1 faster, greater and easier
looser_aspects_string1  and bigger
make response  After much thought, I realized that  x is better, because of faster, greater and easier. But it will be useful for you to know that ps2 is  and bigger.
gen templates 3 After much thought, I realized that  x is better, because of faster, greater and easier. But it will be useful for you to know that ps2 is  and bigger.
full answer  After much thought, I realized that  x is better, because of faster, greater and easier. But it will be useful for you to know that ps2 is  and bigger.
After much thought, I realized that  x is better, because of faster, greater and easier. But it will be useful for you to know that ps2 is  and bigger.
533 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'do', 'you', 'like', 'the', 'best', 'ps1,', 'ps2,', 'ps3,', 'xbox,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'one', 'do', 'you', 'like', 'the', 'best', 'PS1', ',', 'PS2', ',', 'PS3', ',', 'XBOX', ',', 'or', 'XBOX', '360', '?']
We can't recognize objects for comparision
534 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['how', 'much', 'better', 'will', 'be', 'the', 'ps3', 'than', 'ps2?']
['ps3']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'easier to use', 'easier', 'lighter'] ['cell', 'easier to setup', 'bigger', 'version']
winnder: and  other: ps3
acpect winner  lighter, easier to use and easier
acpect other  bigger and easier to setup
type  templates
ps3 has undeniable advantages. They are lighter, easier to use and easier.
535 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['u', 'must', 'have', 'seen', 'ps3', 'will', 'all', 'ps2game', 'run', 'on', 'ps3&vice', 'versa.', 'which', 'is', 'best', 'console', 'to', 'buy.?']
['ps3', 'ps2game']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'ps2game', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: ps2game  other: ps3
acpect winner  
acpect other  
type  templates
winnder: ps2game  other: ps3
acpect winner  
acpect other  
self predicate  better
answer begin:  The ps2game is better than ps3. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer ps2game than ps3.
full answer  I would prefer ps2game than ps3.
I would prefer ps2game than ps3.
536 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better--ps2', 'or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', '--', 'PS2', 'or', 'PS3', '?']
or simple split_sent 5
PS2 PS3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PS2', 'objectB': 'PS3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'easier', 'simpler', 'easier to emulate using only software'] ['greater', 'larger', 'developer', 'x360']
2
winnder: ps3  other: ps2
acpect winner  faster, simpler and easier to emulate using only software
acpect other  greater and larger
type  templates
winnder: ps3  other: ps2
acpect winner  faster, simpler and easier to emulate using only software
acpect other  greater and larger
self predicate  b
answer begin:  The ps3 is b than ps2. The reason are faster, simpler and easier to emulate using only software. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, simpler, easier to emulate using only software
faster, easier, simpler, easier to emulate using only software
winner_aspects_string1 faster, simpler and easier to emulate using only software
looser_aspects_string1 greater and larger
make response  It's simple! Ps3 is better, because of faster, simpler and easier to emulate using only software. Ps2 is greater and larger.
gen templates 3 It's simple! Ps3 is better, because of faster, simpler and easier to emulate using only software. Ps2 is greater and larger.
full answer  It's simple! Ps3 is better, because of faster, simpler and easier to emulate using only software. Ps2 is greater and larger.
It's simple! Ps3 is better, because of faster, simpler and easier to emulate using only software. Ps2 is greater and larger.
537 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'difference', 'between', 'ps2', 'and', 'ps3?']
['ps2']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'smoother', 'lighter'] ['graphics', 'igps', 'intel', 'greater']
winnder: and  other: ps2
acpect winner  lighter, easier and faster
acpect other  greater
type  templates
ps2 has undeniable advantages. They are lighter, easier and faster.
538 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['to', 'people', 'who', 'have', 'seen', 'a', 'ps3,', 'how', 'much', 'better', 'are', 'the', 'graphics', 'than', 'ps2?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
539 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'want', 'to', 'get', 'a', 'new', 'console', 'but', 'should', 'i', 'get', 'the', 'cheaper', 'ps2', 'and', 'buy', 'more', 'games', 'or', 'the', 'more', 'expensive', 'ps3?']
['ps2']
['cheaper']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I', 'want', 'to', 'get', 'a', 'new', 'console', 'but', 'should', 'i', 'get', 'the', 'cheaper', 'Ps2', 'and', 'buy', 'more', 'games', 'or', 'the', 'more', 'expensive', 'Ps3', '?']
or simple split_sent 18
games the
aspects ['cheaper']
weights [1]
get url
params {'objectA': 'games', 'objectB': 'the', 'fs': 'true', 'aspect1': 'cheaper', 'weight1': 1}
1
create fro json predicates ['cheaper']
create fro json self.predicates cheaper
aspects  ['greater', 'easier to learn experience', 'higher', 'easier'] ['hunger', 'smoother', 'easier to pick up', 'funnier']
2
winnder: the  other: games
acpect winner  greater, higher and easier to learn experience
acpect other  funnier and easier to pick up
type  templates
winnder: the  other: games
acpect winner  greater, higher and easier to learn experience
acpect other  funnier and easier to pick up
self predicate  cheaper
answer begin:  The the is cheaper than games. The reason are greater, higher and easier to learn experience. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier to learn experience, higher, easier
greater, easier to learn experience, higher, easier
winner_aspects_string1 greater, higher and easier to learn experience
looser_aspects_string1 funnier and easier to pick up
make response  I would prefer to use the because of greater, higher and easier to learn experience. Games is funnier and easier to pick up.
gen templates 3 I would prefer to use the because of greater, higher and easier to learn experience. Games is funnier and easier to pick up.
full answer  I would prefer to use the because of greater, higher and easier to learn experience. Games is funnier and easier to pick up.
I would prefer to use the because of greater, higher and easier to learn experience. Games is funnier and easier to pick up.
540 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'can', 'the', 'ps3', 'do', 'compared', 'to', 'the', 'ps2,', 'psp', 'and', 'the', 'xbox360?']
['ps3', 'ps2,', 'psp']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'ps2', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'smoother', 'easier to develop for'] ['greater', 'x360', 'simpler', 'number']
2
winnder: ps3  other: ps2
acpect winner  faster, easier to develop for and easier
acpect other  greater and simpler
type  templates
winnder: ps3  other: ps2
acpect winner  faster, easier to develop for and easier
acpect other  greater and simpler
self predicate  better
answer begin:  The ps3 is better than ps2. The reason are faster, easier to develop for and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, smoother, easier to develop for
faster, easier, smoother, easier to develop for
winner_aspects_string1 faster, easier to develop for and easier
looser_aspects_string1 greater and simpler
make response  After much thought, I realized that  ps3 is better, because of faster, easier to develop for and easier. But it will be useful for you to know that ps2 is greater and simpler.
gen templates 3 After much thought, I realized that  ps3 is better, because of faster, easier to develop for and easier. But it will be useful for you to know that ps2 is greater and simpler.
full answer  After much thought, I realized that  ps3 is better, because of faster, easier to develop for and easier. But it will be useful for you to know that ps2 is greater and simpler.
After much thought, I realized that  ps3 is better, because of faster, easier to develop for and easier. But it will be useful for you to know that ps2 is greater and simpler.
541 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'with', 'the', 'ps2', 'and', 'the', 'ps3?']
['ps2']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'smoother', 'lighter'] ['graphics', 'igps', 'intel', 'greater']
winnder: and  other: ps2
acpect winner  lighter, easier and faster
acpect other  greater
type  templates
ps2 has undeniable advantages. They are lighter, easier and faster.
542 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'allready', 'have', 'a', 'ps2', 'should', 'i', 'buy', 'the', 'ps3', 'or', 'the', 'nintendo', 'wii?']
['ps2', 'ps3']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'ps3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'easier to emulate using only software', 'older'] ['greater', 'x360', 'larger', 'developer']
2
winnder: ps3  other: ps2
acpect winner  faster, older and easier to emulate using only software
acpect other  greater and larger
type  templates
winnder: ps3  other: ps2
acpect winner  faster, older and easier to emulate using only software
acpect other  greater and larger
self predicate  better
answer begin:  The ps3 is better than ps2. The reason are faster, older and easier to emulate using only software. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, easier to emulate using only software, older
faster, easier, easier to emulate using only software, older
winner_aspects_string1 faster, older and easier to emulate using only software
looser_aspects_string1 greater and larger
make response  I would prefer to use ps3 because of faster, older and easier to emulate using only software. But you should know that ps2 is greater and larger.
gen templates 3 I would prefer to use ps3 because of faster, older and easier to emulate using only software. But you should know that ps2 is greater and larger.
full answer  I would prefer to use ps3 because of faster, older and easier to emulate using only software. But you should know that ps2 is greater and larger.
I would prefer to use ps3 because of faster, older and easier to emulate using only software. But you should know that ps2 is greater and larger.
543 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  I came to the conclusion that psp is better, because of  and stronger. But you should know that gamecube is  and faster.
gen templates 3 I came to the conclusion that psp is better, because of  and stronger. But you should know that gamecube is  and faster.
full answer  I came to the conclusion that psp is better, because of  and stronger. But you should know that gamecube is  and faster.
I came to the conclusion that psp is better, because of  and stronger. But you should know that gamecube is  and faster.
544 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'a', 'ps2', 'or', 'a', 'ps3?']
['ps2']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'a', 'PS2', 'or', 'a', 'PS3', '?']
or simple split_sent 5
PS2 a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PS2', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'smoother', 'older', 'easier to emulate using only software'] ['spaceand', 'bonus', 'gameboy', 'player']
2
winnder: a  other: ps2
acpect winner  easier, older and easier to emulate using only software
acpect other  
type  templates
winnder: a  other: ps2
acpect winner  easier, older and easier to emulate using only software
acpect other  
self predicate  b
answer begin:  The a is b than ps2. The reason are easier, older and easier to emulate using only software. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, older, easier to emulate using only software
easier, smoother, older, easier to emulate using only software
winner_aspects_string1 easier, older and easier to emulate using only software
smth wrong in answer generation, please try again
545 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'is', 'the', 'new', 'ps3', 'gonna', 'be', 'better', 'than', 'the', 'ps2?']
['ps3']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'easier to use', 'easier', 'lighter'] ['cell', 'easier to setup', 'bigger', 'version']
winnder: and  other: ps3
acpect winner  lighter, easier to use and easier
acpect other  bigger and easier to setup
type  templates
ps3 has undeniable advantages. They are lighter, easier to use and easier.
546 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'best:', 'ps3,', 'xbox', '360,', 'or', 'revolution?', 'ps2,', 'xbox,', 'or', 'gamecube?', 'psp', 'or', 'ds?']
['gamecube?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'best', ':', 'PS3', ',', 'XBox', '360', ',', 'or', 'Revolution', '?', 'PS2', ',', 'XBox', ',', 'or', 'Gamecube', '?', 'PSP', 'or', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'Revolution', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'nintendo', 'greater', 'imho'] []
2
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
type  templates
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
self predicate  better
answer begin:  The revolution is better than gamecube. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
full answer  It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
547 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'an', 'american/metal', 'clarinet', 'and', 'a', 'wooden', 'clarinet', 'and', 'a', 'plastic', 'clarinet?']
['clarinet', 'clarinet', 'plastic']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'clarinet', 'objectB': 'clarinet', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: clarinet  other: clarinet
acpect winner  
acpect other  
type  templates
winnder: clarinet  other: clarinet
acpect winner  
acpect other  
self predicate  better
answer begin:  The clarinet is better than clarinet. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer clarinet than clarinet.
full answer  I would prefer clarinet than clarinet.
I would prefer clarinet than clarinet.
548 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'advantage', 'of', 'wood', 'blind?', 'compare', 'to', 'plastic', 'made?']
['wood', 'plastic']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wood', 'objectB': 'plastic', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'denser', 'warmer', 'cheaper'] ['stronger', 'easier to clean', 'greener', 'easier to handle']
2
winnder: wood  other: plastic
acpect winner  faster, warmer and cheaper
acpect other  easier to clean, stronger and easier to handle
type  templates
winnder: wood  other: plastic
acpect winner  faster, warmer and cheaper
acpect other  easier to clean, stronger and easier to handle
self predicate  better
answer begin:  The wood is better than plastic. The reason are faster, warmer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, denser, warmer, cheaper
faster, denser, warmer, cheaper
winner_aspects_string1 faster, warmer and cheaper
looser_aspects_string1 easier to clean, stronger and easier to handle
make response  I would prefer to use wood because of faster, warmer and cheaper. But i should tell you that plastic is easier to clean, stronger and easier to handle.
gen templates 3 I would prefer to use wood because of faster, warmer and cheaper. But i should tell you that plastic is easier to clean, stronger and easier to handle.
full answer  I would prefer to use wood because of faster, warmer and cheaper. But i should tell you that plastic is easier to clean, stronger and easier to handle.
I would prefer to use wood because of faster, warmer and cheaper. But i should tell you that plastic is easier to clean, stronger and easier to handle.
549 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['do', 'you', 'prefer', 'to', 'knit', 'with', 'metal,', 'wood', 'or', 'plastic', 'needless?']
['wood', 'plastic']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wood', 'objectB': 'plastic', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'denser', 'warmer', 'cheaper'] ['stronger', 'easier to clean', 'greener', 'easier to handle']
2
winnder: wood  other: plastic
acpect winner  faster, warmer and cheaper
acpect other  easier to clean, stronger and easier to handle
type  templates
winnder: wood  other: plastic
acpect winner  faster, warmer and cheaper
acpect other  easier to clean, stronger and easier to handle
self predicate  better
answer begin:  The wood is better than plastic. The reason are faster, warmer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, denser, warmer, cheaper
faster, denser, warmer, cheaper
winner_aspects_string1 faster, warmer and cheaper
looser_aspects_string1 easier to clean, stronger and easier to handle
make response  It's simple! Wood is better, because of faster, warmer and cheaper. But you should know that plastic is easier to clean, stronger and easier to handle.
gen templates 3 It's simple! Wood is better, because of faster, warmer and cheaper. But you should know that plastic is easier to clean, stronger and easier to handle.
full answer  It's simple! Wood is better, because of faster, warmer and cheaper. But you should know that plastic is easier to clean, stronger and easier to handle.
It's simple! Wood is better, because of faster, warmer and cheaper. But you should know that plastic is easier to clean, stronger and easier to handle.
550 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'so', 'different', 'between', 'baseball', 'and', 'softball', 'and', 'how', 'are', 'they', 'similar?']
['baseball', 'softball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'softball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'longer', 'hevier', 'balll'] ['safer', 'softer', 'lighter', 'bigger']
2
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  lighter, safer and softer
type  templates
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  lighter, safer and softer
self predicate  better
answer begin:  The baseball is better than softball. The reason are greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, hevier, balll
greater, longer, hevier, balll
winner_aspects_string1 greater and longer
looser_aspects_string1 lighter, safer and softer
make response  I would prefer to use baseball because of greater and longer. Softball is lighter, safer and softer.
gen templates 3 I would prefer to use baseball because of greater and longer. Softball is lighter, safer and softer.
full answer  I would prefer to use baseball because of greater and longer. Softball is lighter, safer and softer.
I would prefer to use baseball because of greater and longer. Softball is lighter, safer and softer.
551 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['is', 'there', 'a', 'difference', 'between', 'baseball', 'and', 'softball', '??']
['baseball', 'softball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'softball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'longer', 'hevier', 'balll'] ['safer', 'softer', 'lighter', 'bigger']
2
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  lighter, safer and softer
type  templates
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  lighter, safer and softer
self predicate  better
answer begin:  The baseball is better than softball. The reason are greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, hevier, balll
greater, longer, hevier, balll
winner_aspects_string1 greater and longer
looser_aspects_string1 lighter, safer and softer
make response  After much thought, I realized that  baseball is better, because of greater and longer. Softball is lighter, safer and softer.
gen templates 3 After much thought, I realized that  baseball is better, because of greater and longer. Softball is lighter, safer and softer.
full answer  After much thought, I realized that  baseball is better, because of greater and longer. Softball is lighter, safer and softer.
After much thought, I realized that  baseball is better, because of greater and longer. Softball is lighter, safer and softer.
552 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'is', 'easier', 'to', 'learn,', 'baseball', 'or', 'softball?']
['baseball']
['easier']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'is', 'easier', 'to', 'learn', ',', 'baseball', 'or', 'softball', '?']
or simple split_sent 8
baseball softball
aspects ['easier']
weights [1]
get url
params {'objectA': 'baseball', 'objectB': 'softball', 'fs': 'true', 'aspect1': 'easier', 'weight1': 1}
1
create fro json predicates ['easier']
create fro json self.predicates easier
aspects  ['greater', 'longer', 'larger', 'hevier'] ['safer', 'softer', 'lighter', 'bigger']
2
winnder: baseball  other: softball
acpect winner  greater, larger and longer
acpect other  lighter, safer and softer
type  templates
winnder: baseball  other: softball
acpect winner  greater, larger and longer
acpect other  lighter, safer and softer
self predicate  easier
answer begin:  The baseball is easier than softball. The reason are greater, larger and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, larger, hevier
greater, longer, larger, hevier
winner_aspects_string1 greater, larger and longer
looser_aspects_string1 lighter, safer and softer
make response  It's simple! Baseball is better, because of greater, larger and longer. But it will be useful for you to know that softball is lighter, safer and softer.
gen templates 3 It's simple! Baseball is better, because of greater, larger and longer. But it will be useful for you to know that softball is lighter, safer and softer.
full answer  It's simple! Baseball is better, because of greater, larger and longer. But it will be useful for you to know that softball is lighter, safer and softer.
It's simple! Baseball is better, because of greater, larger and longer. But it will be useful for you to know that softball is lighter, safer and softer.
553 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'softball', 'and', 'baseball?']
['softball']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'softball', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'longer', 'easier', 'easier to work with'] ['greater', 'better for it', 'lighter', 'higher']
winnder: and  other: softball
acpect winner  longer, easier to work with and quicker
acpect other  lighter, greater and higher
type  templates
softball has undeniable advantages. They are longer, easier to work with and quicker.
554 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'major', 'differences', 'between', 'baseball', 'and', 'softball?']
['baseball']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'baseball', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'faster', 'longer', 'basketball'] ['greater', 'easier to swing fast', 'easier', 'sport']
winnder: and  other: baseball
acpect winner  faster, longer and bigger
acpect other  greater, easier to swing fast and easier
type  templates
baseball has undeniable advantages. They are faster, longer and bigger.
555 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'is', 'better...softball', 'or', 'baseball?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'think', 'is', 'better', '...', 'softball', 'or', 'baseball', '?']
or simple split_sent 8
softball baseball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'softball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to hit', 'bigger', 'easier', 'girls'] ['greater', 'longer', 'larger', 'hevier']
2
winnder: softball  other: baseball
acpect winner  easier, easier to hit and bigger
acpect other  greater, larger and longer
type  templates
winnder: softball  other: baseball
acpect winner  easier, easier to hit and bigger
acpect other  greater, larger and longer
self predicate  b
answer begin:  The softball is b than baseball. The reason are easier, easier to hit and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to hit, bigger, easier, girls
easier to hit, bigger, easier, girls
winner_aspects_string1 easier, easier to hit and bigger
looser_aspects_string1 greater, larger and longer
make response  It's simple! Softball is better, because of easier, easier to hit and bigger. But i should tell you that baseball is greater, larger and longer.
gen templates 3 It's simple! Softball is better, because of easier, easier to hit and bigger. But i should tell you that baseball is greater, larger and longer.
full answer  It's simple! Softball is better, because of easier, easier to hit and bigger. But i should tell you that baseball is greater, larger and longer.
It's simple! Softball is better, because of easier, easier to hit and bigger. But i should tell you that baseball is greater, larger and longer.
556 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['softball', 'vs', 'baseball,', 'differences?']
['softball', 'baseball,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'softball', 'objectB': 'baseball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'longer', 'hevier', 'balll'] ['easier to hit', 'bigger', 'easier', 'girls']
2
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
type  templates
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
self predicate  better
answer begin:  The baseball is better than softball. The reason are greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, hevier, balll
greater, longer, hevier, balll
winner_aspects_string1 greater and longer
looser_aspects_string1 easier, easier to hit and bigger
make response  It's simple! Baseball is better, because of greater and longer. But you should know that softball is easier, easier to hit and bigger.
gen templates 3 It's simple! Baseball is better, because of greater and longer. But you should know that softball is easier, easier to hit and bigger.
full answer  It's simple! Baseball is better, because of greater and longer. But you should know that softball is easier, easier to hit and bigger.
It's simple! Baseball is better, because of greater and longer. But you should know that softball is easier, easier to hit and bigger.
557 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'softball', 'and', 'baseball??']
['softball']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'softball', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'longer', 'easier', 'easier to work with'] ['greater', 'better for it', 'lighter', 'higher']
winnder: and  other: softball
acpect winner  longer, easier to work with and quicker
acpect other  lighter, greater and higher
type  templates
softball has undeniable advantages. They are longer, easier to work with and quicker.
558 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'thinks', 'playing', 'softball', 'is', 'harder', 'than', 'playing', 'baseball', 'or', 'are', 'they', 'the', 'same?']
['softball', 'baseball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'softball', 'objectB': 'baseball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'longer', 'hevier', 'balll'] ['easier to hit', 'bigger', 'easier', 'girls']
2
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
type  templates
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
self predicate  better
answer begin:  The baseball is better than softball. The reason are greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, hevier, balll
greater, longer, hevier, balll
winner_aspects_string1 greater and longer
looser_aspects_string1 easier, easier to hit and bigger
make response  I came to the conclusion that baseball is better, because of greater and longer. Softball is easier, easier to hit and bigger.
gen templates 3 I came to the conclusion that baseball is better, because of greater and longer. Softball is easier, easier to hit and bigger.
full answer  I came to the conclusion that baseball is better, because of greater and longer. Softball is easier, easier to hit and bigger.
I came to the conclusion that baseball is better, because of greater and longer. Softball is easier, easier to hit and bigger.
559 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['im', 'planning', 'to', 'buy', 'rubber', 'shoes,', 'which', 'is', 'better', 'adidas', 'or', 'nike?']
['rubber']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['i', 'm', 'planning', 'to', 'buy', 'rubber', 'shoes', ',', 'which', 'is', 'better', 'adidas', 'or', 'nike', '?']
or simple split_sent 12
adidas nike
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'adidas', 'objectB': 'nike', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['softer', 'respect', 'faster', 'pricier'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  faster, pricier and softer
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  faster, pricier and softer
acpect other  lighter
self predicate  b
answer begin:  The adidas is b than nike. The reason are faster, pricier and softer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
softer, respect, faster, pricier
softer, respect, faster, pricier
winner_aspects_string1 faster, pricier and softer
looser_aspects_string1  and lighter
make response  I would prefer to use adidas because of faster, pricier and softer. But it will be useful for you to know that nike is  and lighter.
gen templates 3 I would prefer to use adidas because of faster, pricier and softer. But it will be useful for you to know that nike is  and lighter.
full answer  I would prefer to use adidas because of faster, pricier and softer. But it will be useful for you to know that nike is  and lighter.
I would prefer to use adidas because of faster, pricier and softer. But it will be useful for you to know that nike is  and lighter.
560 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better?', 'nike', 'or', 'adidas?']
['nike']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', '?', 'Nike', 'or', 'Adidas', '?']
aspects ['better?']
weights [1]
get url
params {'objectA': 'Nike', 'objectB': 'Adidas', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['cheaper', 'softer', 'respect', 'cooler'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  better?
answer begin:  The adidas is better? than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, softer, respect, cooler
cheaper, softer, respect, cooler
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
gen templates 3 After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
full answer  After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
561 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what're", 'the', 'best', 'shoes', 'for', 'running?', 'adidas,', 'nike,', 'rebook,', 'puma..?']
['nike,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'nike', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'easier', 'faster', 'lighter'] ['longer', 'cooler', 'quicker', 'nike+']
winnder: nike  other: and
acpect winner  lighter, easier and faster
acpect other  longer and quicker
type  templates
nike has undeniable advantages. They are lighter, easier and faster.
562 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'cooler', 'brand,', 'nike', 'or', 'adidas?']
['nike']
['cooler']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'cooler', 'brand', ',', 'Nike', 'or', 'adidas', '?']
or simple split_sent 7
Nike adidas
aspects ['cooler']
weights [1]
get url
params {'objectA': 'Nike', 'objectB': 'adidas', 'fs': 'true', 'aspect1': 'cooler', 'weight1': 1}
1
create fro json predicates ['cooler']
create fro json self.predicates cooler
aspects  ['cheaper', 'cooler', 'softer', 'respect'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  cooler
answer begin:  The adidas is cooler than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, cooler, softer, respect
cheaper, cooler, softer, respect
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  I would prefer to use adidas because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
gen templates 3 I would prefer to use adidas because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
full answer  I would prefer to use adidas because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
I would prefer to use adidas because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
563 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'pair', 'of', 'soccer', 'cleats', 'available', '(most', 'comfortable,', 'and', '...you', 'know)?', 'nike', 'or', 'adidas?']
['nike']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'the', 'best', 'pair', 'of', 'Soccer', 'Cleats', 'available', '(', 'most', 'comfortable', ',', 'and', '...', 'you', 'know', ')', '?', 'Nike', 'or', 'Adidas', '?']
aspects []
weights []
get url
params {'objectA': 'Nike', 'objectB': 'Adidas', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['cheaper', 'cooler', 'softer', 'respect'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  better
answer begin:  The adidas is better than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, cooler, softer, respect
cheaper, cooler, softer, respect
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
gen templates 3 After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
full answer  After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
After much thought, I realized that  adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
564 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'sports', 'brand', 'is', 'better', 'adidas', 'or', 'nike?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'sports', 'brand', 'is', 'better', 'adidas', 'or', 'nike', '?']
or simple split_sent 6
adidas nike
aspects ['better']
weights [1]
get url
params {'objectA': 'adidas', 'objectB': 'nike', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['softer', 'respect', 'faster', 'better for people w wide feet'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  faster, better for people w wide feet and softer
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  faster, better for people w wide feet and softer
acpect other  lighter
self predicate  better
answer begin:  The adidas is better than nike. The reason are faster, better for people w wide feet and softer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
softer, respect, faster, better for people w wide feet
softer, respect, faster, better for people w wide feet
winner_aspects_string1 faster, better for people w wide feet and softer
looser_aspects_string1  and lighter
make response  I came to the conclusion that adidas is better, because of faster, better for people w wide feet and softer. But i should tell you that nike is  and lighter.
gen templates 3 I came to the conclusion that adidas is better, because of faster, better for people w wide feet and softer. But i should tell you that nike is  and lighter.
full answer  I came to the conclusion that adidas is better, because of faster, better for people w wide feet and softer. But i should tell you that nike is  and lighter.
I came to the conclusion that adidas is better, because of faster, better for people w wide feet and softer. But i should tell you that nike is  and lighter.
565 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["who's", 'best?', 'nike', 'or', 'adidas?']
['nike']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Who', "'s", 'best', '?', 'Nike', 'or', 'Adidas', '?']
aspects []
weights []
get url
params {'objectA': 'Nike', 'objectB': 'Adidas', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['cheaper', 'cooler', 'softer', 'respect'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  better
answer begin:  The adidas is better than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, cooler, softer, respect
cheaper, cooler, softer, respect
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  Looks like adidas is better, because of softer and cheaper. But i should tell you that nike is  and lighter.
gen templates 3 Looks like adidas is better, because of softer and cheaper. But i should tell you that nike is  and lighter.
full answer  Looks like adidas is better, because of softer and cheaper. But i should tell you that nike is  and lighter.
Looks like adidas is better, because of softer and cheaper. But i should tell you that nike is  and lighter.
566 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'wear', 'a', 'nike', 'or', 'adidas', 'to', 'go', 'to', 'stadium', '?']
['nike']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'wear', 'a', 'Nike', 'or', 'Adidas', 'to', 'go', 'to', 'stadium', '?']
aspects []
weights []
get url
params {'objectA': 'Nike', 'objectB': 'Adidas', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['cheaper', 'cooler', 'softer', 'respect'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  better
answer begin:  The adidas is better than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, cooler, softer, respect
cheaper, cooler, softer, respect
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  It's simple! Adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
gen templates 3 It's simple! Adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
full answer  It's simple! Adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
It's simple! Adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
567 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best', 'brand', 'adidas', 'or', 'nike?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'the', 'best', 'brand', 'ADIDAS', 'OR', 'NIKE', '?']
We can't recognize objects for comparision
568 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best', 'brand', 'for', 'sports', 'equipment', ':', 'nike,', 'adidas', 'or', 'reebok?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'the', 'best', 'brand', 'for', 'Sports', 'Equipment', ':', 'Nike', ',', 'Adidas', 'or', 'Reebok', '?']
aspects []
weights []
get url
params {'objectA': 'Adidas', 'objectB': 'Reebok', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['stronger', 'support', 'heel', 'padding'] []
2
winnder: reebok  other: adidas
acpect winner  stronger
acpect other  
type  templates
winnder: reebok  other: adidas
acpect winner  stronger
acpect other  
self predicate  better
answer begin:  The reebok is better than adidas. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like reebok is better than adidas because it is stronger, support, heel, padding.
full answer  It seems like reebok is better than adidas because it is stronger, support, heel, padding.
It seems like reebok is better than adidas because it is stronger, support, heel, padding.
569 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["who's", 'better', 'nike', 'or', 'adidas?']
['nike']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['who', "'s", 'better', 'nike', 'or', 'adidas', '?']
or simple split_sent 4
nike adidas
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'nike', 'objectB': 'adidas', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['cheaper', 'cooler', 'softer', 'respect'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  b
answer begin:  The adidas is b than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, cooler, softer, respect
cheaper, cooler, softer, respect
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  After much thought, I realized that  adidas is better, because of softer and cheaper. Nike is  and lighter.
gen templates 3 After much thought, I realized that  adidas is better, because of softer and cheaper. Nike is  and lighter.
full answer  After much thought, I realized that  adidas is better, because of softer and cheaper. Nike is  and lighter.
After much thought, I realized that  adidas is better, because of softer and cheaper. Nike is  and lighter.
570 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'brand', 'nike', 'or', 'adidas?']
['nike']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'brand', 'Nike', 'or', 'Adidas', '?']
aspects []
weights []
get url
params {'objectA': 'Nike', 'objectB': 'Adidas', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['cheaper', 'cooler', 'softer', 'respect'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  better
answer begin:  The adidas is better than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, cooler, softer, respect
cheaper, cooler, softer, respect
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  I would prefer to use adidas because of softer and cheaper. But you should know that nike is  and lighter.
gen templates 3 I would prefer to use adidas because of softer and cheaper. But you should know that nike is  and lighter.
full answer  I would prefer to use adidas because of softer and cheaper. But you should know that nike is  and lighter.
I would prefer to use adidas because of softer and cheaper. But you should know that nike is  and lighter.
571 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['give', 'me', 'a', 'good', 'reason', 'why', 'you', 'guys', 'prefer', 'adidas', 'to', 'nike!?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
572 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'nike', 'or', 'adidas?']
['nike']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'nike', 'or', 'adidas', '?']
or simple split_sent 4
nike adidas
aspects ['better']
weights [1]
get url
params {'objectA': 'nike', 'objectB': 'adidas', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['cheaper', 'softer', 'respect', 'cooler'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  better
answer begin:  The adidas is better than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, softer, respect, cooler
cheaper, softer, respect, cooler
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  Looks like adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
gen templates 3 Looks like adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
full answer  Looks like adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
Looks like adidas is better, because of softer and cheaper. But it will be useful for you to know that nike is  and lighter.
573 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'nike', 'or', 'adidas?']
['nike']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'NIKE', 'or', 'ADIDAS', '?']
aspects ['better']
weights [1]
get url
params {'objectA': 'NIKE', 'objectB': 'ADIDAS', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['cheaper', 'softer', 'respect', 'cooler'] ['lighter', 'nfl', 'contract', 'marketing']
2
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
type  templates
winnder: adidas  other: nike
acpect winner  softer and cheaper
acpect other  lighter
self predicate  better
answer begin:  The adidas is better than nike. The reason are softer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, softer, respect, cooler
cheaper, softer, respect, cooler
winner_aspects_string1 softer and cheaper
looser_aspects_string1  and lighter
make response  Looks like adidas is better, because of softer and cheaper. Nike is  and lighter.
gen templates 3 Looks like adidas is better, because of softer and cheaper. Nike is  and lighter.
full answer  Looks like adidas is better, because of softer and cheaper. Nike is  and lighter.
Looks like adidas is better, because of softer and cheaper. Nike is  and lighter.
574 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'better', 'python', 'or', 'perl?']
['python']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 's', 'the', 'better', 'python', 'or', 'perl', '?']
or simple split_sent 5
python perl
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'python', 'objectB': 'perl', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'syntax', 'lisp', 'easier to maintain'] ['faster', 'cleaner', 'uglier', 'cooler']
2
winnder: python  other: perl
acpect winner  easier and easier to maintain
acpect other  faster and cleaner
type  templates
winnder: python  other: perl
acpect winner  easier and easier to maintain
acpect other  faster and cleaner
self predicate  b
answer begin:  The python is b than perl. The reason are easier and easier to maintain. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, syntax, lisp, easier to maintain
easier, syntax, lisp, easier to maintain
winner_aspects_string1 easier and easier to maintain
looser_aspects_string1 faster and cleaner
make response  It's simple! Python is better, because of easier and easier to maintain. Perl is faster and cleaner.
gen templates 3 It's simple! Python is better, because of easier and easier to maintain. Perl is faster and cleaner.
full answer  It's simple! Python is better, because of easier and easier to maintain. Perl is faster and cleaner.
It's simple! Python is better, because of easier and easier to maintain. Perl is faster and cleaner.
575 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'a', 'better', 'chaser', 'for', 'nasty', 'shots', 'juice', 'or', 'soda?']
['juice']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'a', 'better', 'chaser', 'for', 'nasty', 'shots', 'juice', 'or', 'soda', '?']
or simple split_sent 9
juice soda
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'juice', 'objectB': 'soda', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['healthier', 'vitamins', 'mirza', 'cheaper'] ['worse for you', 'worse for teeth', 'teeth', 'better for you']
2
winnder: juice  other: soda
acpect winner  healthier and cheaper
acpect other  better for you, worse for you and worse for teeth
type  templates
winnder: juice  other: soda
acpect winner  healthier and cheaper
acpect other  better for you, worse for you and worse for teeth
self predicate  b
answer begin:  The juice is b than soda. The reason are healthier and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
healthier, vitamins, mirza, cheaper
healthier, vitamins, mirza, cheaper
winner_aspects_string1 healthier and cheaper
looser_aspects_string1 better for you, worse for you and worse for teeth
make response  It's simple! Juice is better, because of healthier and cheaper. But i should tell you that soda is better for you, worse for you and worse for teeth.
gen templates 3 It's simple! Juice is better, because of healthier and cheaper. But i should tell you that soda is better for you, worse for you and worse for teeth.
full answer  It's simple! Juice is better, because of healthier and cheaper. But i should tell you that soda is better for you, worse for you and worse for teeth.
It's simple! Juice is better, because of healthier and cheaper. But i should tell you that soda is better for you, worse for you and worse for teeth.
576 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['why', 'do', 'most', 'americans', 'prefer', 'soda', 'over', 'milks', 'or', 'juices?']
['soda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Why', 'do', 'most', 'americans', 'prefer', 'soda', 'over', 'milks', 'or', 'juices', '?']
or simple split_sent 8
milks juices
aspects []
weights []
get url
params {'objectA': 'milks', 'objectB': 'juices', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: juices  other: milks
acpect winner  
acpect other  
type  templates
winnder: juices  other: milks
acpect winner  
acpect other  
self predicate  better
answer begin:  The juices is better than milks. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer juices than milks.
full answer  I would prefer juices than milks.
I would prefer juices than milks.
577 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['witch', 'is', 'worse', 'for', 'your', 'teeth?', 'orange', 'juice', 'or', 'soda?']
['juice']
['worse']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Witch', 'is', 'worse', 'for', 'your', 'teeth', '?', 'Orange', 'juice', 'or', 'soda', '?']
or simple split_sent 9
juice soda
aspects ['worse']
weights [1]
get url
params {'objectA': 'juice', 'objectB': 'soda', 'fs': 'true', 'aspect1': 'worse', 'weight1': 1}
1
create fro json predicates ['worse']
create fro json self.predicates worse
aspects  ['healthier', 'vitamins', 'mirza', 'cheaper'] ['worse for you', 'worse for teeth', 'teeth', 'higher']
2
winnder: juice  other: soda
acpect winner  healthier and cheaper
acpect other  higher, worse for you and worse for teeth
type  templates
winnder: juice  other: soda
acpect winner  healthier and cheaper
acpect other  higher, worse for you and worse for teeth
self predicate  worse
answer begin:  The juice is worse than soda. The reason are healthier and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
healthier, vitamins, mirza, cheaper
healthier, vitamins, mirza, cheaper
winner_aspects_string1 healthier and cheaper
looser_aspects_string1 higher, worse for you and worse for teeth
make response  I came to the conclusion that juice is better, because of healthier and cheaper. But i should tell you that soda is higher, worse for you and worse for teeth.
gen templates 3 I came to the conclusion that juice is better, because of healthier and cheaper. But i should tell you that soda is higher, worse for you and worse for teeth.
full answer  I came to the conclusion that juice is better, because of healthier and cheaper. But i should tell you that soda is higher, worse for you and worse for teeth.
I came to the conclusion that juice is better, because of healthier and cheaper. But i should tell you that soda is higher, worse for you and worse for teeth.
578 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'metabolizes', 'faster?', 'solid', 'sugar(ie', 'candy)', 'or', 'liquid', 'sugar', '(ie', 'soda,', 'tea,', 'juice)', '?']
['juice)']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'metabolizes', 'faster', '?', 'Solid', 'sugar(ie', 'Candy', ')', 'or', 'Liquid', 'Sugar', '(', 'ie', 'soda', ',', 'tea', ',', 'juice', ')', '?']
aspects faster
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'juice)', 'objectB': 'Liquid Sugar', 'fs': 'true', 'aspect1': 'f', 'aspect2': 'a', 'aspect3': 's', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates faster
create fro json self.predicates f
aspects  [] []
2
winnder: liquid sugar  other: juice)
acpect winner  
acpect other  
type  templates
winnder: liquid sugar  other: juice)
acpect winner  
acpect other  
self predicate  f
answer begin:  The liquid sugar is f than juice). 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer liquid sugar than juice).
full answer  I would prefer liquid sugar than juice).
I would prefer liquid sugar than juice).
579 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'enjoy', 'most:soda,juice,or', 'water?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
580 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'better', 'juice', 'or', 'soda?']
['juice']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', "'s", 'better', 'juice', 'or', 'soda', '?']
or simple split_sent 4
juice soda
aspects ['better']
weights [1]
get url
params {'objectA': 'juice', 'objectB': 'soda', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['healthier', 'vitamins', 'mirza', 'cheaper'] ['worse for you', 'worse for teeth', 'teeth', 'better for you']
2
winnder: juice  other: soda
acpect winner  healthier and cheaper
acpect other  better for you, worse for you and worse for teeth
type  templates
winnder: juice  other: soda
acpect winner  healthier and cheaper
acpect other  better for you, worse for you and worse for teeth
self predicate  better
answer begin:  The juice is better than soda. The reason are healthier and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
healthier, vitamins, mirza, cheaper
healthier, vitamins, mirza, cheaper
winner_aspects_string1 healthier and cheaper
looser_aspects_string1 better for you, worse for you and worse for teeth
make response  It's simple! Juice is better, because of healthier and cheaper. But it will be useful for you to know that soda is better for you, worse for you and worse for teeth.
gen templates 3 It's simple! Juice is better, because of healthier and cheaper. But it will be useful for you to know that soda is better for you, worse for you and worse for teeth.
full answer  It's simple! Juice is better, because of healthier and cheaper. But it will be useful for you to know that soda is better for you, worse for you and worse for teeth.
It's simple! Juice is better, because of healthier and cheaper. But it will be useful for you to know that soda is better for you, worse for you and worse for teeth.
581 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'like', 'the', 'best?', 'chai', 'tea', 'latte,', 'hot', 'chocolate,', 'or', 'apple', 'cider?']
['tea']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'like', 'the', 'best', '?', ' ', 'Chai', 'Tea', 'Latte', ',', 'Hot', 'chocolate', ',', 'or', 'Apple', 'Cider', '?']
aspects []
weights []
get url
params {'objectA': 'tea', 'objectB': 'Apple Cider', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'hand'] ['longer']
2
winnder: apple cider  other: tea
acpect winner  faster and easier
acpect other  longer
type  templates
winnder: apple cider  other: tea
acpect winner  faster and easier
acpect other  longer
self predicate  better
answer begin:  The apple cider is better than tea. The reason are faster and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, hand
faster, easier, hand
winner_aspects_string1 faster and easier
looser_aspects_string1 longer
make response  I came to the conclusion that apple cider is better, because of faster and easier. But you should know that tea is longer.
gen templates 3 I came to the conclusion that apple cider is better, because of faster and easier. But you should know that tea is longer.
full answer  I came to the conclusion that apple cider is better, because of faster and easier. But you should know that tea is longer.
I came to the conclusion that apple cider is better, because of faster and easier. But you should know that tea is longer.
582 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'hockey', 'or', 'lacrosse?']
['hockey']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'hockey', 'or', 'lacrosse', '?']
or simple split_sent 4
hockey lacrosse
aspects ['better']
weights [1]
get url
params {'objectA': 'hockey', 'objectB': 'lacrosse', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['faster', 'greater', 'broader', 'safer'] ['bigger', 'play', 'zone', 'karwoski']
2
winnder: lacrosse  other: hockey
acpect winner  safer, faster and broader
acpect other  bigger
type  templates
winnder: lacrosse  other: hockey
acpect winner  safer, faster and broader
acpect other  bigger
self predicate  better
answer begin:  The lacrosse is better than hockey. The reason are safer, faster and broader. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, broader, safer
faster, greater, broader, safer
winner_aspects_string1 safer, faster and broader
looser_aspects_string1  and bigger
make response  I would prefer to use lacrosse because of safer, faster and broader. Hockey is  and bigger.
gen templates 3 I would prefer to use lacrosse because of safer, faster and broader. Hockey is  and bigger.
full answer  I would prefer to use lacrosse because of safer, faster and broader. Hockey is  and bigger.
I would prefer to use lacrosse because of safer, faster and broader. Hockey is  and bigger.
583 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'is', 'better?', 'lacrosse', 'or', 'field', 'hockey?']
['lacrosse']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'sport', 'is', 'better', '?', 'Lacrosse', 'or', 'field', 'hockey', '?']
or simple split_sent 6
Lacrosse field
aspects ['better?']
weights [1]
get url
params {'objectA': 'Lacrosse', 'objectB': 'field', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['rougher', 'clearer to their teammates on the field', 'clearer'] ['faster', 'easier']
2
winnder: lacrosse  other: field
acpect winner  clearer and clearer to their teammates on the field
acpect other  faster and easier
type  templates
winnder: lacrosse  other: field
acpect winner  clearer and clearer to their teammates on the field
acpect other  faster and easier
self predicate  better?
answer begin:  The lacrosse is better? than field. The reason are clearer and clearer to their teammates on the field. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
rougher, clearer to their teammates on the field, clearer
rougher, clearer to their teammates on the field, clearer
winner_aspects_string1 clearer and clearer to their teammates on the field
looser_aspects_string1 faster and easier
make response  It's simple! Lacrosse is better, because of clearer and clearer to their teammates on the field. But you should know that field is faster and easier.
gen templates 3 It's simple! Lacrosse is better, because of clearer and clearer to their teammates on the field. But you should know that field is faster and easier.
full answer  It's simple! Lacrosse is better, because of clearer and clearer to their teammates on the field. But you should know that field is faster and easier.
It's simple! Lacrosse is better, because of clearer and clearer to their teammates on the field. But you should know that field is faster and easier.
584 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'more', 'useful', 'asp.net,', 'coldfusion,', 'perl', 'or', 'php?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'one', 'is', 'more', 'useful', 'ASP.NET', ',', 'ColdFusion', ',', 'PERL', 'or', 'PHP', '?']
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'PERL', 'objectB': 'PHP', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['easier to learn', 'easier', 'mature', 'language'] ['better for programming', 'better to use here', 'job', 'easier to']
2
winnder: php  other: perl
acpect winner  easier and easier to learn
acpect other  better for programming, easier to and better to use here
type  templates
winnder: php  other: perl
acpect winner  easier and easier to learn
acpect other  better for programming, easier to and better to use here
self predicate  m
answer begin:  The php is m than perl. The reason are easier and easier to learn. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn, easier, mature, language
easier to learn, easier, mature, language
winner_aspects_string1 easier and easier to learn
looser_aspects_string1 better for programming, easier to and better to use here
make response  After much thought, I realized that  php is better, because of easier and easier to learn. Perl is better for programming, easier to and better to use here.
gen templates 3 After much thought, I realized that  php is better, because of easier and easier to learn. Perl is better for programming, easier to and better to use here.
full answer  After much thought, I realized that  php is better, because of easier and easier to learn. Perl is better for programming, easier to and better to use here.
After much thought, I realized that  php is better, because of easier and easier to learn. Perl is better for programming, easier to and better to use here.
585 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'game', 'console:', 'x-box,', 'gamecube', 'or', 'playstation?']
['gamecube']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', "'s", 'the', 'best', 'game', 'console', ':', 'X', '-', 'box', ',', 'Gamecube', 'or', 'Playstation', '?']
aspects []
weights []
get url
params {'objectA': 'Gamecube', 'objectB': 'Playstation', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier to choose between xbox and gamecube', 'older', 'power'] ['dvd', 'games', 'cd', 'capabilities']
2
winnder: gamecube  other: playstation
acpect winner  faster, older and easier to choose between xbox and gamecube
acpect other  
type  templates
winnder: gamecube  other: playstation
acpect winner  faster, older and easier to choose between xbox and gamecube
acpect other  
self predicate  better
answer begin:  The gamecube is better than playstation. The reason are faster, older and easier to choose between xbox and gamecube. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to choose between xbox and gamecube, older, power
faster, easier to choose between xbox and gamecube, older, power
winner_aspects_string1 faster, older and easier to choose between xbox and gamecube
smth wrong in answer generation, please try again
586 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'game', 'system', 'is', 'better', 'suited', 'for', 'an', '8', 'year', 'old?', 'nintendo', 'gamecube', 'or', 'playstation', '2?']
['gamecube', 'playstation']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'gamecube', 'objectB': 'playstation', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['dvd', 'games', 'cd', 'capabilities'] ['faster', 'easier to choose between xbox and gamecube', 'older', 'power']
2
winnder: playstation  other: gamecube
acpect winner  
acpect other  faster, older and easier to choose between xbox and gamecube
type  templates
winnder: playstation  other: gamecube
acpect winner  
acpect other  faster, older and easier to choose between xbox and gamecube
self predicate  better
answer begin:  The playstation is better than gamecube. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
dvd, games, cd, capabilities
dvd, games, cd, capabilities
smth wrong in answer generation, please try again
587 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'xbox', 'or', 'playstation', '2', 'or', 'gamecube?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'xbox', 'or', 'playstation', '2', 'or', 'gamecube', '?']
or simple split_sent 4
xbox playstation
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'xbox', 'objectB': 'playstation', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'easier for game developers to get results quicker using the xbox tools then the ps3', 'easier to harness', 'sony'] ['easier to use operating environment', 'greater']
2
winnder: playstation  other: xbox
acpect winner  easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness
acpect other  greater and easier to use operating environment
type  templates
winnder: playstation  other: xbox
acpect winner  easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness
acpect other  greater and easier to use operating environment
self predicate  b
answer begin:  The playstation is b than xbox. The reason are easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, easier for game developers to get results quicker using the xbox tools then the ps3, easier to harness, sony
easier, easier for game developers to get results quicker using the xbox tools then the ps3, easier to harness, sony
winner_aspects_string1 easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness
looser_aspects_string1 greater and easier to use operating environment
make response  After much thought, I realized that  playstation is better, because of easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness. Xbox is greater and easier to use operating environment.
gen templates 3 After much thought, I realized that  playstation is better, because of easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness. Xbox is greater and easier to use operating environment.
full answer  After much thought, I realized that  playstation is better, because of easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness. Xbox is greater and easier to use operating environment.
After much thought, I realized that  playstation is better, because of easier, easier for game developers to get results quicker using the xbox tools then the ps3 and easier to harness. Xbox is greater and easier to use operating environment.
588 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox', 'vs', 'playstation', '2', 'vs', 'gamecube?', 'which', 'is', 'the', 'better', 'system', 'over', 'all', 'including', 'graphics,', 'games', 'and', 'etc.?']
['playstation', 'gamecube?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier to do on a console', 'power', 'title'] ['fuzzier']
2
winnder: gamecube  other: playstation
acpect winner  faster and easier to do on a console
acpect other  fuzzier
type  templates
winnder: gamecube  other: playstation
acpect winner  faster and easier to do on a console
acpect other  fuzzier
self predicate  better
answer begin:  The gamecube is better than playstation. The reason are faster and easier to do on a console. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to do on a console, power, title
faster, easier to do on a console, power, title
winner_aspects_string1 faster and easier to do on a console
looser_aspects_string1 fuzzier
make response  I would prefer to use gamecube because of faster and easier to do on a console. But you should know that playstation is fuzzier.
gen templates 3 I would prefer to use gamecube because of faster and easier to do on a console. But you should know that playstation is fuzzier.
full answer  I would prefer to use gamecube because of faster and easier to do on a console. But you should know that playstation is fuzzier.
I would prefer to use gamecube because of faster and easier to do on a console. But you should know that playstation is fuzzier.
589 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'game', 'system', 'is', 'better', 'gamecube,', 'playstation', '2,', 'or', 'x-box?']
['gamecube,', 'playstation']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'gamecube', 'objectB': 'playstation', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['dvd', 'games', 'cd', 'capabilities'] ['faster', 'easier to choose between xbox and gamecube', 'older', 'power']
2
winnder: playstation  other: gamecube
acpect winner  
acpect other  faster, older and easier to choose between xbox and gamecube
type  templates
winnder: playstation  other: gamecube
acpect winner  
acpect other  faster, older and easier to choose between xbox and gamecube
self predicate  better
answer begin:  The playstation is better than gamecube. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
dvd, games, cd, capabilities
dvd, games, cd, capabilities
smth wrong in answer generation, please try again
590 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'system', 'should', 'i', 'buy', 'and', 'why?', 'playstation2', 'or', 'gamecube?', "i'm", 'not', 'a', 'big', 'gamer', 'just', 'want', 'something', 'for', 'fun.']
['playstation2', 'gamecube?']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'playstation2', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] ['selection', 'games', 'nintendo', 'systems']
2
winnder: gamecube  other: playstation2
acpect winner  
acpect other  
type  templates
winnder: gamecube  other: playstation2
acpect winner  
acpect other  
self predicate  better
answer begin:  The gamecube is better than playstation2. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 Looks like gamecube is better than playstation2, but playstation2 is selection, games, nintendo, systems.
full answer  Looks like gamecube is better than playstation2, but playstation2 is selection, games, nintendo, systems.
Looks like gamecube is better than playstation2, but playstation2 is selection, games, nintendo, systems.
591 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'you', 'like', 'playstation2,', 'gamecube,', 'or', 'xbox', 'better?']
['gamecube,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Do', 'you', 'like', 'Playstation2', ',', 'Gamecube', ',', 'or', 'Xbox', 'better', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'gamecube', 'objectB': 'Xbox', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'faster', 'larger', 'wii'] ['price', 'games', 'easier', 'lighter']
2
winnder: xbox  other: gamecube
acpect winner  greater, larger and faster
acpect other  lighter and easier
type  templates
winnder: xbox  other: gamecube
acpect winner  greater, larger and faster
acpect other  lighter and easier
self predicate  b
answer begin:  The xbox is b than gamecube. The reason are greater, larger and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, larger, wii
greater, faster, larger, wii
winner_aspects_string1 greater, larger and faster
looser_aspects_string1 lighter and easier
make response  I would prefer to use xbox because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
gen templates 3 I would prefer to use xbox because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
full answer  I would prefer to use xbox because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
I would prefer to use xbox because of greater, larger and faster. But it will be useful for you to know that gamecube is lighter and easier.
592 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['are', 'ibuprofen', 'and', 'advil', 'similar?']
['ibuprofen', 'advil']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ibuprofen', 'objectB': 'advil', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster'] ['faster for a headache', 'quicker']
2
winnder: ibuprofen  other: advil
acpect winner  faster
acpect other  faster for a headache and quicker
type  templates
winnder: ibuprofen  other: advil
acpect winner  faster
acpect other  faster for a headache and quicker
self predicate  better
answer begin:  The ibuprofen is better than advil. The reason are faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster
faster
winner_aspects_string1 faster
looser_aspects_string1 faster for a headache and quicker
make response  It's simple! Ibuprofen is better, because of faster. But i should tell you that advil is faster for a headache and quicker.
gen templates 3 It's simple! Ibuprofen is better, because of faster. But i should tell you that advil is faster for a headache and quicker.
full answer  It's simple! Ibuprofen is better, because of faster. But i should tell you that advil is faster for a headache and quicker.
It's simple! Ibuprofen is better, because of faster. But i should tell you that advil is faster for a headache and quicker.
593 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'language', 'is', 'best', 'for', 'learning', 'object', 'oriented', 'design:', 'smalltalk,', 'java,', 'ruby,', 'python', 'or', 'anything', 'else?']
['smalltalk,']
['best']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'language', 'is', 'best', 'for', 'learning', 'Object', 'Oriented', 'Design', ':', 'smalltalk', ',', 'java', ',', 'ruby', ',', 'python', 'or', 'anything', 'else', '?']
or simple split_sent 17
python anything
aspects ['best']
weights [1]
get url
params {'objectA': 'python', 'objectB': 'anything', 'fs': 'true', 'aspect1': 'best', 'weight1': 1}
1
create fro json predicates ['best']
create fro json self.predicates best
aspects  ['easier to learn then java', 'array', 'ansi', 'standard'] ['better to do this in python', 'cursors', 'monty', 'reference']
2
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
type  templates
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
self predicate  best
answer begin:  The python is best than anything. The reason are easier to learn then java. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn then java, array, ansi, standard
easier to learn then java, array, ansi, standard
winner_aspects_string1  and easier to learn then java
looser_aspects_string1  and better to do this in python
make response  It's simple! Python is better, because of  and easier to learn then java. But it will be useful for you to know that anything is  and better to do this in python.
gen templates 3 It's simple! Python is better, because of  and easier to learn then java. But it will be useful for you to know that anything is  and better to do this in python.
full answer  It's simple! Python is better, because of  and easier to learn then java. But it will be useful for you to know that anything is  and better to do this in python.
It's simple! Python is better, because of  and easier to learn then java. But it will be useful for you to know that anything is  and better to do this in python.
594 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'language', 'should', 'i', 'opt', 'among', 'python,', 'pearl,', 'smalltalk,', 'asp.net', 'mobile,', 'java', 'and', 'why?']
['smalltalk,', 'java']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'smalltalk', 'objectB': 'java', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to refactor', 'easier to do'] ['cheaper', 'garbage', 'collection', 'break']
2
winnder: smalltalk  other: java
acpect winner  easier, faster and easier to refactor
acpect other  cheaper
type  templates
winnder: smalltalk  other: java
acpect winner  easier, faster and easier to refactor
acpect other  cheaper
self predicate  better
answer begin:  The smalltalk is better than java. The reason are easier, faster and easier to refactor. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to refactor, easier to do
easier, faster, easier to refactor, easier to do
winner_aspects_string1 easier, faster and easier to refactor
looser_aspects_string1  and cheaper
make response  After much thought, I realized that  smalltalk is better, because of easier, faster and easier to refactor. But i should tell you that java is  and cheaper.
gen templates 3 After much thought, I realized that  smalltalk is better, because of easier, faster and easier to refactor. But i should tell you that java is  and cheaper.
full answer  After much thought, I realized that  smalltalk is better, because of easier, faster and easier to refactor. But i should tell you that java is  and cheaper.
After much thought, I realized that  smalltalk is better, because of easier, faster and easier to refactor. But i should tell you that java is  and cheaper.
595 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'language', 'is', 'best', 'for', 'learning', 'object', 'oriented', 'design:', 'smalltalk,', 'java,', 'ruby,', 'python', 'or', 'anything', 'else?']
['smalltalk,']
['best']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'language', 'is', 'best', 'for', 'learning', 'Object', 'Oriented', 'Design', ':', 'smalltalk', ',', 'java', ',', 'ruby', ',', 'python', 'or', 'anything', 'else', '?']
or simple split_sent 17
python anything
aspects ['best']
weights [1]
get url
params {'objectA': 'python', 'objectB': 'anything', 'fs': 'true', 'aspect1': 'best', 'weight1': 1}
1
create fro json predicates ['best']
create fro json self.predicates best
aspects  ['easier to learn then java', 'array', 'ansi', 'standard'] ['better to do this in python', 'cursors', 'monty', 'reference']
2
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
type  templates
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
self predicate  best
answer begin:  The python is best than anything. The reason are easier to learn then java. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn then java, array, ansi, standard
easier to learn then java, array, ansi, standard
winner_aspects_string1  and easier to learn then java
looser_aspects_string1  and better to do this in python
make response  I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
gen templates 3 I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
full answer  I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
I came to the conclusion that python is better, because of  and easier to learn then java. Anything is  and better to do this in python.
596 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'language', 'should', 'i', 'opt', 'among', 'python,', 'pearl,', 'smalltalk,', 'asp.net', 'mobile,', 'java', 'and', 'why?']
['smalltalk,', 'java']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'smalltalk', 'objectB': 'java', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to refactor', 'easier to do'] ['cheaper', 'garbage', 'collection', 'break']
2
winnder: smalltalk  other: java
acpect winner  easier, faster and easier to refactor
acpect other  cheaper
type  templates
winnder: smalltalk  other: java
acpect winner  easier, faster and easier to refactor
acpect other  cheaper
self predicate  better
answer begin:  The smalltalk is better than java. The reason are easier, faster and easier to refactor. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to refactor, easier to do
easier, faster, easier to refactor, easier to do
winner_aspects_string1 easier, faster and easier to refactor
looser_aspects_string1  and cheaper
make response  I came to the conclusion that smalltalk is better, because of easier, faster and easier to refactor. But you should know that java is  and cheaper.
gen templates 3 I came to the conclusion that smalltalk is better, because of easier, faster and easier to refactor. But you should know that java is  and cheaper.
full answer  I came to the conclusion that smalltalk is better, because of easier, faster and easier to refactor. But you should know that java is  and cheaper.
I came to the conclusion that smalltalk is better, because of easier, faster and easier to refactor. But you should know that java is  and cheaper.
597 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'I-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'language', 'is', 'best', 'for', 'learning', 'object', 'oriented', 'design:', 'smalltalk,', 'java,', 'ruby,', 'python', 'or', 'anything', 'else?']
['smalltalk,']
['best']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'language', 'is', 'best', 'for', 'learning', 'Object', 'Oriented', 'Design', ':', 'smalltalk', ',', 'java', ',', 'ruby', ',', 'python', 'or', 'anything', 'else', '?']
or simple split_sent 17
python anything
aspects ['best']
weights [1]
get url
params {'objectA': 'python', 'objectB': 'anything', 'fs': 'true', 'aspect1': 'best', 'weight1': 1}
1
create fro json predicates ['best']
create fro json self.predicates best
aspects  ['easier to learn then java', 'array', 'ansi', 'standard'] ['better to do this in python', 'cursors', 'monty', 'reference']
2
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
type  templates
winnder: python  other: anything
acpect winner  easier to learn then java
acpect other  better to do this in python
self predicate  best
answer begin:  The python is best than anything. The reason are easier to learn then java. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn then java, array, ansi, standard
easier to learn then java, array, ansi, standard
winner_aspects_string1  and easier to learn then java
looser_aspects_string1  and better to do this in python
make response  I would prefer to use python because of  and easier to learn then java. But you should know that anything is  and better to do this in python.
gen templates 3 I would prefer to use python because of  and easier to learn then java. But you should know that anything is  and better to do this in python.
full answer  I would prefer to use python because of  and easier to learn then java. But you should know that anything is  and better to do this in python.
I would prefer to use python because of  and easier to learn then java. But you should know that anything is  and better to do this in python.
598 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'server', 'side', 'language', 'for', 'ajax', 'implementation', '-', 'php,', 'java,', 'ruby,', '.net?']
['ruby,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ruby', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'languages', 'simpler', 'level'] ['easier', 'easier to use', 'easier to read', 'easier to write and less productive']
winnder: and  other: ruby
acpect winner  lighter and simpler
acpect other  easier, easier to read and easier to write and less productive
type  templates
ruby has undeniable advantages. They are lighter and simpler.
599 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'more', 'populor', 'sport', 'in', 'the', 'world', 'basketball', 'or', 'hockey?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'more', 'populor', 'sport', 'in', 'the', 'world', 'Basketball', 'or', 'Hockey', '?']
or simple split_sent 10
Basketball Hockey
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Basketball', 'objectB': 'Hockey', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['faster', 'larger', 'safer', 'baseball'] ['television', 'deals', 'ties', 'easier to deal with']
2
winnder: hockey  other: basketball
acpect winner  safer, faster and larger
acpect other  easier to deal with
type  templates
winnder: hockey  other: basketball
acpect winner  safer, faster and larger
acpect other  easier to deal with
self predicate  m
answer begin:  The hockey is m than basketball. The reason are safer, faster and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, safer, baseball
faster, larger, safer, baseball
winner_aspects_string1 safer, faster and larger
looser_aspects_string1  and easier to deal with
make response  After much thought, I realized that  hockey is better, because of safer, faster and larger. But it will be useful for you to know that basketball is  and easier to deal with.
gen templates 3 After much thought, I realized that  hockey is better, because of safer, faster and larger. But it will be useful for you to know that basketball is  and easier to deal with.
full answer  After much thought, I realized that  hockey is better, because of safer, faster and larger. But it will be useful for you to know that basketball is  and easier to deal with.
After much thought, I realized that  hockey is better, because of safer, faster and larger. But it will be useful for you to know that basketball is  and easier to deal with.
600 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'is', 'better', 'hockey', 'or', 'basketball?']
['hockey']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'sport', 'is', 'better', 'hockey', 'or', 'Basketball', '?']
or simple split_sent 5
hockey Basketball
aspects ['better']
weights [1]
get url
params {'objectA': 'hockey', 'objectB': 'Basketball', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['larger', 'faster', 'baseball', 'safer'] ['television', 'deals', 'ties', 'easier to deal with']
2
winnder: hockey  other: basketball
acpect winner  safer, faster and larger
acpect other  easier to deal with
type  templates
winnder: hockey  other: basketball
acpect winner  safer, faster and larger
acpect other  easier to deal with
self predicate  better
answer begin:  The hockey is better than basketball. The reason are safer, faster and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
larger, faster, baseball, safer
larger, faster, baseball, safer
winner_aspects_string1 safer, faster and larger
looser_aspects_string1  and easier to deal with
make response  I came to the conclusion that hockey is better, because of safer, faster and larger. But i should tell you that basketball is  and easier to deal with.
gen templates 3 I came to the conclusion that hockey is better, because of safer, faster and larger. But i should tell you that basketball is  and easier to deal with.
full answer  I came to the conclusion that hockey is better, because of safer, faster and larger. But i should tell you that basketball is  and easier to deal with.
I came to the conclusion that hockey is better, because of safer, faster and larger. But i should tell you that basketball is  and easier to deal with.
601 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'sport', 'is', 'better?', 'basketball', 'or', 'hockey?']
['basketball']
['better?']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'sport', 'is', 'better', '?', 'Basketball', 'or', 'Hockey', '?']
or simple split_sent 6
Basketball Hockey
aspects ['better?']
weights [1]
get url
params {'objectA': 'Basketball', 'objectB': 'Hockey', 'fs': 'true', 'aspect1': 'better?', 'weight1': 1}
1
create fro json predicates ['better?']
create fro json self.predicates better?
aspects  ['faster', 'larger', 'baseball', 'safer'] ['television', 'deals', 'ball', 'hands']
2
winnder: hockey  other: basketball
acpect winner  safer, faster and larger
acpect other  
type  templates
winnder: hockey  other: basketball
acpect winner  safer, faster and larger
acpect other  
self predicate  better?
answer begin:  The hockey is better? than basketball. The reason are safer, faster and larger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, baseball, safer
faster, larger, baseball, safer
winner_aspects_string1 safer, faster and larger
smth wrong in answer generation, please try again
602 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O']
extract_objects_predicates words ['the', 'comparison', 'between', 'acer,intel,dell,apple?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
603 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'basic', 'difference', 'between', 'intel', '&', 'apple', 'processors?']
['intel', 'apple']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'intel', 'objectB': 'apple', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'cooler', 'easier', 'quieter'] ['quicker', 'linux']
2
winnder: apple  other: intel
acpect winner  greater and easier
acpect other  quicker
type  templates
winnder: apple  other: intel
acpect winner  greater and easier
acpect other  quicker
self predicate  better
answer begin:  The apple is better than intel. The reason are greater and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, cooler, easier, quieter
greater, cooler, easier, quieter
winner_aspects_string1 greater and easier
looser_aspects_string1  and quicker
make response  Looks like apple is better, because of greater and easier. But you should know that intel is  and quicker.
gen templates 3 Looks like apple is better, because of greater and easier. But you should know that intel is  and quicker.
full answer  Looks like apple is better, because of greater and easier. But you should know that intel is  and quicker.
Looks like apple is better, because of greater and easier. But you should know that intel is  and quicker.
604 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["what's", 'difference', 'between', 'apple', 'and', 'intel?']
['apple']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'apple', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'friendlier', 'safer', 'windows'] ['cooler', 'greater', 'easier to access', 'access']
winnder: apple  other: and
acpect winner  safer, friendlier and smarter
acpect other  greater and easier to access
type  templates
apple has undeniable advantages. They are safer, friendlier and smarter.
605 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O']
extract_objects_predicates words ['the', 'comparison', 'between', 'acer,intel,dell,apple?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
606 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'motherboard', 'is', 'better', 'asus', 'or', 'gigabyte?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'motherboard', 'is', 'better', 'Asus', 'or', 'Gigabyte', '?']
aspects ['better']
weights [1]
get url
params {'objectA': 'Asus', 'objectB': 'Gigabyte', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['higher', 'bigger', 'simpler', 'lighter'] ['longer', 'quicker', 'easier', 'friendlier']
2
winnder: gigabyte  other: asus
acpect winner  lighter, higher and simpler
acpect other  longer, friendlier and quicker
type  templates
winnder: gigabyte  other: asus
acpect winner  lighter, higher and simpler
acpect other  longer, friendlier and quicker
self predicate  better
answer begin:  The gigabyte is better than asus. The reason are lighter, higher and simpler. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, bigger, simpler, lighter
higher, bigger, simpler, lighter
winner_aspects_string1 lighter, higher and simpler
looser_aspects_string1 longer, friendlier and quicker
make response  I would prefer to use gigabyte because of lighter, higher and simpler. Asus is longer, friendlier and quicker.
gen templates 3 I would prefer to use gigabyte because of lighter, higher and simpler. Asus is longer, friendlier and quicker.
full answer  I would prefer to use gigabyte because of lighter, higher and simpler. Asus is longer, friendlier and quicker.
I would prefer to use gigabyte because of lighter, higher and simpler. Asus is longer, friendlier and quicker.
607 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'insulator', 'is', 'better,', 'wood', 'or', 'styrofoam?']
['wood']
['better,']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'insulator', 'is', 'better', ',', 'wood', 'or', 'styrofoam', '?']
or simple split_sent 6
wood styrofoam
aspects ['better,']
weights [1]
get url
params {'objectA': 'wood', 'objectB': 'styrofoam', 'fs': 'true', 'aspect1': 'better,', 'weight1': 1}
1
create fro json predicates ['better,']
create fro json self.predicates better,
aspects  ['faster', 'lighter', 'higher', 'cheaper'] []
2
winnder: styrofoam  other: wood
acpect winner  lighter, faster and higher
acpect other  
type  templates
winnder: styrofoam  other: wood
acpect winner  lighter, faster and higher
acpect other  
self predicate  better,
answer begin:  The styrofoam is better, than wood. The reason are lighter, faster and higher. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like styrofoam is better than wood because it is faster, lighter, higher, cheaper.
full answer  It seems like styrofoam is better than wood because it is faster, lighter, higher, cheaper.
It seems like styrofoam is better than wood because it is faster, lighter, higher, cheaper.
608 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'it', 'better', 'to', 'use', 'plywood,', 'fiberglass,', 'or', 'foam', 'covered', 'with', 'epoxies', 'to', 'build', 'a', 'boat', 'for', 'a', '10hp', '1947', 'mercury?']
['plywood,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Is', 'it', 'better', 'to', 'use', 'plywood', ',', 'fiberglass', ',', 'or', 'foam', 'covered', 'with', 'epoxies', 'to', 'build', 'a', 'boat', 'for', 'a', '10HP', '1947', 'Mercury', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'plywood', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['easier to work', 'faster', 'easier to move around and stack', 'stronger'] ['safer', 'smoother', 'easier to park', 'easier to fix']
winnder: plywood  other: and
acpect winner  faster, easier to work and stronger
acpect other  safer, easier to park and easier to fix
type  templates
plywood has undeniable advantages. They are faster, easier to work and stronger.
609 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'pros', 'and', 'cons', 'of', 'using', 'wooden', 'ties', 'vs.', 'concrete', 'ties?']
['concrete']
[]
len(objects) 1
We try to use spacy
comp_elem vs.
tokens ['What', 'are', 'the', 'pros', 'and', 'cons', 'of', 'using', 'wooden', 'ties', 'vs.', 'concrete', 'ties', '?']
or simple split_sent 10
ties concrete
aspects []
weights []
get url
params {'objectA': 'ties', 'objectB': 'concrete', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier for cubanamericans to travel home', 'easier'] ['lighter']
2
winnder: concrete  other: ties
acpect winner  greater, easier for cubanamericans to travel home and easier
acpect other  lighter
type  templates
winnder: concrete  other: ties
acpect winner  greater, easier for cubanamericans to travel home and easier
acpect other  lighter
self predicate  better
answer begin:  The concrete is better than ties. The reason are greater, easier for cubanamericans to travel home and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier for cubanamericans to travel home, easier
greater, easier for cubanamericans to travel home, easier
winner_aspects_string1 greater, easier for cubanamericans to travel home and easier
looser_aspects_string1 lighter
make response  After much thought, I realized that  concrete is better, because of greater, easier for cubanamericans to travel home and easier. Ties is lighter.
gen templates 3 After much thought, I realized that  concrete is better, because of greater, easier for cubanamericans to travel home and easier. Ties is lighter.
full answer  After much thought, I realized that  concrete is better, because of greater, easier for cubanamericans to travel home and easier. Ties is lighter.
After much thought, I realized that  concrete is better, because of greater, easier for cubanamericans to travel home and easier. Ties is lighter.
610 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'you', 'like', 'pizzas', 'or', 'breads?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Do', 'you', 'like', 'pizzas', 'or', 'breads', '?']
or simple split_sent 4
pizzas breads
aspects []
weights []
get url
params {'objectA': 'pizzas', 'objectB': 'breads', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to do with little pizzas rather', 'easier'] []
2
winnder: breads  other: pizzas
acpect winner  easier and easier to do with little pizzas rather
acpect other  
type  templates
winnder: breads  other: pizzas
acpect winner  easier and easier to do with little pizzas rather
acpect other  
self predicate  better
answer begin:  The breads is better than pizzas. The reason are easier and easier to do with little pizzas rather. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like breads is better than pizzas because it is easier to do with little pizzas rather, easier.
full answer  It seems like breads is better than pizzas because it is easier to do with little pizzas rather, easier.
It seems like breads is better than pizzas because it is easier to do with little pizzas rather, easier.
611 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['how', 'is', 'pizza', 'dough', 'different', 'from', 'bread', 'dough?']
['pizza', 'bread']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'pizza', 'objectB': 'bread', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['safer', 'easier', 'bit', 'lighter'] ['faster', 'better for your health', 'stuck', 'easier to make']
2
winnder: bread  other: pizza
acpect winner  lighter, safer and easier
acpect other  faster, better for your health and easier to make
type  templates
winnder: bread  other: pizza
acpect winner  lighter, safer and easier
acpect other  faster, better for your health and easier to make
self predicate  better
answer begin:  The bread is better than pizza. The reason are lighter, safer and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
safer, easier, bit, lighter
safer, easier, bit, lighter
winner_aspects_string1 lighter, safer and easier
looser_aspects_string1 faster, better for your health and easier to make
make response  It's simple! Bread is better, because of lighter, safer and easier. But i should tell you that pizza is faster, better for your health and easier to make.
gen templates 3 It's simple! Bread is better, because of lighter, safer and easier. But i should tell you that pizza is faster, better for your health and easier to make.
full answer  It's simple! Bread is better, because of lighter, safer and easier. But i should tell you that pizza is faster, better for your health and easier to make.
It's simple! Bread is better, because of lighter, safer and easier. But i should tell you that pizza is faster, better for your health and easier to make.
612 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['compare', 'the', 'differences', 'between', 'ms-dos', 'windows', '98', 'windows', '30', 'windows', 'xp', 'windows', 'nt', 'and', 'windows', '2000?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
613 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'version', 'of', 'windows', 'is', 'the', 'best', 'for', 'games-', 'windows', '98', 'or', 'windows', 'xp?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'version', 'of', 'Windows', 'is', 'the', 'best', 'for', 'games-', 'Windows', '98', 'or', 'Windows', 'XP', '?']
We can't recognize objects for comparision
614 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whatis', 'the', 'difference', 'between', 'windows', '98', 'and', 'windows', 'xp', 'and', 'windows', 'nt?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
615 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'operating', 'system', 'would', 'be', 'best,', 'windows', '95,', 'windows', '98se,', 'windows', 'me,', 'windows', '2000', 'or', 'windows', 'xp?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'operating', 'system', 'would', 'be', 'best', ',', 'Windows', '95', ',', 'Windows', '98SE', ',', 'Windows', 'ME', ',', 'Windows', '2000', 'or', 'Windows', 'XP', '?']
aspects []
weights []
get url
params {'objectA': '2000', 'objectB': 'Windows XP', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['quicker', 'faster', 'easier to use your computer while making it look a lot better', 'older'] ['xp', 'background', 'windows', 'performance']
2
winnder: windows xp  other: 2000
acpect winner  faster, older and quicker
acpect other  
type  templates
winnder: windows xp  other: 2000
acpect winner  faster, older and quicker
acpect other  
self predicate  better
answer begin:  The windows xp is better than 2000. The reason are faster, older and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, faster, easier to use your computer while making it look a lot better, older
quicker, faster, easier to use your computer while making it look a lot better, older
winner_aspects_string1 faster, older and quicker
smth wrong in answer generation, please try again
616 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'are', 'the', 'pros', 'and', 'cons', 'of', 'windows', 'xp,', 'compared', 'to', 'windows', '98?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
617 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'windows', 'xp', 'and', 'windows', '98?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
618 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['can', 'i', 'run', 'a', 'dos-based', 'program', 'in', 'windows', 'xp.', 'how', 'xp', 'is', 'differ', 'from', 'windows', '98,', '95', 'and', '3.1?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
619 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['stanford', 'vs.', 'mit', 'vs.', 'cit?']
['stanford', 'mit']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'stanford', 'objectB': 'mit', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'easier to graduate from', 'more to it'] ['greater', 'better for entrepreneurship']
2
winnder: stanford  other: mit
acpect winner  easier to graduate from, easier and more to it
acpect other  greater and better for entrepreneurship
type  templates
winnder: stanford  other: mit
acpect winner  easier to graduate from, easier and more to it
acpect other  greater and better for entrepreneurship
self predicate  better
answer begin:  The stanford is better than mit. The reason are easier to graduate from, easier and more to it. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, easier to graduate from, more to it
easier, easier to graduate from, more to it
winner_aspects_string1 easier to graduate from, easier and more to it
looser_aspects_string1 greater and better for entrepreneurship
make response  I came to the conclusion that stanford is better, because of easier to graduate from, easier and more to it. But you should know that mit is greater and better for entrepreneurship.
gen templates 3 I came to the conclusion that stanford is better, because of easier to graduate from, easier and more to it. But you should know that mit is greater and better for entrepreneurship.
full answer  I came to the conclusion that stanford is better, because of easier to graduate from, easier and more to it. But you should know that mit is greater and better for entrepreneurship.
I came to the conclusion that stanford is better, because of easier to graduate from, easier and more to it. But you should know that mit is greater and better for entrepreneurship.
620 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'pc', ',', 'laptop', 'or', 'mobile', '?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'pc', ',', 'laptop', 'or', 'mobile', '?']
or simple split_sent 6
laptop mobile
aspects ['better']
weights [1]
get url
params {'objectA': 'laptop', 'objectB': 'mobile', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['lighter', 'bigger', 'easier', 'easier to use'] ['easier to carry on trips', 'nicer', 'faster', 'easier to lose a laptop']
2
winnder: mobile  other: laptop
acpect winner  lighter, easier and easier to use
acpect other  easier to lose a laptop, faster and easier to carry on trips
type  templates
winnder: mobile  other: laptop
acpect winner  lighter, easier and easier to use
acpect other  easier to lose a laptop, faster and easier to carry on trips
self predicate  better
answer begin:  The mobile is better than laptop. The reason are lighter, easier and easier to use. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, bigger, easier, easier to use
lighter, bigger, easier, easier to use
winner_aspects_string1 lighter, easier and easier to use
looser_aspects_string1 easier to lose a laptop, faster and easier to carry on trips
make response  It's simple! Mobile is better, because of lighter, easier and easier to use. But you should know that laptop is easier to lose a laptop, faster and easier to carry on trips.
gen templates 3 It's simple! Mobile is better, because of lighter, easier and easier to use. But you should know that laptop is easier to lose a laptop, faster and easier to carry on trips.
full answer  It's simple! Mobile is better, because of lighter, easier and easier to use. But you should know that laptop is easier to lose a laptop, faster and easier to carry on trips.
It's simple! Mobile is better, because of lighter, easier and easier to use. But you should know that laptop is easier to lose a laptop, faster and easier to carry on trips.
621 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'will', 'boil', 'faster', 'milk,water,or', 'soda?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
622 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['why', 'do', 'most', 'americans', 'prefer', 'soda', 'over', 'milks', 'or', 'juices?']
['soda']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Why', 'do', 'most', 'americans', 'prefer', 'soda', 'over', 'milks', 'or', 'juices', '?']
or simple split_sent 8
milks juices
aspects []
weights []
get url
params {'objectA': 'milks', 'objectB': 'juices', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: juices  other: milks
acpect winner  
acpect other  
type  templates
winnder: juices  other: milks
acpect winner  
acpect other  
self predicate  better
answer begin:  The juices is better than milks. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer juices than milks.
full answer  I would prefer juices than milks.
I would prefer juices than milks.
623 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'chips', 'and', 'soda', 'or', 'cake', 'and', 'milk?']
['soda']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'chips', 'and', 'soda', 'or', 'cake', 'and', 'milk', '?']
or simple split_sent 6
soda cake
aspects ['better']
weights [1]
get url
params {'objectA': 'soda', 'objectB': 'cake', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'dorie', 'bread', 'easier to find'] []
2
winnder: cake  other: soda
acpect winner  easier and easier to find
acpect other  
type  templates
winnder: cake  other: soda
acpect winner  easier and easier to find
acpect other  
self predicate  better
answer begin:  The cake is better than soda. The reason are easier and easier to find. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like cake is better than soda because it is easier, dorie, bread, easier to find.
full answer  It seems like cake is better than soda because it is easier, dorie, bread, easier to find.
It seems like cake is better than soda because it is easier, dorie, bread, easier to find.
624 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'least', 'expensive,', 'flagstone', 'or', 'concrete', 'pavers?']
['concrete']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'least', 'expensive', ',', 'flagstone', 'or', 'concrete', 'pavers', '?']
or simple split_sent 6
flagstone concrete
aspects []
weights []
get url
params {'objectA': 'flagstone', 'objectB': 'concrete', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'rougher', 'water', 'infiltration'] []
2
winnder: flagstone  other: concrete
acpect winner  
acpect other  
type  templates
winnder: flagstone  other: concrete
acpect winner  
acpect other  
self predicate  better
answer begin:  The flagstone is better than concrete. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like flagstone is better than concrete because it is smoother, rougher, water, infiltration.
full answer  It seems like flagstone is better than concrete because it is smoother, rougher, water, infiltration.
It seems like flagstone is better than concrete because it is smoother, rougher, water, infiltration.
625 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'it', 'better', 'to', 'have', 'a', 'steel', 'frame', 'or', 'a', 'aluminum', 'frame', 'for', 'a', 'mountain', 'bike?']
['steel']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['is', 'it', 'better', 'to', 'have', 'a', 'steel', 'frame', 'or', 'a', 'aluminum', 'frame', 'for', 'a', 'mountain', 'bike', '?']
or simple split_sent 8
frame a
aspects ['better']
weights [1]
get url
params {'objectA': 'frame', 'objectB': 'a', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['higher', 'rate', 'lighter', 'faster'] ['easier to get the first frame out', 'smoother to the user', 'bigger', 'stiffer']
2
winnder: a  other: frame
acpect winner  faster, higher and lighter
acpect other  easier to get the first frame out, bigger and smoother to the user
type  templates
winnder: a  other: frame
acpect winner  faster, higher and lighter
acpect other  easier to get the first frame out, bigger and smoother to the user
self predicate  better
answer begin:  The a is better than frame. The reason are faster, higher and lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
higher, rate, lighter, faster
higher, rate, lighter, faster
winner_aspects_string1 faster, higher and lighter
looser_aspects_string1 easier to get the first frame out, bigger and smoother to the user
make response  Looks like a is better, because of faster, higher and lighter. Frame is easier to get the first frame out, bigger and smoother to the user.
gen templates 3 Looks like a is better, because of faster, higher and lighter. Frame is easier to get the first frame out, bigger and smoother to the user.
full answer  Looks like a is better, because of faster, higher and lighter. Frame is easier to get the first frame out, bigger and smoother to the user.
Looks like a is better, because of faster, higher and lighter. Frame is easier to get the first frame out, bigger and smoother to the user.
626 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'heat', 'conductor', 'will', 'heat', 'up', 'the', 'fastest', 'copper', 'wire,', 'stainless', 'steel', 'or', 'aluminum', 'wire?']
['steel']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'heat', 'conductor', 'will', 'heat', 'up', 'the', 'fastest', 'copper', 'wire', ',', 'stainless', 'steel', 'or', 'aluminum', 'wire', '?']
or simple split_sent 13
steel aluminum
aspects []
weights []
get url
params {'objectA': 'steel', 'objectB': 'aluminum', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier to work with', 'quicker', 'easier'] ['smoother', 'easier to weld', 'stronger', 'greater']
2
winnder: aluminum  other: steel
acpect winner  lighter, easier and easier to work with
acpect other  easier to weld, stronger and greater
type  templates
winnder: aluminum  other: steel
acpect winner  lighter, easier and easier to work with
acpect other  easier to weld, stronger and greater
self predicate  better
answer begin:  The aluminum is better than steel. The reason are lighter, easier and easier to work with. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier to work with, quicker, easier
lighter, easier to work with, quicker, easier
winner_aspects_string1 lighter, easier and easier to work with
looser_aspects_string1 easier to weld, stronger and greater
make response  After much thought, I realized that  aluminum is better, because of lighter, easier and easier to work with. But it will be useful for you to know that steel is easier to weld, stronger and greater.
gen templates 3 After much thought, I realized that  aluminum is better, because of lighter, easier and easier to work with. But it will be useful for you to know that steel is easier to weld, stronger and greater.
full answer  After much thought, I realized that  aluminum is better, because of lighter, easier and easier to work with. But it will be useful for you to know that steel is easier to weld, stronger and greater.
After much thought, I realized that  aluminum is better, because of lighter, easier and easier to work with. But it will be useful for you to know that steel is easier to weld, stronger and greater.
627 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'defference', 'between', 'rifles', 'and', 'pistols', '?']
['rifles']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'rifles', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['earlier', 'bigger', 'easier to maintain', 'cleaner'] ['greater', 'farther', 'easier to use for women', 'easier to aim']
winnder: and  other: rifles
acpect winner  cleaner, easier to maintain and earlier
acpect other  farther, greater and easier to aim
type  templates
rifles has undeniable advantages. They are cleaner, easier to maintain and earlier.
628 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['is', 'there', 'a', 'difference', 'between', 'advil', 'and', 'motrin?']
['advil']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'advil', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['safer', 'greater', 'easier', 'ginger to be superior to nonsteroidal antiinflammatory drugs'] ['stronger', 'longer', 'faster', 'better for my back pain and hip']
winnder: and  other: advil
acpect winner  safer, ginger to be superior to nonsteroidal antiinflammatory drugs and greater
acpect other  longer, faster and stronger
type  templates
advil has undeniable advantages. They are safer, ginger to be superior to nonsteroidal antiinflammatory drugs and greater.
629 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'value?', 'ps2', 'of', 'wii?']
['ps2']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps2', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'smoother', 'lighter'] ['graphics', 'igps', 'intel', 'greater']
winnder: and  other: ps2
acpect winner  lighter, easier and faster
acpect other  greater
type  templates
ps2 has undeniable advantages. They are lighter, easier and faster.
630 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['tell', 'me', 'that', 'at', 'least', 'wii', 'has', 'better', 'graphics', 'than', 'ps2?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to manage gadgets and stuff too', 'easier to use']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
631 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wii,', 'ps2', 'or', 'gamecube...what', 'you', 'recommend?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Wii', ',', 'PS2', 'or', 'GameCube', '...', 'what', 'you', 'recommend', '?']
or simple split_sent 3
PS2 GameCube
aspects []
weights []
get url
params {'objectA': 'PS2', 'objectB': 'GameCube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'nicersmoother', 'smoother', 'older'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
self predicate  better
answer begin:  The gamecube is better than ps2. The reason are faster and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, nicersmoother, smoother, older
faster, nicersmoother, smoother, older
winner_aspects_string1 faster and older
smth wrong in answer generation, please try again
632 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'to', 'get', 'my', '6yr', 'old', 'son', 'for', 'christmas,ps2', 'or', 'nitendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'to', 'get', 'my', '6yr', 'old', 'son', 'for', 'christmas', ',', 'PS2', 'or', 'Nitendo', 'Wii', '?']
We can't recognize objects for comparision
633 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  Looks like psp is better, because of  and stronger. But i should tell you that gamecube is  and faster.
gen templates 3 Looks like psp is better, because of  and stronger. But i should tell you that gamecube is  and faster.
full answer  Looks like psp is better, because of  and stronger. But i should tell you that gamecube is  and faster.
Looks like psp is better, because of  and stronger. But i should tell you that gamecube is  and faster.
634 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'would', 'win', 'in', 'a', 'fight', 'in', 'their', 'prime....ronald', 'reagan,', 'or', 'richard', 'nixon?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Who', 'would', 'win', 'in', 'a', 'fight', 'in', 'their', 'prime', '....', 'Ronald', 'Reagan', ',', 'or', 'Richard', 'Nixon', '?']
We can't recognize objects for comparision
635 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'much', 'different', 'would', 'the', 'world', 'be', 'if', 'bobby', 'kennedy', 'had', 'been', 'elected', 'president', 'in', '1968', 'instead', 'of', 'nixon?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
636 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'team', 'will', 'win', 'f1', 'title', 'from', 'these', 'teamsmclaren', 'renault', 'ferrari', 'honda?']
['renault', 'ferrari']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'renault', 'objectB': 'ferrari', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['power', 'cooler', 'lighter', 'honda'] ['stronger', 'fduct', 'downforce', 'pit']
2
winnder: ferrari  other: renault
acpect winner  lighter
acpect other  stronger
type  templates
winnder: ferrari  other: renault
acpect winner  lighter
acpect other  stronger
self predicate  better
answer begin:  The ferrari is better than renault. The reason are lighter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
power, cooler, lighter, honda
power, cooler, lighter, honda
winner_aspects_string1  and lighter
looser_aspects_string1  and stronger
make response  Looks like ferrari is better, because of  and lighter. But i should tell you that renault is  and stronger.
gen templates 3 Looks like ferrari is better, because of  and lighter. But i should tell you that renault is  and stronger.
full answer  Looks like ferrari is better, because of  and lighter. But i should tell you that renault is  and stronger.
Looks like ferrari is better, because of  and lighter. But i should tell you that renault is  and stronger.
637 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'are', 'basketball', 'and', 'volleyball', 'similar?', 'how', 'are', 'they', 'different?']
['basketball', 'volleyball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'basketball', 'objectB': 'volleyball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'greater', 'defense', 'younger'] ['better for themselves', 'family', 'group', 'world']
2
winnder: basketball  other: volleyball
acpect winner  faster, younger and greater
acpect other  better for themselves
type  templates
winnder: basketball  other: volleyball
acpect winner  faster, younger and greater
acpect other  better for themselves
self predicate  better
answer begin:  The basketball is better than volleyball. The reason are faster, younger and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, defense, younger
faster, greater, defense, younger
winner_aspects_string1 faster, younger and greater
looser_aspects_string1  and better for themselves
make response  I would prefer to use basketball because of faster, younger and greater. But it will be useful for you to know that volleyball is  and better for themselves.
gen templates 3 I would prefer to use basketball because of faster, younger and greater. But it will be useful for you to know that volleyball is  and better for themselves.
full answer  I would prefer to use basketball because of faster, younger and greater. But it will be useful for you to know that volleyball is  and better for themselves.
I would prefer to use basketball because of faster, younger and greater. But it will be useful for you to know that volleyball is  and better for themselves.
638 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'soccer,', 'volleyball,', 'or', 'basketball?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'soccer', ',', 'volleyball', ',', 'or', 'basketball', '?']
or simple split_sent 7
, basketball
We can't recognize objects for comparision
639 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'soccer,', 'tennis,', 'volleyball,', 'badminton', 'or', 'basketball??']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'soccer', ',', 'tennis', ',', 'volleyball', ',', 'badminton', 'or', 'basketball', '?', '?']
or simple split_sent 10
badminton basketball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'badminton', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'easier', 'faster'] []
2
winnder: basketball  other: badminton
acpect winner  lighter, easier and faster
acpect other  
type  templates
winnder: basketball  other: badminton
acpect winner  lighter, easier and faster
acpect other  
self predicate  b
answer begin:  The basketball is b than badminton. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like basketball is better than badminton because it is lighter, easier, faster.
full answer  It seems like basketball is better than badminton because it is lighter, easier, faster.
It seems like basketball is better than badminton because it is lighter, easier, faster.
640 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'your', 'favorite', 'sport,', 'volleyball,', 'basketball,', 'or', 'softball?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'your', 'favorite', 'sport', ',', 'volleyball', ',', 'basketball', ',', 'or', 'softball', '?']
or simple split_sent 10
, softball
We can't recognize objects for comparision
641 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'thinks', 'is', 'better??volleyball', 'or', 'basketball???i', 'like', 'volley', 'but', 'they', 'say', 'that', 'they', 'get', 'paid', 'low?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'do', 'you', 'thinks', 'is', 'better??volleyball', 'or', 'basketball???i', 'like', 'volley', 'but', 'they', 'say', 'that', 'they', 'get', 'paid', 'low', '?']
or simple split_sent 6
better??volleyball basketball???i
aspects []
weights []
get url
params {'objectA': 'better??volleyball', 'objectB': 'basketball???i', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: basketball???i  other: better??volleyball
acpect winner  
acpect other  
type  templates
winnder: basketball???i  other: better??volleyball
acpect winner  
acpect other  
self predicate  better
answer begin:  The basketball???i is better than better??volleyball. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer basketball???i than better??volleyball.
full answer  I would prefer basketball???i than better??volleyball.
I would prefer basketball???i than better??volleyball.
642 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'sport', 'do', 'you', 'like', 'to', 'play', 'better,', 'volleyball', 'or', 'basketball?']
['volleyball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'sport', 'do', 'you', 'like', 'to', 'play', 'better', ',', 'volleyball', 'or', 'basketball', '?']
or simple split_sent 10
volleyball basketball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'volleyball', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'greater', 'defense', 'higher'] ['better for themselves', 'family', 'group', 'world']
2
winnder: basketball  other: volleyball
acpect winner  faster, higher and greater
acpect other  better for themselves
type  templates
winnder: basketball  other: volleyball
acpect winner  faster, higher and greater
acpect other  better for themselves
self predicate  b
answer begin:  The basketball is b than volleyball. The reason are faster, higher and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, defense, higher
faster, greater, defense, higher
winner_aspects_string1 faster, higher and greater
looser_aspects_string1  and better for themselves
make response  Looks like basketball is better, because of faster, higher and greater. But it will be useful for you to know that volleyball is  and better for themselves.
gen templates 3 Looks like basketball is better, because of faster, higher and greater. But it will be useful for you to know that volleyball is  and better for themselves.
full answer  Looks like basketball is better, because of faster, higher and greater. But it will be useful for you to know that volleyball is  and better for themselves.
Looks like basketball is better, because of faster, higher and greater. But it will be useful for you to know that volleyball is  and better for themselves.
643 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['lexus', 'is', '250', 'vs', '350', 'vs', 'audi', 'a4', 'vs', 'infiniti', 'g35?']
['audi']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Lexus', 'IS', '250', 'vs', '350', 'vs', 'Audi', 'A4', 'vs', 'Infiniti', 'G35', '?']
aspects []
weights []
get url
params {'objectA': '250', 'objectB': '350', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'larger', 'smoother', 'quicker'] ['safer', 'higher', 'lighter', 'heavier']
2
winnder: 350  other: 250
acpect winner  greater, larger and quicker
acpect other  lighter, safer and higher
type  templates
winnder: 350  other: 250
acpect winner  greater, larger and quicker
acpect other  lighter, safer and higher
self predicate  better
answer begin:  The 350 is better than 250. The reason are greater, larger and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, larger, smoother, quicker
greater, larger, smoother, quicker
winner_aspects_string1 greater, larger and quicker
looser_aspects_string1 lighter, safer and higher
make response  It's simple! 350 is better, because of greater, larger and quicker. But i should tell you that 250 is lighter, safer and higher.
gen templates 3 It's simple! 350 is better, because of greater, larger and quicker. But i should tell you that 250 is lighter, safer and higher.
full answer  It's simple! 350 is better, because of greater, larger and quicker. But i should tell you that 250 is lighter, safer and higher.
It's simple! 350 is better, because of greater, larger and quicker. But i should tell you that 250 is lighter, safer and higher.
644 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'does', 'the', '2006', 'audi', 'a6', 'compare', 'to', 'the', 'lexus', 'es', '300?']
['audi']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'audi', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'safer', 'quicker', 'cheaper'] ['longer', 'nicer', 'bigger', 'wider']
winnder: audi  other: and
acpect winner  safer, easier and quicker
acpect other  longer, wider and bigger
type  templates
audi has undeniable advantages. They are safer, easier and quicker.
645 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['would', 'you', 'prefer', 'the', 'audi', 'a3', 'or', 'the', 'lexus', 'is', '250?', 'why?']
['audi']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Would', 'you', 'prefer', 'the', 'Audi', 'A3', 'or', 'the', 'Lexus', 'IS', '250', '?', ' ', 'Why', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'audi', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'safer', 'quicker', 'cheaper'] ['longer', 'nicer', 'bigger', 'wider']
winnder: audi  other: and
acpect winner  safer, easier and quicker
acpect other  longer, wider and bigger
type  templates
audi has undeniable advantages. They are safer, easier and quicker.
646 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'best', '?', 'bmw', '3', 'serie', 'or', 'ford', 'mustang?']
['bmw', 'ford']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'bmw', 'objectB': 'ford', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'faster', 'smoother', 'bigger'] ['easier', 'higher', 'longer', 'horsepower to its wheels']
2
winnder: ford  other: bmw
acpect winner  greater, faster and bigger
acpect other  easier, higher and horsepower to its wheels
type  templates
winnder: ford  other: bmw
acpect winner  greater, faster and bigger
acpect other  easier, higher and horsepower to its wheels
self predicate  better
answer begin:  The ford is better than bmw. The reason are greater, faster and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, smoother, bigger
greater, faster, smoother, bigger
winner_aspects_string1 greater, faster and bigger
looser_aspects_string1 easier, higher and horsepower to its wheels
make response  Looks like ford is better, because of greater, faster and bigger. But i should tell you that bmw is easier, higher and horsepower to its wheels.
gen templates 3 Looks like ford is better, because of greater, faster and bigger. But i should tell you that bmw is easier, higher and horsepower to its wheels.
full answer  Looks like ford is better, because of greater, faster and bigger. But i should tell you that bmw is easier, higher and horsepower to its wheels.
Looks like ford is better, because of greater, faster and bigger. But i should tell you that bmw is easier, higher and horsepower to its wheels.
647 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'faster?', 'ford', 'focus', 'st', 'or', 'a', 'bmw', '850csi?']
['ford', 'bmw']
['faster?']
len(objects) 2
aspects ['faster?']
weights [1]
get url
params {'objectA': 'ford', 'objectB': 'bmw', 'fs': 'true', 'aspect1': 'faster?', 'weight1': 1}
1
create fro json predicates ['faster?']
create fro json self.predicates faster?
aspects  ['faster', 'greater', 'head', 'legroom'] ['easier', 'higher', 'easier to sell my car in a few years time without losing as much as i would had i purchased american', 'quicker']
2
winnder: ford  other: bmw
acpect winner  faster and greater
acpect other  easier, higher and quicker
type  templates
winnder: ford  other: bmw
acpect winner  faster and greater
acpect other  easier, higher and quicker
self predicate  faster?
answer begin:  The ford is faster? than bmw. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, head, legroom
faster, greater, head, legroom
winner_aspects_string1 faster and greater
looser_aspects_string1 easier, higher and quicker
make response  I would prefer to use ford because of faster and greater. But it will be useful for you to know that bmw is easier, higher and quicker.
gen templates 3 I would prefer to use ford because of faster and greater. But it will be useful for you to know that bmw is easier, higher and quicker.
full answer  I would prefer to use ford because of faster and greater. But it will be useful for you to know that bmw is easier, higher and quicker.
I would prefer to use ford because of faster and greater. But it will be useful for you to know that bmw is easier, higher and quicker.
648 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'like', 'better???', 'pizza', 'or', 'pasta???']
['pizza']
['better???']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'do', 'you', 'like', 'better', '?', '?', '?', 'Pizza', 'or', 'pasta', '?', '?', '?']
or simple split_sent 9
Pizza pasta
aspects ['better???']
weights [1]
get url
params {'objectA': 'Pizza', 'objectB': 'pasta', 'fs': 'true', 'aspect1': 'better???', 'weight1': 1}
1
create fro json predicates ['better???']
create fro json self.predicates better???
aspects  ['faster', 'easier', 'lighter', 'quicker'] ['greater', 'nachos', 'better to me']
2
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
type  templates
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
self predicate  better???
answer begin:  The pasta is better??? than pizza. The reason are lighter, faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, lighter, quicker
faster, easier, lighter, quicker
winner_aspects_string1 lighter, faster and quicker
looser_aspects_string1 greater and better to me
make response  I came to the conclusion that pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
gen templates 3 I came to the conclusion that pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
full answer  I came to the conclusion that pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
I came to the conclusion that pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
649 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['whi', 'is', 'your', 'favourite', 'italian', 'food', '-', 'pizza', 'or', 'pasta', '?']
['pizza', 'pasta']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'pizza', 'objectB': 'pasta', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'lighter', 'quicker'] ['greater', 'nachos', 'better to me']
2
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
type  templates
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
self predicate  better
answer begin:  The pasta is better than pizza. The reason are lighter, faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, lighter, quicker
faster, easier, lighter, quicker
winner_aspects_string1 lighter, faster and quicker
looser_aspects_string1 greater and better to me
make response  I would prefer to use pasta because of lighter, faster and quicker. Pizza is greater and better to me.
gen templates 3 I would prefer to use pasta because of lighter, faster and quicker. Pizza is greater and better to me.
full answer  I would prefer to use pasta because of lighter, faster and quicker. Pizza is greater and better to me.
I would prefer to use pasta because of lighter, faster and quicker. Pizza is greater and better to me.
650 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'most', 'popular', 'dish', 'in', 'italy,', 'pizza', 'or', 'pasta?']
['pizza']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'most', 'popular', 'dish', 'in', 'Italy', ',', 'pizza', 'or', 'pasta', '?']
or simple split_sent 10
pizza pasta
aspects []
weights []
get url
params {'objectA': 'pizza', 'objectB': 'pasta', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'lighter', 'quicker'] ['greater', 'nachos', 'better to me']
2
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
type  templates
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
self predicate  better
answer begin:  The pasta is better than pizza. The reason are lighter, faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, lighter, quicker
faster, easier, lighter, quicker
winner_aspects_string1 lighter, faster and quicker
looser_aspects_string1 greater and better to me
make response  It's simple! Pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
gen templates 3 It's simple! Pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
full answer  It's simple! Pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
It's simple! Pasta is better, because of lighter, faster and quicker. But i should tell you that pizza is greater and better to me.
651 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['are', 'you', 'more', 'the', 'pizza', 'type', 'or', 'pasta', 'type?']
['pizza', 'pasta']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'pizza', 'objectB': 'pasta', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'lighter', 'quicker'] ['greater', 'nachos', 'better to me']
2
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
type  templates
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
self predicate  better
answer begin:  The pasta is better than pizza. The reason are lighter, faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, lighter, quicker
faster, easier, lighter, quicker
winner_aspects_string1 lighter, faster and quicker
looser_aspects_string1 greater and better to me
make response  Looks like pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
gen templates 3 Looks like pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
full answer  Looks like pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
Looks like pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
652 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'rather', 'order...', 'pizza', 'or', 'pasta?']
['pizza']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'do', 'you', 'rather', 'order', '...', 'pizza', 'or', 'pasta', '?']
or simple split_sent 7
pizza pasta
aspects []
weights []
get url
params {'objectA': 'pizza', 'objectB': 'pasta', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'lighter', 'quicker'] ['greater', 'nachos', 'better to me']
2
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
type  templates
winnder: pasta  other: pizza
acpect winner  lighter, faster and quicker
acpect other  greater and better to me
self predicate  better
answer begin:  The pasta is better than pizza. The reason are lighter, faster and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, lighter, quicker
faster, easier, lighter, quicker
winner_aspects_string1 lighter, faster and quicker
looser_aspects_string1 greater and better to me
make response  I came to the conclusion that pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
gen templates 3 I came to the conclusion that pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
full answer  I came to the conclusion that pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
I came to the conclusion that pasta is better, because of lighter, faster and quicker. Pizza is greater and better to me.
653 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'an', 'ethernet', 'modem', 'and', 'a', 'usb', 'modem?']
['usb']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'usb', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier to configure', 'newer', 'easier to set up'] ['simpler', 'larger', 'lighter', 'betterfaster']
winnder: usb  other: and
acpect winner  greater, newer and easier to configure
acpect other  lighter, larger and simpler
type  templates
usb has undeniable advantages. They are greater, newer and easier to configure.
654 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'B-PREDFULL', 'O', 'I-PREDFULL', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'python', 'programming', 'language', 'better', 'suited', 'for', 'web', 'development', 'than', 'php?']
['python']
['better']
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects ['better']
weights [1]
get url
params {'objectA': 'python', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['simpler', 'easier to map xml to python objects in a nicer', 'easier to develop for', 'easier to install'] ['quicker', 'larger', 'easier to maintain that the longer python or c++ versions', 'longer']
winnder: python  other: and
acpect winner  easier to map xml to python objects in a nicer, easier to install and simpler
acpect other  easier to maintain that the longer python or c++ versions, longer and larger
type  templates
python has undeniable advantages. They are easier to map xml to python objects in a nicer, easier to install and simpler.
655 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['iron', 'metal', 'could', 'be', 'used', 'instead', 'to', 'generate', 'heat,', 'but', 'aluminum', 'is', 'preferred?']
['iron', 'aluminum']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'iron', 'objectB': 'aluminum', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'stronger', 'faster', 'easier'] ['softer', 'easier to produce', 'larger', 'smoother']
2
winnder: aluminum  other: iron
acpect winner  lighter, faster and stronger
acpect other  easier to produce, larger and softer
type  templates
winnder: aluminum  other: iron
acpect winner  lighter, faster and stronger
acpect other  easier to produce, larger and softer
self predicate  better
answer begin:  The aluminum is better than iron. The reason are lighter, faster and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, stronger, faster, easier
lighter, stronger, faster, easier
winner_aspects_string1 lighter, faster and stronger
looser_aspects_string1 easier to produce, larger and softer
make response  Looks like aluminum is better, because of lighter, faster and stronger. Iron is easier to produce, larger and softer.
gen templates 3 Looks like aluminum is better, because of lighter, faster and stronger. Iron is easier to produce, larger and softer.
full answer  Looks like aluminum is better, because of lighter, faster and stronger. Iron is easier to produce, larger and softer.
Looks like aluminum is better, because of lighter, faster and stronger. Iron is easier to produce, larger and softer.
656 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'state', 'would', 'you', 'rather', 'live', 'in:', 'texas,', 'oklahoma,', 'arkansas,', 'tennessee,', 'kentucky,', 'georgia,', 'n.', 'carolina?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
657 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'state(s)', 'has', 'the', 'best', 'women?', 'kentucky,', 'texas,', 'tennessee,', 'georgia,', 'alabama,', 'the', 'carolinas,', 'or', 'oklahoma?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'state(s', ')', 'has', 'the', 'best', 'women', '?', 'Kentucky', ',', 'Texas', ',', 'Tennessee', ',', 'Georgia', ',', 'Alabama', ',', 'the', 'Carolinas', ',', 'or', 'Oklahoma', '?']
We can't recognize objects for comparision
658 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ["don't", 'you', 'know', 'the', 'difference', 'between', 'football', 'and', 'golf?']
['football']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'football', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'quicker', 'smarter', 'easier to understand'] ['greater', 'cooler', 'stronger', 'faster']
winnder: and  other: football
acpect winner  lighter, smarter and easier to understand
acpect other  stronger, greater and faster
type  templates
football has undeniable advantages. They are lighter, smarter and easier to understand.
659 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', 'and', 'nintendo', 'wii', 'which', 'one', 'is', 'the', 'best', 'console?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
660 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', 'vs', 'nintendo', 'wii', 'vs', 'xbox360....which', 'console', 'won', 'e3', '20006', '???????']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['PS3', 'vs', 'Nintendo', 'Wii', 'vs', 'XboX360', '....', 'Which', 'Console', 'Won', 'E3', '20006', ' ', '?', '?', '?', '?', '?', '?', '?']
or simple split_sent 1
PS3 Nintendo
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'longer', 'cheaper', 'smoother'] ['easier to find', 'gameplay', 'titles', 'richer']
2
winnder: nintendo  other: ps3
acpect winner  greater, longer and cheaper
acpect other  easier to find and richer
type  templates
winnder: nintendo  other: ps3
acpect winner  greater, longer and cheaper
acpect other  easier to find and richer
self predicate  better
answer begin:  The nintendo is better than ps3. The reason are greater, longer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, cheaper, smoother
greater, longer, cheaper, smoother
winner_aspects_string1 greater, longer and cheaper
looser_aspects_string1 easier to find and richer
make response  Looks like nintendo is better, because of greater, longer and cheaper. But it will be useful for you to know that ps3 is easier to find and richer.
gen templates 3 Looks like nintendo is better, because of greater, longer and cheaper. But it will be useful for you to know that ps3 is easier to find and richer.
full answer  Looks like nintendo is better, because of greater, longer and cheaper. But it will be useful for you to know that ps3 is easier to find and richer.
Looks like nintendo is better, because of greater, longer and cheaper. But it will be useful for you to know that ps3 is easier to find and richer.
661 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'should', 'i', 'get,', 'a', 'ps3', 'or', 'a', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'should', 'i', 'get', ',', 'a', 'PS3', 'or', 'a', 'Nintendo', 'Wii', '?']
or simple split_sent 7
PS3 a
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'quicker', 'easier', 'bigger'] ['faster', 'bjs', 'tofrom', 'easier to hold']
2
winnder: a  other: ps3
acpect winner  quicker, bigger and easier
acpect other  faster and easier to hold
type  templates
winnder: a  other: ps3
acpect winner  quicker, bigger and easier
acpect other  faster and easier to hold
self predicate  better
answer begin:  The a is better than ps3. The reason are quicker, bigger and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, quicker, easier, bigger
smoother, quicker, easier, bigger
winner_aspects_string1 quicker, bigger and easier
looser_aspects_string1 faster and easier to hold
make response  It's simple! A is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
gen templates 3 It's simple! A is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
full answer  It's simple! A is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
It's simple! A is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
662 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['are', 'you', 'going', 'to', 'buy', 'wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Are', 'you', 'going', 'to', 'buy', 'Wii', ',', 'PS3', ',', 'or', 'Xbox', '360', '?']
or simple split_sent 9
, Xbox
We can't recognize objects for comparision
663 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'going', 'to', 'be', 'the', 'best?', 'xbox360,', 'ps3,', 'or', 'the', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 's', 'going', 'to', 'be', 'the', 'best', '?', 'Xbox360', ',', 'PS3', ',', 'or', 'the', 'Wii', '?']
or simple split_sent 12
, the
We can't recognize objects for comparision
664 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'new', 'game', 'system', 'you', 'want', 'the', 'most,', 'the', 'nintendo', 'wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'the', 'new', 'game', 'system', 'you', 'want', 'the', 'most', ',', 'the', 'Nintendo', 'Wii', ',', 'PS3', ',', 'or', 'Xbox', '360', '?']
We can't recognize objects for comparision
665 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'console', 'will', 'be', 'on', 'top?', 'ps3,', 'xbox', '360,', 'or', 'the', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'Console', 'will', 'be', 'on', 'top', '?', 'PS3', ',', 'XBOX', '360', ',', 'or', 'the', 'Nintendo', 'Wii', '?']
We can't recognize objects for comparision
666 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox', '360', 'vs', 'ps3', 'vs', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['xbox', '360', 'vs', 'ps3', 'vs', 'Nintendo', 'Wii', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'lighter', 'easier to manipulate', 'longer'] ['quicker', 'alot', 'higher', 'easier']
winnder: and  other: 360
acpect winner  lighter, easier to manipulate and longer
acpect other  easier, quicker and higher
type  templates
360 has undeniable advantages. They are lighter, easier to manipulate and longer.
667 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', 'ns', 'nintendo', 'wii', 'vs', 'xbox', '360', 'which', 'one', 'is', 'better', 'and', 'why?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['Ps3', 'ns', 'Nintendo', 'Wii', 'vs', 'Xbox', '360', 'which', 'one', 'is', 'better', 'and', 'why', '?']
or simple split_sent 4
Wii Xbox
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Wii', 'objectB': 'Xbox', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'faster', 'bettereasier', 'powerfull'] ['easier', 'hardware', 'crisper', 'worse to xbox one']
2
winnder: xbox  other: wii
acpect winner  greater and faster
acpect other  easier and worse to xbox one
type  templates
winnder: xbox  other: wii
acpect winner  greater and faster
acpect other  easier and worse to xbox one
self predicate  b
answer begin:  The xbox is b than wii. The reason are greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, bettereasier, powerfull
greater, faster, bettereasier, powerfull
winner_aspects_string1 greater and faster
looser_aspects_string1 easier and worse to xbox one
make response  After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
gen templates 3 After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
full answer  After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
668 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'among', 'x-box,', 'ps3,', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'the', 'best', 'among', 'X', '-', 'box', ',', 'ps3', ',', 'or', 'nintendo', 'wii', '?']
or simple split_sent 11
, nintendo
We can't recognize objects for comparision
669 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox', '360,', 'ps3', 'or', 'wii', 'who', 'do', 'you', 'think', 'will', 'win', 'the', 'war?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Xbox', '360', ',', 'PS3', 'or', 'Wii', 'who', 'do', 'you', 'think', 'will', 'win', 'the', 'war', '?']
or simple split_sent 4
PS3 Wii
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
full answer  Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
670 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'would', 'you', 'recommend:', 'x-box', '360,', 'ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'would', 'you', 'recommend', ':', 'x', '-', 'Box', '360', ',', 'PS3', 'or', 'Wii', '?']
or simple split_sent 11
PS3 Wii
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
gen templates 3 I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
full answer  I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
671 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['the', 'ps3', 'is', 'much', 'better', 'than', 'nintendo', 'wii', 'which', 'is', 'much', 'better', 'than', 'xbox360.', 'agree', 'or', 'disagree?']
['ps3', 'wii']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  It's simple! Wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
gen templates 3 It's simple! Wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
full answer  It's simple! Wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
It's simple! Wii is better, because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
672 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['please', 'i', 'need', 'to', 'know', ',', 'which', 'is', 'the', 'best', 'game', 'console', 'to', 'buy', 'ps3,', 'x360,', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
673 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better,the', 'ps3', 'or', 'wii?']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'one', 'is', 'better', ',', 'the', 'PS3', 'or', 'WII', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PS3', 'objectB': 'WII', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  b
answer begin:  The wii is b than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
gen templates 3 I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
full answer  I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
674 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'wii', 'or', 'ps3?']
['wii']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'better', 'Wii', 'or', 'PS3', '?']
or simple split_sent 4
Wii PS3
aspects ['better']
weights [1]
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['greater', 'hardware', 'prettier', 'strongerbetter'] ['easier', 'faster', 'easier to manage', 'xbox360wii']
2
winnder: wii  other: ps3
acpect winner  greater and prettier
acpect other  easier, faster and easier to manage
type  templates
winnder: wii  other: ps3
acpect winner  greater and prettier
acpect other  easier, faster and easier to manage
self predicate  better
answer begin:  The wii is better than ps3. The reason are greater and prettier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, hardware, prettier, strongerbetter
greater, hardware, prettier, strongerbetter
winner_aspects_string1 greater and prettier
looser_aspects_string1 easier, faster and easier to manage
make response  After much thought, I realized that  wii is better, because of greater and prettier. But you should know that ps3 is easier, faster and easier to manage.
gen templates 3 After much thought, I realized that  wii is better, because of greater and prettier. But you should know that ps3 is easier, faster and easier to manage.
full answer  After much thought, I realized that  wii is better, because of greater and prettier. But you should know that ps3 is easier, faster and easier to manage.
After much thought, I realized that  wii is better, because of greater and prettier. But you should know that ps3 is easier, faster and easier to manage.
675 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'i', 'buy', 'the', 'wii', 'or', 'the', 'ps3', 'for', 'my', 'husband?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Do', 'I', 'buy', 'the', 'Wii', 'or', 'the', 'PS3', 'for', 'my', 'husband', '?']
or simple split_sent 5
Wii the
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  better
answer begin:  The the is better than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  I came to the conclusion that the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
gen templates 3 I came to the conclusion that the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
full answer  I came to the conclusion that the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
I came to the conclusion that the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
676 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'by', 'a', 'wii,', 'a', 'ps3,', 'or', 'an', 'xbox360.?']
['wii,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'by', 'a', 'Wii', ',', 'a', 'Ps3', ',', 'or', 'an', 'Xbox360', '.', '?']
or simple split_sent 9
, an
We can't recognize objects for comparision
677 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'buy', 'the', 'xbox360', 'or', 'the', 'ps3', 'or', 'the', 'nitendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['should', 'i', 'buy', 'the', 'xbox360', 'or', 'the', 'ps3', 'or', 'the', 'nitendo', 'wii', '?']
or simple split_sent 5
xbox360 the
aspects []
weights []
get url
params {'objectA': 'xbox360', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'easier to use', 'greater', 'faster'] ['smarter', 'easier', 'better for the daily grind', 'devs']
2
winnder: the  other: xbox360
acpect winner  greater, faster and easier to use
acpect other  easier, better for the daily grind and smarter
type  templates
winnder: the  other: xbox360
acpect winner  greater, faster and easier to use
acpect other  easier, better for the daily grind and smarter
self predicate  better
answer begin:  The the is better than xbox360. The reason are greater, faster and easier to use. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, easier to use, greater, faster
smoother, easier to use, greater, faster
winner_aspects_string1 greater, faster and easier to use
looser_aspects_string1 easier, better for the daily grind and smarter
make response  I would prefer to use the because of greater, faster and easier to use. But i should tell you that xbox360 is easier, better for the daily grind and smarter.
gen templates 3 I would prefer to use the because of greater, faster and easier to use. But i should tell you that xbox360 is easier, better for the daily grind and smarter.
full answer  I would prefer to use the because of greater, faster and easier to use. But i should tell you that xbox360 is easier, better for the daily grind and smarter.
I would prefer to use the because of greater, faster and easier to use. But i should tell you that xbox360 is easier, better for the daily grind and smarter.
678 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'of', 'the', '3', 'game', 'units,', '360,', 'ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'best', 'of', 'the', '3', 'game', 'units', ',', '360', ',', 'ps3', 'or', 'wii', '?']
We can't recognize objects for comparision
679 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whitch', 'is', 'the', 'best,', 'xbox', '360,', 'wii,', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
680 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'will', 'be', 'better,', 'ps3,', 'xbox', '360,', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'will', 'be', 'better', ',', 'PS3', ',', 'Xbox', '360', ',', 'or', 'nintendo', 'wii', '?']
or simple split_sent 10
, nintendo
We can't recognize objects for comparision
681 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'the', 'best', 'ps3,wii,or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
682 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'system', 'is', 'better', 'ps3,', 'xbox', '360', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'system', 'is', 'better', 'ps3', ',', 'xbox', '360', 'or', 'nintendo', 'wii', '?']
or simple split_sent 8
360 nintendo
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': '360', 'objectB': 'nintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'greater', 'longer', 'cheaper'] ['older', 'richer', 'ps3', 'gta']
2
winnder: nintendo  other: 360
acpect winner  longer, greater and cheaper
acpect other  older and richer
type  templates
winnder: nintendo  other: 360
acpect winner  longer, greater and cheaper
acpect other  older and richer
self predicate  b
answer begin:  The nintendo is b than 360. The reason are longer, greater and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, greater, longer, cheaper
smoother, greater, longer, cheaper
winner_aspects_string1 longer, greater and cheaper
looser_aspects_string1 older and richer
make response  Looks like nintendo is better, because of longer, greater and cheaper. But i should tell you that 360 is older and richer.
gen templates 3 Looks like nintendo is better, because of longer, greater and cheaper. But i should tell you that 360 is older and richer.
full answer  Looks like nintendo is better, because of longer, greater and cheaper. But i should tell you that 360 is older and richer.
Looks like nintendo is better, because of longer, greater and cheaper. But i should tell you that 360 is older and richer.
683 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wii', 'vs', 'ps3.', 'what', 'do', 'you', 'think', 'is', 'better?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Wii', 'vs', 'PS3', '.', 'What', 'do', 'you', 'think', 'is', 'better', '?']
or simple split_sent 1
Wii PS3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['prettier', 'greater', 'hardware', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  b
answer begin:  The ps3 is b than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
gen templates 3 After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
full answer  After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
684 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'are', 'going', 'to', 'buy', 'this', 'year', 'ps3,', '360,', 'or', 'wii?', 'and', 'why?']
['wii?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'one', 'are', 'going', 'to', 'buy', 'this', 'year', 'PS3', ',', '360', ',', 'or', 'Wii', '?', 'and', ' ', 'Why', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
685 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'the', 'wii,', 'ps3,', 'x_box', '360?']
['wii,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to manage gadgets and stuff too', 'easier to use']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
686 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'a', 'wii,gamecube,xbox,xbox', '360,gameboy', 'sp,psp', 'or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'a', 'wii', ',', 'gamecube', ',', 'xbox', ',', 'xbox', '360,gameboy', 'SP', ',', 'PSP', 'or', 'PS3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
687 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'u', 'like', 'better', 'ps3,wii,', 'or', 'xflop.?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'do', 'u', 'like', 'better', 'PS3,wii', ',', 'or', 'xflop', '.', '?']
or simple split_sent 7
, xflop
We can't recognize objects for comparision
688 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['x360,', 'wii,', 'or', 'ps3:', 'which', 'looks', 'the', 'best', 'now', 'and', 'later?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['X360', ',', 'Wii', ',', 'or', 'PS3', ':', 'Which', 'looks', 'the', 'best', 'now', 'and', 'later', '?']
or simple split_sent 4
, PS3
We can't recognize objects for comparision
689 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'game', 'system', 'is', 'better', 'for', 'all', 'around', 'entertainment', 'ps3,', 'xbox360,', 'or', 'the', 'wii.?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 's', 'game', 'system', 'is', 'better', 'for', 'all', 'around', 'Entertainment', 'PS3', ',', 'XBox360', ',', 'or', 'The', 'Wii', '.', '?']
We can't recognize objects for comparision
690 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'a', 'xbox360,ps3,or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
691 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'be', 'better', 'to', 'get...the', 'ps3', 'or', 'the', 'wii?']
['ps3']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'would', 'be', 'better', 'to', 'get', '...', 'the', 'ps3', 'or', 'the', 'Wii', '?']
or simple split_sent 9
ps3 the
aspects ['better']
weights [1]
get url
params {'objectA': 'ps3', 'objectB': 'the', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['easier', 'bluray', 'disc', 'smoother'] ['more to use', 'xbox360wii', 'nobody', 'cares']
2
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
type  templates
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
self predicate  better
answer begin:  The the is better than ps3. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, bluray, disc, smoother
easier, bluray, disc, smoother
winner_aspects_string1  and easier
looser_aspects_string1  and more to use
make response  It's simple! The is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
gen templates 3 It's simple! The is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
full answer  It's simple! The is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
It's simple! The is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
692 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'next-gen', 'console', 'has', 'the', 'best', 'games:', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'next', '-', 'gen', 'console', 'has', 'the', 'best', 'games', ':', 'Wii', 'or', 'PS3', '?']
or simple split_sent 11
Wii PS3
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['greater', 'hardware', 'prettier', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  better
answer begin:  The ps3 is better than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
gen templates 3 Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
full answer  Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
693 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['opinion', 'what', 'system', 'is', 'better', 'wii,', '360,', 'or', 'ps3?']
['wii,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Opinion', 'what', 'system', 'is', 'better', 'Wii', ',', '360', ',', 'or', 'PS3', '?']
or simple split_sent 9
, PS3
We can't recognize objects for comparision
694 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'think', 'is', 'better', 'ps3,', 'xbox', '360,', 'or', 'nintendo', 'wii', 'and', 'why?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'do', 'you', 'think', 'is', 'better', 'PS3', ',', 'Xbox', '360', ',', 'or', 'Nintendo', 'Wii', 'and', 'why', '?']
or simple split_sent 11
, Nintendo
We can't recognize objects for comparision
695 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['would', 'you', 'preffer', 'a', 'ps3', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Would', 'you', 'preffer', 'a', 'PS3', 'or', 'Nintendo', 'Wii', '?']
or simple split_sent 5
PS3 Nintendo
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'longer', 'cheaper', 'smoother'] ['easier to find', 'gameplay', 'titles', 'richer']
2
winnder: nintendo  other: ps3
acpect winner  greater, longer and cheaper
acpect other  easier to find and richer
type  templates
winnder: nintendo  other: ps3
acpect winner  greater, longer and cheaper
acpect other  easier to find and richer
self predicate  better
answer begin:  The nintendo is better than ps3. The reason are greater, longer and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, cheaper, smoother
greater, longer, cheaper, smoother
winner_aspects_string1 greater, longer and cheaper
looser_aspects_string1 easier to find and richer
make response  After much thought, I realized that  nintendo is better, because of greater, longer and cheaper. But you should know that ps3 is easier to find and richer.
gen templates 3 After much thought, I realized that  nintendo is better, because of greater, longer and cheaper. But you should know that ps3 is easier to find and richer.
full answer  After much thought, I realized that  nintendo is better, because of greater, longer and cheaper. But you should know that ps3 is easier to find and richer.
After much thought, I realized that  nintendo is better, because of greater, longer and cheaper. But you should know that ps3 is easier to find and richer.
696 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'best.....wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'the', 'best', '.....', 'wii', ',', 'ps3', ',', 'or', 'xbox', '360', '?']
or simple split_sent 9
, xbox
We can't recognize objects for comparision
697 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'ps3,360', 'or', 'wii', 'which', 'is', 'best?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Is', 'PS3,360', 'or', 'wii', 'which', 'is', 'best', '?']
or simple split_sent 2
PS3,360 wii
aspects []
weights []
get url
params {'objectA': 'PS3,360', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: wii  other: ps3,360
acpect winner  
acpect other  
type  templates
winnder: wii  other: ps3,360
acpect winner  
acpect other  
self predicate  better
answer begin:  The wii is better than ps3,360. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer wii than ps3,360.
full answer  I would prefer wii than ps3,360.
I would prefer wii than ps3,360.
698 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['sorry,', 'must', 'ask.', 'which', 'one:', '360,', 'wii,', 'or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Sorry', ',', 'must', 'ask', '.', ' ', 'Which', 'one', ':', '360', ',', 'Wii', ',', 'or', 'PS3', '?']
or simple split_sent 13
, PS3
We can't recognize objects for comparision
699 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'of', 'these', 'is', 'the', 'best', 'console:', 'nintendo', 'wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'of', 'these', 'is', 'the', 'best', 'console', ':', 'nintendo', 'wii', ',', 'ps3', ',', 'or', 'xbox', '360', '?']
or simple split_sent 13
, xbox
We can't recognize objects for comparision
700 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'gaming', 'system', 'ever', 'ps3,', 'xbox360,', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'the', 'best', 'gaming', 'system', 'ever', 'PS3', ',', 'XBOX360', ',', 'or', 'NINTENDO', 'WII', '?']
We can't recognize objects for comparision
701 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'should', 'i', 'get???', 'the', 'wii', 'or', 'the', 'ps3???']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'should', 'I', 'GET', '?', '?', '?', 'The', 'Wii', 'or', 'the', 'PS3', '?', '?', '?']
or simple split_sent 9
Wii the
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  better
answer begin:  The the is better than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  I would prefer to use the because of faster, larger and closer to the 360. Wii is greater and bigger.
gen templates 3 I would prefer to use the because of faster, larger and closer to the 360. Wii is greater and bigger.
full answer  I would prefer to use the because of faster, larger and closer to the 360. Wii is greater and bigger.
I would prefer to use the because of faster, larger and closer to the 360. Wii is greater and bigger.
702 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'better:ps3,xbox360', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', "'s", 'better', ':', 'ps3,xbox360', 'or', 'nintendo', 'wii', '?']
or simple split_sent 5
ps3,xbox360 nintendo
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3,xbox360', 'objectB': 'nintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: nintendo  other: ps3,xbox360
acpect winner  
acpect other  
type  templates
winnder: nintendo  other: ps3,xbox360
acpect winner  
acpect other  
self predicate  b
answer begin:  The nintendo is b than ps3,xbox360. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer nintendo than ps3,xbox360.
full answer  I would prefer nintendo than ps3,xbox360.
I would prefer nintendo than ps3,xbox360.
703 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'rules', 'ps3', 'or', 'wii?']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'Rules', 'PS3', 'or', 'Wii', '?']
aspects []
weights []
get url
params {'objectA': 'Rules PS3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: wii  other: rules ps3
acpect winner  
acpect other  
type  templates
winnder: wii  other: rules ps3
acpect winner  
acpect other  
self predicate  better
answer begin:  The wii is better than rules ps3. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer wii than rules ps3.
full answer  I would prefer wii than rules ps3.
I would prefer wii than rules ps3.
704 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'console', 'for', 'a', '12', 'year', 'old.', 'ps3', 'or', 'wii,', 'not', 'thinking', 'about', 'cost?']
['wii,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'the', 'best', 'console', 'for', 'a', '12', 'year', 'old', '.', 'PS3', 'or', 'Wii', ',', 'not', 'thinking', 'about', 'cost', '?']
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: wii  other: wii
acpect winner  
acpect other  
type  templates
winnder: wii  other: wii
acpect winner  
acpect other  
self predicate  better
answer begin:  The wii is better than wii. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer wii than wii.
full answer  I would prefer wii than wii.
I would prefer wii than wii.
705 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'new', 'system', 'do', 'you', 'think', 'will', 'be', 'the', 'best', 'for', 'the', 'the', 'best', 'price?', 'the', 'wii', 'the', 'ps3', 'orthe', 'xbox', '360?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
706 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['who', 'do', 'u', 'thing', 'is', 'better', 'ps3', 'or', 'wii', '?????']
['ps3', 'wii']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
gen templates 3 I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
full answer  I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
707 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'the', 'wii', 'or', 'the', 'ps3?', 'i', 'like', 'em', 'both.?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'get', 'the', 'Wii', 'or', 'the', 'PS3', '?', 'I', 'like', 'em', 'both', '.', '?']
or simple split_sent 5
Wii the
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  better
answer begin:  The the is better than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  Looks like the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
gen templates 3 Looks like the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
full answer  Looks like the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
Looks like the is better, because of faster, larger and closer to the 360. But it will be useful for you to know that wii is greater and bigger.
708 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'prefer?', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'do', 'you', 'prefer', '?', 'wii', 'or', 'ps3', '?']
or simple split_sent 6
wii ps3
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'ps3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['greater', 'hardware', 'prettier', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  better
answer begin:  The ps3 is better than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  Looks like ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
gen templates 3 Looks like ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
full answer  Looks like ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
Looks like ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
709 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'system', 'will', 'sell', 'more', 'this', 'christmas', 'xbox360,', 'ps3,', 'or', 'the', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'system', 'will', 'sell', 'more', 'this', 'Christmas', 'Xbox360', ',', 'PS3', ',', 'or', 'the', 'Wii', '?']
or simple split_sent 11
, the
We can't recognize objects for comparision
710 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['the', 'wii', 'ps3', 'and', 'the', 'x', '360.', 'i', 'will', 'tell', 'you', 'what', 'the', 'best', 'is', 'and', 'im', 'now', 'fanboy', 'okay!?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
711 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox', '360', 'vs', 'ps3', 'vs', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['XBOX', '360', 'vs', 'PS3', 'vs', 'Wii', '?']
or simple split_sent 2
360 PS3
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'PS3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'nicer', 'smootherbetter', 'bjs'] ['bluray', 'disc', 'easier', 'easier to program for']
2
winnder: ps3  other: 360
acpect winner  
acpect other  easier and easier to program for
type  templates
winnder: ps3  other: 360
acpect winner  
acpect other  easier and easier to program for
self predicate  better
answer begin:  The ps3 is better than 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, nicer, smootherbetter, bjs
smoother, nicer, smootherbetter, bjs
smth wrong in answer generation, please try again
712 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'console', 'is', 'bought', 'more', 'often', 'ps3', 'or', 'wii?']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'console', 'is', 'bought', 'more', 'often', 'PS3', 'or', 'Wii', '?']
or simple split_sent 7
PS3 Wii
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  m
answer begin:  The wii is m than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  It's simple! Wii is better, because of quicker, longer and easier to develop for. Ps3 is faster, easier to dev for and faster to better.
gen templates 3 It's simple! Wii is better, because of quicker, longer and easier to develop for. Ps3 is faster, easier to dev for and faster to better.
full answer  It's simple! Wii is better, because of quicker, longer and easier to develop for. Ps3 is faster, easier to dev for and faster to better.
It's simple! Wii is better, because of quicker, longer and easier to develop for. Ps3 is faster, easier to dev for and faster to better.
713 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['wat', 'system', 'should', 'i', 'get?', 'the', 'wii?', '360?', 'or', 'ps3?']
['wii?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Wat', 'system', 'should', 'i', 'get', '?', 'The', 'Wii', '?', '360', '?', 'or', 'PS3', '?']
or simple split_sent 11
? PS3
We can't recognize objects for comparision
714 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'the', 'xbox', '360,', 'wii', 'or', 'ps3?', 'i', 'cant', 'decide', 'which', 'ones', 'better!?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['should', 'i', 'get', 'the', 'xbox', '360', ',', 'wii', 'or', 'ps3', '?', 'i', 'ca', 'nt', 'decide', 'which', 'ones', 'better', '!', '?']
or simple split_sent 8
wii ps3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'ps3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['prettier', 'greater', 'hardware', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  b
answer begin:  The ps3 is b than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
gen templates 3 Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
full answer  Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
Looks like ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
715 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'better', 'game', 'system?', 'xbox', '360,ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'the', 'better', 'game', 'system', '?', 'xbox', '360,ps3', 'or', 'wii', '?']
or simple split_sent 9
360,ps3 wii
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': '360,ps3', 'objectB': 'wii', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'cheaper', 'consoles', 'graphics'] ['option', 'version', 'ram', 'xbox']
2
winnder: wii  other: 360,ps3
acpect winner  cheaper
acpect other  
type  templates
winnder: wii  other: 360,ps3
acpect winner  cheaper
acpect other  
self predicate  b
answer begin:  The wii is b than 360,ps3. The reason are cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, cheaper, consoles, graphics
smoother, cheaper, consoles, graphics
winner_aspects_string1  and cheaper
smth wrong in answer generation, please try again
716 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'better,', 'nintdendo', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'better', ',', 'Nintdendo', 'Wii', 'or', 'PS3', '?']
or simple split_sent 6
Wii PS3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['prettier', 'greater', 'hardware', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  b
answer begin:  The ps3 is b than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  It's simple! Ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
gen templates 3 It's simple! Ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
full answer  It's simple! Ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
It's simple! Ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
717 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'system', 'is', 'better:ps3,xbox360', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'system', 'is', 'better', ':', 'ps3,xbox360', 'or', 'nintendo', 'wii', '?']
or simple split_sent 6
ps3,xbox360 nintendo
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3,xbox360', 'objectB': 'nintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: nintendo  other: ps3,xbox360
acpect winner  
acpect other  
type  templates
winnder: nintendo  other: ps3,xbox360
acpect winner  
acpect other  
self predicate  b
answer begin:  The nintendo is b than ps3,xbox360. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer nintendo than ps3,xbox360.
full answer  I would prefer nintendo than ps3,xbox360.
I would prefer nintendo than ps3,xbox360.
718 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'wii', 'or', 'a', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'get', 'a', 'Wii', 'or', 'a', 'PS3', '?']
or simple split_sent 5
Wii a
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'easier', 'easier to put games on pc', 'safer'] ['finer', 'faster', 'multiplatform', 'games']
2
winnder: a  other: wii
acpect winner  easier to put games on pc, safer and easier
acpect other  faster
type  templates
winnder: a  other: wii
acpect winner  easier to put games on pc, safer and easier
acpect other  faster
self predicate  better
answer begin:  The a is better than wii. The reason are easier to put games on pc, safer and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, easier, easier to put games on pc, safer
smoother, easier, easier to put games on pc, safer
winner_aspects_string1 easier to put games on pc, safer and easier
looser_aspects_string1  and faster
make response  I came to the conclusion that a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
gen templates 3 I came to the conclusion that a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
full answer  I came to the conclusion that a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
I came to the conclusion that a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
719 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'should', 'i', 'get', 'the', 'ps3', ',', 'xbox', '360', 'or', 'the', 'nintendo', 'wii', '?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'should', 'i', 'get', 'the', 'PS3', ',', 'xbox', '360', 'or', 'the', 'nintendo', 'Wii', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'lighter', 'easier to manipulate', 'longer'] ['quicker', 'alot', 'higher', 'easier']
winnder: and  other: 360
acpect winner  lighter, easier to manipulate and longer
acpect other  easier, quicker and higher
type  templates
360 has undeniable advantages. They are lighter, easier to manipulate and longer.
720 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'best?', 'ps3,', 'xbox', '360,', 'or', 'nintndo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'best', '?', 'PS3', ',', 'XBOX', '360', ',', 'or', 'Nintndo', 'Wii', '?']
We can't recognize objects for comparision
721 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', '?', 'ps3', 'or', 'nintendo', '-wii', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', '?', 'PS3', 'Or', 'Nintendo', '-Wii', 'or', 'Xbox', '360', '?']
We can't recognize objects for comparision
722 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'game', 'consol', 'do', 'you', 'think', 'better', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'game', 'consol', 'do', 'you', 'think', 'better', 'wii', 'or', 'PS3', '?']
or simple split_sent 8
wii PS3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'PS3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['prettier', 'greater', 'hardware', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  b
answer begin:  The ps3 is b than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  It's simple! Ps3 is better, because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
gen templates 3 It's simple! Ps3 is better, because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
full answer  It's simple! Ps3 is better, because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
It's simple! Ps3 is better, because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
723 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wii', 'vs', 'ps3', 'vs', 'xbox', '360?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Wii', 'vs', 'PS3', 'vs', 'Xbox', '360', '?']
or simple split_sent 1
Wii PS3
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['greater', 'hardware', 'prettier', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  better
answer begin:  The ps3 is better than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
gen templates 3 It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
full answer  It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
724 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'the', 'best', 'game', 'system,xbox360~wii~or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
725 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'will', 'win?', 'wii', 'vs.', 'xbox360', 'vs.', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem vs.
tokens ['Which', 'will', 'win', '?', 'Wii', 'Vs', '.', 'Xbox360', 'Vs', '.', 'PS3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
726 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'ps3', 'xbox', '360', 'or', 'wii?']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'ps3', 'xbox', '360', 'or', 'wii', '?']
or simple split_sent 6
360 wii
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': '360', 'objectB': 'wii', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'smoother', 'quicker', 'ps3'] ['closer to the 360', 'faster to better', 'earlier', 'lighter']
2
winnder: wii  other: 360
acpect winner  easier and quicker
acpect other  earlier, faster to better and closer to the 360
type  templates
winnder: wii  other: 360
acpect winner  easier and quicker
acpect other  earlier, faster to better and closer to the 360
self predicate  b
answer begin:  The wii is b than 360. The reason are easier and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, quicker, ps3
easier, smoother, quicker, ps3
winner_aspects_string1 easier and quicker
looser_aspects_string1 earlier, faster to better and closer to the 360
make response  I would prefer to use wii because of easier and quicker. But i should tell you that 360 is earlier, faster to better and closer to the 360.
gen templates 3 I would prefer to use wii because of easier and quicker. But i should tell you that 360 is earlier, faster to better and closer to the 360.
full answer  I would prefer to use wii because of easier and quicker. But i should tell you that 360 is earlier, faster to better and closer to the 360.
I would prefer to use wii because of easier and quicker. But i should tell you that 360 is earlier, faster to better and closer to the 360.
727 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'people', 'have', 'against', 'the', 'wii?', 'cant', 'they', 'see', 'that', 'ps3', '&', 'xbox', 'arent', 'even', 'in', 'the', 'same', 'category?']
['wii?']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
728 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'best', 'the', 'wiii', 'or', 'the', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 's', 'the', 'best', 'the', 'wiii', 'or', 'the', 'ps3', '?']
or simple split_sent 6
wiii the
aspects []
weights []
get url
params {'objectA': 'wiii', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater'] ['faster']
2
winnder: the  other: wiii
acpect winner  greater
acpect other  faster
type  templates
winnder: the  other: wiii
acpect winner  greater
acpect other  faster
self predicate  better
answer begin:  The the is better than wiii. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater
greater
winner_aspects_string1 greater
looser_aspects_string1 faster
make response  After much thought, I realized that  the is better, because of greater. But it will be useful for you to know that wiii is faster.
gen templates 3 After much thought, I realized that  the is better, because of greater. But it will be useful for you to know that wiii is faster.
full answer  After much thought, I realized that  the is better, because of greater. But it will be useful for you to know that wiii is faster.
After much thought, I realized that  the is better, because of greater. But it will be useful for you to know that wiii is faster.
729 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'be', 'better', 'to', 'get?', 'x-box', '360?', 'ps3?', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'would', 'be', 'better', 'to', 'get', '?', 'X', '-', 'Box', '360', '?', 'PS3', '?', 'or', 'Nintendo', 'Wii', '?']
or simple split_sent 14
? Nintendo
We can't recognize objects for comparision
730 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'the', 'wii,', 'ps3,', 'or', 'the', '360', 'the', 'best?']
['wii,']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Is', 'the', 'wii', ',', 'ps3', ',', 'or', 'the', '360', 'the', 'best', '?']
or simple split_sent 6
, the
We can't recognize objects for comparision
731 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox', '360', 'vs.', 'ps3', 'vs.', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs.
tokens ['xbox', '360', 'vs.', 'PS3', 'vs.', 'Wii', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'lighter', 'easier to manipulate', 'longer'] ['quicker', 'alot', 'higher', 'easier']
winnder: and  other: 360
acpect winner  lighter, easier to manipulate and longer
acpect other  easier, quicker and higher
type  templates
360 has undeniable advantages. They are lighter, easier to manipulate and longer.
732 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'ps3,', 'wii', ',or', 'the', 'xbox360', 'and', 'why?']
['wii']
['better']
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects ['better']
weights [1]
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'lighter', 'easier to manage gadgets and stuff too']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  lighter, greater and quicker
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
733 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'should', 'i', 'buy,', 'what', 'one', 'is', 'better?', 'ps3,', 'wii,', 'xbox360?']
[]
['better?']
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
734 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'the', 'wii', 'or', 'the', 'ps3,', 'i', 'already', 'have', 'the', 'xbox', '360', 'though?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'get', 'the', 'Wii', 'or', 'the', 'PS3', ',', 'I', 'already', 'have', 'the', 'Xbox', '360', 'though', '?']
or simple split_sent 5
Wii the
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  better
answer begin:  The the is better than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  Looks like the is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
gen templates 3 Looks like the is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
full answer  Looks like the is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
Looks like the is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
735 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'you', 'buy?', 'ps3,xbox360', 'or', 'the', 'nitendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'would', 'you', 'buy', '?', 'PS3,Xbox360', 'or', 'the', 'Nitendo', 'Wii', '?']
or simple split_sent 6
PS3,Xbox360 the
aspects []
weights []
get url
params {'objectA': 'PS3,Xbox360', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'strongerbetter'] ['devs', 'fanbase', 'ps3xbox360']
2
winnder: the  other: ps3,xbox360
acpect winner  easier
acpect other  
type  templates
winnder: the  other: ps3,xbox360
acpect winner  easier
acpect other  
self predicate  better
answer begin:  The the is better than ps3,xbox360. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, strongerbetter
easier, strongerbetter
winner_aspects_string1  and easier
smth wrong in answer generation, please try again
736 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'a', 'wii', 'or', 'a', 'ps3???']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', ',', 'a', 'Wii', 'or', 'a', 'PS3', '?', '?', '?']
or simple split_sent 6
Wii a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Wii', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'easier', 'easier to put games on pc', 'better to be safe'] ['finer', 'faster', 'multiplatform', 'games']
2
winnder: a  other: wii
acpect winner  easier to put games on pc, better to be safe and easier
acpect other  faster
type  templates
winnder: a  other: wii
acpect winner  easier to put games on pc, better to be safe and easier
acpect other  faster
self predicate  b
answer begin:  The a is b than wii. The reason are easier to put games on pc, better to be safe and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, easier, easier to put games on pc, better to be safe
smoother, easier, easier to put games on pc, better to be safe
winner_aspects_string1 easier to put games on pc, better to be safe and easier
looser_aspects_string1  and faster
make response  I would prefer to use a because of easier to put games on pc, better to be safe and easier. But i should tell you that wii is  and faster.
gen templates 3 I would prefer to use a because of easier to put games on pc, better to be safe and easier. But i should tell you that wii is  and faster.
full answer  I would prefer to use a because of easier to put games on pc, better to be safe and easier. But i should tell you that wii is  and faster.
I would prefer to use a because of easier to put games on pc, better to be safe and easier. But i should tell you that wii is  and faster.
737 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['why', 'do', 'you', 'think', 'the', 'nintendo', 'wii', 'could', 'win', 'the', 'ps3', 'and', 'xbox?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
738 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'got', 'better', 'reviews', 'between', 'xbox360,ps3,wii?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
739 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['proof', 'that', 'the', 'ps3', 'is', 'better', 'than', 'the', 'wii.?']
['ps3']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'easier to use', 'easier', 'lighter'] ['cell', 'easier to setup', 'bigger', 'version']
winnder: and  other: ps3
acpect winner  lighter, easier to use and easier
acpect other  bigger and easier to setup
type  templates
ps3 has undeniable advantages. They are lighter, easier to use and easier.
740 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'console', 'will', 'be', 'better?', 'ps3,xbox360', 'or', 'the', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'Console', 'will', 'be', 'better', '?', 'PS3,Xbox360', 'or', 'the', 'Nintendo', 'Wii', '?']
We can't recognize objects for comparision
741 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'the', 'best', 'system', 'ps3', 'or', 'the', 'wii????']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'one', 'is', 'the', 'best', 'system', 'ps3', 'or', 'the', 'wii', '?', '?', '?', '?']
or simple split_sent 7
ps3 the
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'bluray', 'disc', 'smoother'] ['more to use', 'nobody', 'cares', 'xbox360wii']
2
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
type  templates
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
self predicate  better
answer begin:  The the is better than ps3. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, bluray, disc, smoother
easier, bluray, disc, smoother
winner_aspects_string1  and easier
looser_aspects_string1  and more to use
make response  I came to the conclusion that the is better, because of  and easier. But you should know that ps3 is  and more to use.
gen templates 3 I came to the conclusion that the is better, because of  and easier. But you should know that ps3 is  and more to use.
full answer  I came to the conclusion that the is better, because of  and easier. But you should know that ps3 is  and more to use.
I came to the conclusion that the is better, because of  and easier. But you should know that ps3 is  and more to use.
742 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'will', 'win', 'the', 'next', 'gen', 'war', 'ps3,360,or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
743 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'a', 'ps3', 'or', 'a', 'nintendo', 'wii?']
['ps3']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'a', 'ps3', 'or', 'a', 'nintendo', 'wii', '?']
or simple split_sent 5
ps3 a
aspects ['better']
weights [1]
get url
params {'objectA': 'ps3', 'objectB': 'a', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['smoother', 'quicker', 'easier', 'greater'] ['faster', 'bjs', 'tofrom', 'xbox360wii']
2
winnder: a  other: ps3
acpect winner  quicker, greater and easier
acpect other  faster
type  templates
winnder: a  other: ps3
acpect winner  quicker, greater and easier
acpect other  faster
self predicate  better
answer begin:  The a is better than ps3. The reason are quicker, greater and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, quicker, easier, greater
smoother, quicker, easier, greater
winner_aspects_string1 quicker, greater and easier
looser_aspects_string1  and faster
make response  I would prefer to use a because of quicker, greater and easier. Ps3 is  and faster.
gen templates 3 I would prefer to use a because of quicker, greater and easier. Ps3 is  and faster.
full answer  I would prefer to use a because of quicker, greater and easier. Ps3 is  and faster.
I would prefer to use a because of quicker, greater and easier. Ps3 is  and faster.
744 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'should', 'i', 'get', 'wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'should', 'i', 'get', 'wii', ',', 'ps3', ',', 'or', 'xbox', '360', '?']
or simple split_sent 8
, xbox
We can't recognize objects for comparision
745 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'console', 'do', 'you', 'like', 'better', 'the', 'nintendo', 'wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'console', 'do', 'you', 'like', 'better', 'the', 'Nintendo', 'Wii', ',', 'PS3', ',', 'or', 'XBox', '360', '?']
We can't recognize objects for comparision
746 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Should', 'i', 'get', 'a', 'PS3', 'or', 'Wii', '?']
or simple split_sent 5
PS3 Wii
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
full answer  I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
747 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'r', 'better', '1', 'ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'r', 'better', '1', 'PS3', 'OR', 'WII', '?']
We can't recognize objects for comparision
748 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', 'vs.', 'xbox360', 'vs', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['PS3', 'vs.', 'XBox360', 'vs', 'Nintendo', 'Wii', '?']
aspects []
weights []
get url
params {'objectA': 'XBox360', 'objectB': 'Nintendo Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier'] ['fun', 'games']
2
winnder: nintendo wii  other: xbox360
acpect winner  easier
acpect other  
type  templates
winnder: nintendo wii  other: xbox360
acpect winner  easier
acpect other  
self predicate  better
answer begin:  The nintendo wii is better than xbox360. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier
easier
winner_aspects_string1 easier
smth wrong in answer generation, please try again
749 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better??', 'ps3', 'or', 'nintendo', 'wii??']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'Better', '?', '?', 'PS3', 'OR', 'NINTENDO', 'WII', '?', '?']
len(obj1) > 0 and len(obj2) == 0
aspects Better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3', 'objectB': 'and', 'fs': 'true', 'aspect1': 'B', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates Better
create fro json self.predicates B
aspects  ['smoother', 'easier to use', 'easier', 'lighter'] ['cell', 'easier to setup', 'bigger', 'version']
winnder: and  other: ps3
acpect winner  lighter, easier to use and easier
acpect other  bigger and easier to setup
type  templates
ps3 has undeniable advantages. They are lighter, easier to use and easier.
750 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'would', 'you', 'prefer:', 'xbox360,', 'nintendo', 'wii,', 'ps3?', 'why?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
751 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'system', 'sold', 'more', 'the', 'wii', 'or', 'the', 'ps3?']
['wii']
['more']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'system', 'sold', 'more', 'the', 'Wii', 'or', 'the', 'PS3', '?']
or simple split_sent 6
Wii the
aspects ['more']
weights [1]
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true', 'aspect1': 'more', 'weight1': 1}
1
create fro json predicates ['more']
create fro json self.predicates more
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  more
answer begin:  The the is more than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  I came to the conclusion that the is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
gen templates 3 I came to the conclusion that the is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
full answer  I came to the conclusion that the is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
I came to the conclusion that the is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
752 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox', '360,', 'ps3', 'or', 'wii?', 'which', 'should', 'i', 'get?']
['wii?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Xbox', '360', ',', 'PS3', 'or', 'Wii', '?', 'Which', 'should', 'I', 'get', '?']
or simple split_sent 4
PS3 Wii
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  Looks like wii is better, because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 Looks like wii is better, because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
full answer  Looks like wii is better, because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
Looks like wii is better, because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
753 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'more', 'fun', 'the', 'wii,xbox360', 'or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'more', 'fun', 'the', 'Wii', ',', 'xbox360', 'or', 'ps3', '?']
or simple split_sent 8
xbox360 ps3
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'xbox360', 'objectB': 'ps3', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['faster', 'greater', 'cheaper', 'xbox360wii'] ['easier', 'dram', 'die', 'better for my hands']
2
winnder: ps3  other: xbox360
acpect winner  faster, greater and cheaper
acpect other  easier and better for my hands
type  templates
winnder: ps3  other: xbox360
acpect winner  faster, greater and cheaper
acpect other  easier and better for my hands
self predicate  m
answer begin:  The ps3 is m than xbox360. The reason are faster, greater and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, cheaper, xbox360wii
faster, greater, cheaper, xbox360wii
winner_aspects_string1 faster, greater and cheaper
looser_aspects_string1 easier and better for my hands
make response  After much thought, I realized that  ps3 is better, because of faster, greater and cheaper. But i should tell you that xbox360 is easier and better for my hands.
gen templates 3 After much thought, I realized that  ps3 is better, because of faster, greater and cheaper. But i should tell you that xbox360 is easier and better for my hands.
full answer  After much thought, I realized that  ps3 is better, because of faster, greater and cheaper. But i should tell you that xbox360 is easier and better for my hands.
After much thought, I realized that  ps3 is better, because of faster, greater and cheaper. But i should tell you that xbox360 is easier and better for my hands.
754 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'system', 'will', 'win', 'this', 'holiday?', '(nintendo', 'wii,', 'xbox', '360', 'or', 'ps3)?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'system', 'will', 'win', 'this', 'holiday', '?', '(', 'NinTendo', 'Wii', ',', 'XBOX', '360', 'or', 'PS3', ')', '?']
We can't recognize objects for comparision
755 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['sony', 'ps3', 'vs', 'microsoft', 'xbox', '360', 'vs', 'nintendo', 'wii?']
['sony']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Sony', 'Ps3', 'vs', 'Microsoft', 'Xbox', '360', 'vs', 'Nintendo', 'wii', '?']
aspects []
weights []
get url
params {'objectA': 'sony', 'objectB': 'Microsoft', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'potential', 'stupider'] ['faster', 'quicker', 'easier', 'quicker to its missteps']
2
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
type  templates
winnder: sony  other: microsoft
acpect winner  smarter
acpect other  faster, quicker and quicker to its missteps
self predicate  better
answer begin:  The sony is better than microsoft. The reason are smarter. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smarter, potential, stupider
smarter, potential, stupider
winner_aspects_string1  and smarter
looser_aspects_string1 faster, quicker and quicker to its missteps
make response  Looks like sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
gen templates 3 Looks like sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
full answer  Looks like sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
Looks like sony is better, because of  and smarter. But i should tell you that microsoft is faster, quicker and quicker to its missteps.
756 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'the', 'better', 'next', 'gen', 'console(ps3,', 'wii,', 'or', 'xbox', '360', 'and', 'please', 'dont', 'just', 'say', '360', 'cause', 'halo', 'thats', 'gay)?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'the', 'better', 'next', 'gen', 'console(PS3', ',', 'Wii', ',', 'or', 'XBOX', '360', 'and', 'please', 'do', 'nt', 'just', 'say', '360', 'cause', 'Halo', 'that', 's', 'gay', ')', '?']
We can't recognize objects for comparision
757 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['would', 'you', 'guys', 'recommend', 'the', 'nintendo', 'wii', 'or', 'the', 'ps3?', 'i', 'know,', 'common', 'question', 'but', "i'm", 'just', 'wondering.?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Would', 'you', 'guys', 'recommend', 'the', 'Nintendo', 'Wii', 'or', 'the', 'PS3', '?', 'I', 'know', ',', 'common', 'question', 'but', 'I', "'m", 'just', 'wondering', '.', '?']
or simple split_sent 7
Wii the
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  better
answer begin:  The the is better than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  It's simple! The is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
gen templates 3 It's simple! The is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
full answer  It's simple! The is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
It's simple! The is better, because of faster, larger and closer to the 360. But you should know that wii is greater and bigger.
758 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'game', 'do', 'you', 'want', 'the', 'most', 'for', 'wii,', 'ps3,', 'or', 'the', 'computer?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'game', 'do', 'you', 'want', 'the', 'most', 'for', 'Wii', ',', 'Ps3', ',', 'or', 'the', 'computer', '?']
or simple split_sent 12
, the
We can't recognize objects for comparision
759 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'nintendo', 'wii', 'or', 'a', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['should', 'i', 'get', 'a', 'Nintendo', 'wii', 'or', 'a', 'PS3', '?']
or simple split_sent 6
wii a
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'a', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'easier', 'easier to put games on pc', 'safer'] ['finer', 'faster', 'multiplatform', 'games']
2
winnder: a  other: wii
acpect winner  easier to put games on pc, safer and easier
acpect other  faster
type  templates
winnder: a  other: wii
acpect winner  easier to put games on pc, safer and easier
acpect other  faster
self predicate  better
answer begin:  The a is better than wii. The reason are easier to put games on pc, safer and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, easier, easier to put games on pc, safer
smoother, easier, easier to put games on pc, safer
winner_aspects_string1 easier to put games on pc, safer and easier
looser_aspects_string1  and faster
make response  After much thought, I realized that  a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
gen templates 3 After much thought, I realized that  a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
full answer  After much thought, I realized that  a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
After much thought, I realized that  a is better, because of easier to put games on pc, safer and easier. But you should know that wii is  and faster.
760 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'u', 'reacon', 'will', 'be', 'the', 'best', 'next', 'gen', 'consol...will', 'it', 'be', 'ps3.', 'wii', 'or', 'xbox360?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'do', 'u', 'reacon', 'will', 'be', 'the', 'best', 'next', 'gen', 'consol', '...', 'will', 'it', 'be', 'PS3', '.', 'WII', 'or', 'XBOX360', '?']
or simple split_sent 18
WII XBOX360
aspects []
weights []
get url
params {'objectA': 'WII', 'objectB': 'XBOX360', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'strongerbetter', 'bigger', 'man'] ['graphics', 'lazy', 'cooler', 'strange']
2
winnder: wii  other: xbox360
acpect winner  easier and bigger
acpect other  
type  templates
winnder: wii  other: xbox360
acpect winner  easier and bigger
acpect other  
self predicate  better
answer begin:  The wii is better than xbox360. The reason are easier and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, strongerbetter, bigger, man
easier, strongerbetter, bigger, man
winner_aspects_string1 easier and bigger
smth wrong in answer generation, please try again
761 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'is', 'better', 'wii', 'or', 'ps3', 'or', '360?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'do', 'you', 'think', 'is', 'better', 'wii', 'or', 'ps3', 'or', '360', '?']
or simple split_sent 7
wii ps3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'ps3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['prettier', 'greater', 'hardware', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  b
answer begin:  The ps3 is b than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  I would prefer to use ps3 because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
gen templates 3 I would prefer to use ps3 because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
full answer  I would prefer to use ps3 because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
I would prefer to use ps3 because of easier, faster and easier to manage. But it will be useful for you to know that wii is greater and prettier.
762 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'video', 'game', 'system', 'do', 'you', 'think', 'will', 'be', 'the', 'biggest', 'seller,', 'ps3,', 'nintendo', 'wii,', 'or', 'x-box', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'video', 'game', 'system', 'do', 'you', 'think', 'will', 'be', 'the', 'biggest', 'seller', ',', 'PS3', ',', 'Nintendo', 'Wii', ',', 'Or', 'X', '-', 'box', '360', '?']
We can't recognize objects for comparision
763 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['witch', 'is', 'better', 'the', 'wii', 'or', 'the', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Witch', 'is', 'better', 'the', 'Wii', 'or', 'the', 'PS3', '?']
or simple split_sent 5
Wii the
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  b
answer begin:  The the is b than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
gen templates 3 It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
full answer  It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
764 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'is', 'better', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'do', 'you', 'think', 'is', 'better', 'wii', 'or', 'ps3', '?']
or simple split_sent 7
wii ps3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'ps3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['prettier', 'greater', 'hardware', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  b
answer begin:  The ps3 is b than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
gen templates 3 It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
full answer  It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
It's simple! Ps3 is better, because of easier, faster and easier to manage. Wii is greater and prettier.
765 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'is', 'better', 'xbox', '360,ps3,wii?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
766 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'wii', 'or', 'ps3', 'in', 'terms', 'of', 'name', 'and', 'size', 'and', 'graphics?']
['wii', 'ps3']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'ps3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['greater', 'hardware', 'prettier', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  better
answer begin:  The ps3 is better than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
gen templates 3 After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
full answer  After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
After much thought, I realized that  ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
767 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'overall?', 'xbox360,', 'ps3,', 'and', 'wii.?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
768 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'u', 'prefer', 'a', 'nintendo', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'would', 'u', 'prefer', 'a', 'Nintendo', 'Wii', 'or', 'PS3', '?']
or simple split_sent 7
Wii PS3
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['greater', 'hardware', 'prettier', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  better
answer begin:  The ps3 is better than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  I would prefer to use ps3 because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
gen templates 3 I would prefer to use ps3 because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
full answer  I would prefer to use ps3 because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
I would prefer to use ps3 because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
769 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['wat', 'system', 'should', 'i', 'get-360?', 'wii?', 'ps3?']
['wii?']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
770 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'better', 'game', 'system', 'ps3,nintendo', 'wii,or', 'xbox360??']
[]
['better']
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
771 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3,', 'wii,', 'xbox', '360,', 'super', 'nintendo,', 'sega', 'genisis,', 'or', 'atari,', 'which', 'rocks', 'hardest?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['ps3', ',', 'wii', ',', 'xbox', '360', ',', 'super', 'nintendo', ',', 'sega', 'genisis', ',', 'or', 'atari', ',', 'which', 'rocks', 'hardest', '?']
or simple split_sent 13
, atari
We can't recognize objects for comparision
772 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['best', 'for', '17', 'year', 'old', 'guy-', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Best', 'for', '17', 'year', 'old', 'guy-', 'Wii', 'or', 'ps3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
773 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'hotter', 'right', 'now', 'ps3', 'or', 'wii?']
['ps3']
['hotter']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'hotter', 'right', 'now', 'Ps3', 'or', 'Wii', '?']
or simple split_sent 6
Ps3 Wii
aspects ['hotter']
weights [1]
get url
params {'objectA': 'Ps3', 'objectB': 'Wii', 'fs': 'true', 'aspect1': 'hotter', 'weight1': 1}
1
create fro json predicates ['hotter']
create fro json self.predicates hotter
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  hotter
answer begin:  The wii is hotter than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
gen templates 3 I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
full answer  I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
I would prefer to use wii because of quicker, longer and easier to develop for. But i should tell you that ps3 is faster, easier to dev for and faster to better.
774 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better', 'a', 'ps3', 'or', 'a', 'nintendo', 'wii?']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'one', 'is', 'better', 'a', 'ps3', 'or', 'a', 'nintendo', 'wii', '?']
or simple split_sent 6
ps3 a
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3', 'objectB': 'a', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'quicker', 'easier', 'bigger'] ['faster', 'cooler', 'bjs', 'tofrom']
2
winnder: a  other: ps3
acpect winner  quicker, bigger and easier
acpect other  faster
type  templates
winnder: a  other: ps3
acpect winner  quicker, bigger and easier
acpect other  faster
self predicate  b
answer begin:  The a is b than ps3. The reason are quicker, bigger and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, quicker, easier, bigger
smoother, quicker, easier, bigger
winner_aspects_string1 quicker, bigger and easier
looser_aspects_string1  and faster
make response  After much thought, I realized that  a is better, because of quicker, bigger and easier. But it will be useful for you to know that ps3 is  and faster.
gen templates 3 After much thought, I realized that  a is better, because of quicker, bigger and easier. But it will be useful for you to know that ps3 is  and faster.
full answer  After much thought, I realized that  a is better, because of quicker, bigger and easier. But it will be useful for you to know that ps3 is  and faster.
After much thought, I realized that  a is better, because of quicker, bigger and easier. But it will be useful for you to know that ps3 is  and faster.
775 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'system?', '360', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'the', 'best', 'System', '?', '360', 'Wii', 'or', 'PS3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
776 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'the', 'wii', 'better', 'than', 'the', 'ps3?']
['wii']
['better']
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects ['better']
weights [1]
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'lighter', 'easier to manage gadgets and stuff too']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  lighter, greater and quicker
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
777 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'would', 'like', 'to', 'know,', 'should', 'i', 'buy', 'the', 'ps3', 'or', 'the', 'wii?']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I', 'would', 'like', 'to', 'know', ',', 'should', 'i', 'buy', 'the', 'PS3', 'or', 'the', 'Wii', '?']
or simple split_sent 11
PS3 the
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'the', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'bluray', 'disc', 'smoother'] ['more to use', 'nobody', 'cares', 'xbox360wii']
2
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
type  templates
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
self predicate  better
answer begin:  The the is better than ps3. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, bluray, disc, smoother
easier, bluray, disc, smoother
winner_aspects_string1  and easier
looser_aspects_string1  and more to use
make response  After much thought, I realized that  the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
gen templates 3 After much thought, I realized that  the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
full answer  After much thought, I realized that  the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
After much thought, I realized that  the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
778 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'ps3', '360', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Should', 'I', 'get', 'a', 'PS3', '360', 'or', 'wii', '?']
or simple split_sent 6
360 wii
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'quicker', 'longer'] ['closer to the 360', 'faster to better', 'earlier', 'lighter']
2
winnder: wii  other: 360
acpect winner  easier, quicker and longer
acpect other  earlier, faster to better and closer to the 360
type  templates
winnder: wii  other: 360
acpect winner  easier, quicker and longer
acpect other  earlier, faster to better and closer to the 360
self predicate  better
answer begin:  The wii is better than 360. The reason are easier, quicker and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, quicker, longer
easier, smoother, quicker, longer
winner_aspects_string1 easier, quicker and longer
looser_aspects_string1 earlier, faster to better and closer to the 360
make response  It's simple! Wii is better, because of easier, quicker and longer. 360 is earlier, faster to better and closer to the 360.
gen templates 3 It's simple! Wii is better, because of easier, quicker and longer. 360 is earlier, faster to better and closer to the 360.
full answer  It's simple! Wii is better, because of easier, quicker and longer. 360 is earlier, faster to better and closer to the 360.
It's simple! Wii is better, because of easier, quicker and longer. 360 is earlier, faster to better and closer to the 360.
779 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'should', 'i', 'get', 'a', 'ps3,', 'nintendo', 'wii,', 'or', 'x-box', '360?', 'and', 'why?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'should', 'I', 'get', 'a', 'PS3', ',', 'Nintendo', 'Wii', ',', 'or', 'X', '-', 'bOX', '360', '?', 'and', 'why', '?']
We can't recognize objects for comparision
780 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better:', 'nintendo', 'wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', ':', 'Nintendo', 'Wii', ',', 'PS3', ',', 'or', 'XBOX', '360', '?']
We can't recognize objects for comparision
781 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'would', 'you', 'rather', 'have?', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'Would', 'you', 'rather', 'have', '?', 'Wii', 'or', 'PS3', '?']
or simple split_sent 7
Wii PS3
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['greater', 'hardware', 'prettier', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  better
answer begin:  The ps3 is better than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
gen templates 3 I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
full answer  I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But you should know that wii is greater and prettier.
782 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'allready', 'have', 'a', 'ps2', 'should', 'i', 'buy', 'the', 'ps3', 'or', 'the', 'nintendo', 'wii?']
['ps2', 'ps3']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps2', 'objectB': 'ps3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'easier to emulate using only software', 'older'] ['greater', 'x360', 'larger', 'developer']
2
winnder: ps3  other: ps2
acpect winner  faster, older and easier to emulate using only software
acpect other  greater and larger
type  templates
winnder: ps3  other: ps2
acpect winner  faster, older and easier to emulate using only software
acpect other  greater and larger
self predicate  better
answer begin:  The ps3 is better than ps2. The reason are faster, older and easier to emulate using only software. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, easier to emulate using only software, older
faster, easier, easier to emulate using only software, older
winner_aspects_string1 faster, older and easier to emulate using only software
looser_aspects_string1 greater and larger
make response  I came to the conclusion that ps3 is better, because of faster, older and easier to emulate using only software. Ps2 is greater and larger.
gen templates 3 I came to the conclusion that ps3 is better, because of faster, older and easier to emulate using only software. Ps2 is greater and larger.
full answer  I came to the conclusion that ps3 is better, because of faster, older and easier to emulate using only software. Ps2 is greater and larger.
I came to the conclusion that ps3 is better, because of faster, older and easier to emulate using only software. Ps2 is greater and larger.
783 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'should', 'i', 'buy', 'xbox', '360,', 'ps3', 'or', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'should', 'I', 'buy', 'xbox', '360', ',', 'PS3', 'or', 'Nintendo', 'WII', '?']
We can't recognize objects for comparision
784 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'gaming', 'system', 'is', 'better', 'the', 'wii', 'ps3', 'or', 'the', 'xbox', '360?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'gaming', 'system', 'is', 'better', 'the', 'wii', 'ps3', 'or', 'the', 'xbox', '360', '?']
or simple split_sent 8
ps3 the
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'ps3', 'objectB': 'the', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'bluray', 'disc', 'smoother'] ['more to use', 'nobody', 'cares', 'xbox360wii']
2
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
type  templates
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
self predicate  b
answer begin:  The the is b than ps3. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, bluray, disc, smoother
easier, bluray, disc, smoother
winner_aspects_string1  and easier
looser_aspects_string1  and more to use
make response  I came to the conclusion that the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
gen templates 3 I came to the conclusion that the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
full answer  I came to the conclusion that the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
I came to the conclusion that the is better, because of  and easier. But it will be useful for you to know that ps3 is  and more to use.
785 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'should', 'i', 'get', 'a', 'ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'should', 'I', 'get', 'a', 'Ps3', 'or', 'wii', '?']
or simple split_sent 6
Ps3 wii
aspects []
weights []
get url
params {'objectA': 'Ps3', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  After much thought, I realized that  wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 After much thought, I realized that  wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
full answer  After much thought, I realized that  wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
After much thought, I realized that  wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
786 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'would', 'you', 'choose', 'nintendo', 'wii,', 'ps3,', 'or', 'x-box', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'would', 'you', 'choose', 'Nintendo', 'wii', ',', 'PS3', ',', 'or', 'x', '-', 'box', '360', '?']
We can't recognize objects for comparision
787 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['whats', 'better', 'ps3', 'or', 'wii?']
['ps3']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 's', 'better', 'PS3', 'or', 'Wii', '?']
or simple split_sent 4
PS3 Wii
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  b
answer begin:  The wii is b than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
full answer  Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
Looks like wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
788 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'the', 'nintendo', 'wii', 'or', 'the', 'ps3????']
['wii']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'the', 'Nintendo', 'Wii', 'or', 'the', 'PS3', '?', '?', '?', '?']
or simple split_sent 6
Wii the
aspects ['better']
weights [1]
get url
params {'objectA': 'Wii', 'objectB': 'the', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['faster', 'larger', 'closer to the 360', 'easier'] ['greater', 'x360', 'bigger']
2
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
type  templates
winnder: the  other: wii
acpect winner  faster, larger and closer to the 360
acpect other  greater and bigger
self predicate  better
answer begin:  The the is better than wii. The reason are faster, larger and closer to the 360. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, larger, closer to the 360, easier
faster, larger, closer to the 360, easier
winner_aspects_string1 faster, larger and closer to the 360
looser_aspects_string1 greater and bigger
make response  It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
gen templates 3 It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
full answer  It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
It's simple! The is better, because of faster, larger and closer to the 360. Wii is greater and bigger.
789 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', '-', 'wii', '-', 'xbox360?----best', 'one----?']
['ps3', 'wii']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  It's simple! Wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 It's simple! Wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
full answer  It's simple! Wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
It's simple! Wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
790 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox306', 'vs.', 'sony', 'ps3', 'vs.', 'nintendo', 'wii...battle', 'royale!', 'who', 'will', 'come', 'out', 'on', 'top', 'and', 'why?']
['sony']
[]
len(objects) 1
We try to use spacy
comp_elem vs.
tokens ['Xbox306', 'vs.', 'Sony', 'PS3', 'vs.', 'Nintendo', 'Wii', '...', 'Battle', 'Royale', '!', 'Who', 'will', 'come', 'out', 'on', 'top', 'and', 'why', '?']
aspects []
weights []
get url
params {'objectA': 'Xbox306', 'objectB': 'Sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: sony  other: xbox306
acpect winner  
acpect other  
type  templates
winnder: sony  other: xbox306
acpect winner  
acpect other  
self predicate  better
answer begin:  The sony is better than xbox306. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer sony than xbox306.
full answer  I would prefer sony than xbox306.
I would prefer sony than xbox306.
791 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['now', 'that', 'the', 'ps3,', '360,', 'and', 'the', 'wii', 'are', 'all', 'out,', 'which', 'game', 'system', 'is', 'selling', 'the', 'most.?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
792 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wii', 'or', 'ps3', 'or', '360????', 'which', 'will', 'win', 'next', 'gen.???']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Wii', 'or', 'ps3', 'or', '360', '?', '?', '?', '?', 'which', 'will', 'win', 'next', 'gen', '.', '?', '?', '?']
or simple split_sent 1
Wii ps3
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'ps3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['greater', 'hardware', 'prettier', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  better
answer begin:  The ps3 is better than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  Looks like ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
gen templates 3 Looks like ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
full answer  Looks like ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
Looks like ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
793 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'the', 'nintendo', 'wii', 'or', 'the', 'sony', 'ps3?']
['wii', 'sony']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'sony', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'easier', 'cheaper', 'faster'] ['better for 3rd party games this time', 'heftier', 'lighter', 'easier to develop for']
2
winnder: sony  other: wii
acpect winner  cheaper, greater and faster
acpect other  heftier, better for 3rd party games this time and lighter
type  templates
winnder: sony  other: wii
acpect winner  cheaper, greater and faster
acpect other  heftier, better for 3rd party games this time and lighter
self predicate  better
answer begin:  The sony is better than wii. The reason are cheaper, greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier, cheaper, faster
greater, easier, cheaper, faster
winner_aspects_string1 cheaper, greater and faster
looser_aspects_string1 heftier, better for 3rd party games this time and lighter
make response  It's simple! Sony is better, because of cheaper, greater and faster. But you should know that wii is heftier, better for 3rd party games this time and lighter.
gen templates 3 It's simple! Sony is better, because of cheaper, greater and faster. But you should know that wii is heftier, better for 3rd party games this time and lighter.
full answer  It's simple! Sony is better, because of cheaper, greater and faster. But you should know that wii is heftier, better for 3rd party games this time and lighter.
It's simple! Sony is better, because of cheaper, greater and faster. But you should know that wii is heftier, better for 3rd party games this time and lighter.
794 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['right,', 'which', 'one', 'will', 'you', 'be', 'getting', '(or', 'have)', 'wii,', 'ps3', 'or', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Right', ',', 'Which', 'one', 'will', 'you', 'be', 'getting', '(', 'or', 'have', ')', 'Wii', ',', 'PS3', 'or', '360', '?']
or simple split_sent 9
( have
aspects []
weights []
get url
params {'objectA': '(', 'objectB': 'have', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: have  other: (
acpect winner  
acpect other  
type  templates
winnder: have  other: (
acpect winner  
acpect other  
self predicate  better
answer begin:  The have is better than (. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer have than (.
full answer  I would prefer have than (.
I would prefer have than (.
795 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'do', 'you', 'like?!', 'wii', 'or', 'x-360', 'or', 'ps3', 'also', 'vote!!!', 'the', 'most', 'votes', 'the', 'more', 'you', 'see?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'do', 'you', 'like', '?', '!', 'Wii', 'or', 'X-360', 'or', 'PS3', 'also', 'VOTE', '!', '!', '!', 'the', 'most', 'votes', 'the', 'more', 'you', 'See', '?']
or simple split_sent 7
Wii X-360
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Wii', 'objectB': 'X-360', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  [] []
2
winnder: x-360  other: wii
acpect winner  
acpect other  
type  templates
winnder: x-360  other: wii
acpect winner  
acpect other  
self predicate  m
answer begin:  The x-360 is m than wii. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer x-360 than wii.
full answer  I would prefer x-360 than wii.
I would prefer x-360 than wii.
796 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['with', '$900', 'should', 'i', 'buy', 'a', 'ps3', 'or', 'wii?', 'and', 'why?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['With', '$', '900', 'should', 'I', 'buy', 'a', 'PS3', 'or', 'Wii', '?', 'And', 'why', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'easier to use', 'easier', 'lighter'] ['cell', 'easier to setup', 'bigger', 'version']
winnder: and  other: ps3
acpect winner  lighter, easier to use and easier
acpect other  bigger and easier to setup
type  templates
ps3 has undeniable advantages. They are lighter, easier to use and easier.
797 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'gaming', 'console', 'is', 'better?ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'gaming', 'console', 'is', 'better?PS3', 'or', 'WII', '?']
or simple split_sent 5
better?PS3 WII
aspects []
weights []
get url
params {'objectA': 'better?PS3', 'objectB': 'WII', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: wii  other: better?ps3
acpect winner  
acpect other  
type  templates
winnder: wii  other: better?ps3
acpect winner  
acpect other  
self predicate  better
answer begin:  The wii is better than better?ps3. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer wii than better?ps3.
full answer  I would prefer wii than better?ps3.
I would prefer wii than better?ps3.
798 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'you', 'prefer', 'ps3,', 'xbox', '360,', 'or', 'the', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Do', 'you', 'prefer', 'PS3', ',', ' ', 'Xbox', '360', ',', 'or', 'the', 'Nintendo', 'Wii', '?']
or simple split_sent 9
, the
We can't recognize objects for comparision
799 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'new', 'console', 'do', 'u', 'want?', 'ps3', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'new', 'console', 'do', 'u', 'want', '?', 'PS3', 'or', 'Wii', '?']
or simple split_sent 8
PS3 Wii
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
full answer  I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
I came to the conclusion that wii is better, because of quicker, longer and easier to develop for. But you should know that ps3 is faster, easier to dev for and faster to better.
800 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  After much thought, I realized that  psp is better, because of  and stronger. Gamecube is  and faster.
gen templates 3 After much thought, I realized that  psp is better, because of  and stronger. Gamecube is  and faster.
full answer  After much thought, I realized that  psp is better, because of  and stronger. Gamecube is  and faster.
After much thought, I realized that  psp is better, because of  and stronger. Gamecube is  and faster.
801 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["people's", 'choice:', "who'll", 'win?', 'ps3,', '360', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['People', "'s", 'choice', ':', 'Who', "'ll", 'win', '?', 'PS3', ',', '360', 'or', 'Wii', '?']
or simple split_sent 11
360 Wii
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'quicker', 'longer'] ['closer to the 360', 'faster to better', 'earlier', 'lighter']
2
winnder: wii  other: 360
acpect winner  easier, quicker and longer
acpect other  earlier, faster to better and closer to the 360
type  templates
winnder: wii  other: 360
acpect winner  easier, quicker and longer
acpect other  earlier, faster to better and closer to the 360
self predicate  better
answer begin:  The wii is better than 360. The reason are easier, quicker and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, quicker, longer
easier, smoother, quicker, longer
winner_aspects_string1 easier, quicker and longer
looser_aspects_string1 earlier, faster to better and closer to the 360
make response  It's simple! Wii is better, because of easier, quicker and longer. But you should know that 360 is earlier, faster to better and closer to the 360.
gen templates 3 It's simple! Wii is better, because of easier, quicker and longer. But you should know that 360 is earlier, faster to better and closer to the 360.
full answer  It's simple! Wii is better, because of easier, quicker and longer. But you should know that 360 is earlier, faster to better and closer to the 360.
It's simple! Wii is better, because of easier, quicker and longer. But you should know that 360 is earlier, faster to better and closer to the 360.
802 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'new', 'game', 'system', 'should', 'i', 'get', 'ps3,', 'xbox', '360', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'new', 'game', 'system', 'should', 'I', 'get', 'PS3', ',', 'Xbox', '360', 'or', 'Wii', '?']
or simple split_sent 11
360 Wii
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'smoother', 'quicker', 'longer'] ['closer to the 360', 'faster to better', 'earlier', 'lighter']
2
winnder: wii  other: 360
acpect winner  easier, quicker and longer
acpect other  earlier, faster to better and closer to the 360
type  templates
winnder: wii  other: 360
acpect winner  easier, quicker and longer
acpect other  earlier, faster to better and closer to the 360
self predicate  better
answer begin:  The wii is better than 360. The reason are easier, quicker and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, smoother, quicker, longer
easier, smoother, quicker, longer
winner_aspects_string1 easier, quicker and longer
looser_aspects_string1 earlier, faster to better and closer to the 360
make response  It's simple! Wii is better, because of easier, quicker and longer. But it will be useful for you to know that 360 is earlier, faster to better and closer to the 360.
gen templates 3 It's simple! Wii is better, because of easier, quicker and longer. But it will be useful for you to know that 360 is earlier, faster to better and closer to the 360.
full answer  It's simple! Wii is better, because of easier, quicker and longer. But it will be useful for you to know that 360 is earlier, faster to better and closer to the 360.
It's simple! Wii is better, because of easier, quicker and longer. But it will be useful for you to know that 360 is earlier, faster to better and closer to the 360.
803 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', 'vs', 'wii', 'vs', 'xbox', '360....which', 'one?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['PS3', 'vs', 'Wii', 'vs', 'Xbox', '360', '....', 'which', 'one', '?']
or simple split_sent 1
PS3 Wii
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'longer', 'quicker', 'easier to develop for'] ['faster', 'faster to better', 'xbox360wii', 'easier to dev for']
2
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
type  templates
winnder: wii  other: ps3
acpect winner  quicker, longer and easier to develop for
acpect other  faster, easier to dev for and faster to better
self predicate  better
answer begin:  The wii is better than ps3. The reason are quicker, longer and easier to develop for. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, longer, quicker, easier to develop for
smoother, longer, quicker, easier to develop for
winner_aspects_string1 quicker, longer and easier to develop for
looser_aspects_string1 faster, easier to dev for and faster to better
make response  I would prefer to use wii because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
gen templates 3 I would prefer to use wii because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
full answer  I would prefer to use wii because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
I would prefer to use wii because of quicker, longer and easier to develop for. But it will be useful for you to know that ps3 is faster, easier to dev for and faster to better.
804 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['out', 'of', 'all', 'next', 'gen', 'systems', '(ps3,', 'xbox', '360,', 'wii)', 'whats', 'the', 'best?']
['wii)']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii)', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'quicker', 'easier to use', 'cheaper'] ['smoother', 'faster', 'easier for me to use and control', 'visuals']
winnder: wii)  other: and
acpect winner  greater, quicker and easier to use
acpect other  faster and easier for me to use and control
type  templates
wii) has undeniable advantages. They are greater, quicker and easier to use.
805 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'gaming', 'console', 'do', 'you', 'like', 'best;', 'xbox', '360', ',', 'ps3,', 'or', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'Gaming', 'Console', 'do', 'you', 'like', 'best', ';', 'Xbox', '360', ',', 'PS3', ',', 'or', 'Wii', '?']
or simple split_sent 13
, Wii
We can't recognize objects for comparision
806 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'is', 'better?', 'a', 'ps3', 'or', 'niintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'do', 'you', 'think', 'is', 'better', '?', 'A', 'PS3', 'or', 'Niintendo', 'Wii', '?']
or simple split_sent 9
PS3 Niintendo
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PS3', 'objectB': 'Niintendo', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: niintendo  other: ps3
acpect winner  
acpect other  
type  templates
winnder: niintendo  other: ps3
acpect winner  
acpect other  
self predicate  b
answer begin:  The niintendo is b than ps3. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer niintendo than ps3.
full answer  I would prefer niintendo than ps3.
I would prefer niintendo than ps3.
807 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3,', 'wii,', 'or', 'xbox', '360?', 'which', 'system', 'is', 'gonna', 'have', 'the', 'better', 'games', 'also?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['ps3', ',', 'wii', ',', 'or', 'xbox', '360', '?', 'which', 'system', 'is', 'gon', 'na', 'have', 'the', 'better', 'games', 'also', '?']
or simple split_sent 4
, xbox
We can't recognize objects for comparision
808 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ["what's", 'better', 'wii', 'or', 'xbox', '360', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', "'s", 'better', 'wii', 'or', 'xbox', '360', 'or', 'ps3', '?']
or simple split_sent 4
wii xbox
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'xbox', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['greater', 'faster', 'bettereasier', 'powerfull'] ['easier', 'hardware', 'crisper', 'worse to xbox one']
2
winnder: xbox  other: wii
acpect winner  greater and faster
acpect other  easier and worse to xbox one
type  templates
winnder: xbox  other: wii
acpect winner  greater and faster
acpect other  easier and worse to xbox one
self predicate  b
answer begin:  The xbox is b than wii. The reason are greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, bettereasier, powerfull
greater, faster, bettereasier, powerfull
winner_aspects_string1 greater and faster
looser_aspects_string1 easier and worse to xbox one
make response  After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
gen templates 3 After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
full answer  After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
After much thought, I realized that  xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
809 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'would', 'you', 'buy', 'a', 'ps3', 'or', 'a', 'wii?', 'why?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Which', 'would', 'you', 'buy', 'a', 'PS3', 'or', 'A', 'Wii', '?', 'Why', '?']
or simple split_sent 6
PS3 A
aspects []
weights []
get url
params {'objectA': 'PS3', 'objectB': 'A', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'quicker', 'easier', 'bigger'] ['faster', 'bjs', 'tofrom', 'easier to hold']
2
winnder: a  other: ps3
acpect winner  quicker, bigger and easier
acpect other  faster and easier to hold
type  templates
winnder: a  other: ps3
acpect winner  quicker, bigger and easier
acpect other  faster and easier to hold
self predicate  better
answer begin:  The a is better than ps3. The reason are quicker, bigger and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
smoother, quicker, easier, bigger
smoother, quicker, easier, bigger
winner_aspects_string1 quicker, bigger and easier
looser_aspects_string1 faster and easier to hold
make response  I came to the conclusion that a is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
gen templates 3 I came to the conclusion that a is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
full answer  I came to the conclusion that a is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
I came to the conclusion that a is better, because of quicker, bigger and easier. But i should tell you that ps3 is faster and easier to hold.
810 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'game', 'will', 'you', 'choose?', 'ps3', 'or', 'wii', 'or', 'xbox360?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'game', 'will', 'you', 'choose', '?', 'PS3', 'or', 'Wii', 'or', 'Xbox360', '?']
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: wii  other: wii
acpect winner  
acpect other  
type  templates
winnder: wii  other: wii
acpect winner  
acpect other  
self predicate  better
answer begin:  The wii is better than wii. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer wii than wii.
full answer  I would prefer wii than wii.
I would prefer wii than wii.
811 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'wii', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to manage gadgets and stuff too', 'easier to use']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
812 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'do', 'you', 'think', 'of', 'the', 'n.', 'wii,', 'and', 'how', 'do', 'you', 'compare', 'it', 'to', 'the', 'ps3', 'and', 'xbox?']
['wii,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
813 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['ps3', 'vs', 'x-box', '360', 'vs', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem vs
tokens ['PS3', 'vs', 'X', '-', 'box', '360', 'vs', 'Nintendo', 'Wii', '?']
We can't recognize objects for comparision
814 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['?what', 'system', 'will', 'be', 'better', 'x-box', '360,', 'ps3,', 'or', 'the', 'nintendo', 'wii?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['?', 'What', 'system', 'will', 'be', 'better', 'X', '-', 'box', '360', ',', 'PS3', ',', 'or', 'the', 'Nintendo', 'Wii', '?']
We can't recognize objects for comparision
815 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['should', 'i', 'get', 'a', 'ps3', ',nintendo', 'wii', 'or', 'xbox', '360?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['should', 'i', 'get', 'a', 'ps3', ',', 'nintendo', 'Wii', 'or', 'xbox', '360', '?']
or simple split_sent 8
Wii xbox
aspects []
weights []
get url
params {'objectA': 'Wii', 'objectB': 'xbox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'faster', 'bettereasier', 'powerfull'] ['easier', 'hardware', 'crisper', 'worse to xbox one']
2
winnder: xbox  other: wii
acpect winner  greater and faster
acpect other  easier and worse to xbox one
type  templates
winnder: xbox  other: wii
acpect winner  greater and faster
acpect other  easier and worse to xbox one
self predicate  better
answer begin:  The xbox is better than wii. The reason are greater and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, faster, bettereasier, powerfull
greater, faster, bettereasier, powerfull
winner_aspects_string1 greater and faster
looser_aspects_string1 easier and worse to xbox one
make response  Looks like xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
gen templates 3 Looks like xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
full answer  Looks like xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
Looks like xbox is better, because of greater and faster. But it will be useful for you to know that wii is easier and worse to xbox one.
816 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['wich', 'will', 'be', 'better?', 'nintendo', 'wii', 'or', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['wich', 'will', 'be', 'better', '?', 'Nintendo', 'Wii', 'or', 'PS3', '?']
or simple split_sent 7
Wii PS3
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Wii', 'objectB': 'PS3', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'faster', 'easier to manage', 'xbox360wii'] ['prettier', 'greater', 'hardware', 'x360']
2
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
type  templates
winnder: ps3  other: wii
acpect winner  easier, faster and easier to manage
acpect other  greater and prettier
self predicate  b
answer begin:  The ps3 is b than wii. The reason are easier, faster and easier to manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, faster, easier to manage, xbox360wii
easier, faster, easier to manage, xbox360wii
winner_aspects_string1 easier, faster and easier to manage
looser_aspects_string1 greater and prettier
make response  I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
gen templates 3 I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
full answer  I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
I came to the conclusion that ps3 is better, because of easier, faster and easier to manage. But i should tell you that wii is greater and prettier.
817 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'will', 'be', 'the', 'best', 'next', 'gen', 'system', 'xbox360', 'nintendo', 'wii', 'ps3?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
818 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'seventh', 'generation', 'video', 'game', 'system', '(wii,', 'xbox', '360,', 'nintendo', 'ds,', 'psp,', 'ps3)', 'will', 'be', 'best?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
819 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'game', 'systemps3,xbox360,wii???']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
820 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'next-gen', 'console', 'will', 'win', 'wii,', 'ps3,xbox360?']
['wii,']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
821 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'do', 'you', 'think', 'the', 'nintendo', 'wii', '(revolution)', 'go', 'up', 'against', 'the', 'ps3.?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
822 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['video', 'game', 'wars!', 'who', 'will', 'win', '(xbox', '360,', 'ps3', ',', 'wii)?', 'what', 'game', 'are', 'you', 'most', 'looking', 'forward', 'to?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
823 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'gonna', 'be', 'better,', 'ps3', 'or', 'the', 'wii?', 'why?']
['wii?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'is', 'gon', 'na', 'be', 'better', ',', 'PS3', 'or', 'the', 'Wii', '?', 'Why', '?']
or simple split_sent 8
PS3 the
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PS3', 'objectB': 'the', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'bluray', 'disc', 'smoother'] ['more to use', 'nobody', 'cares', 'xbox360wii']
2
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
type  templates
winnder: the  other: ps3
acpect winner  easier
acpect other  more to use
self predicate  b
answer begin:  The the is b than ps3. The reason are easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, bluray, disc, smoother
easier, bluray, disc, smoother
winner_aspects_string1  and easier
looser_aspects_string1  and more to use
make response  It's simple! The is better, because of  and easier. But i should tell you that ps3 is  and more to use.
gen templates 3 It's simple! The is better, because of  and easier. But i should tell you that ps3 is  and more to use.
full answer  It's simple! The is better, because of  and easier. But i should tell you that ps3 is  and more to use.
It's simple! The is better, because of  and easier. But i should tell you that ps3 is  and more to use.
824 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'game', 'system', 'should', 'i', 'buy', 'next', 'ps3,wii,', 'or', 'the', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'game', 'system', 'should', 'I', 'buy', 'next', 'PS3,Wii', ',', 'or', 'the', '360', '?']
We can't recognize objects for comparision
825 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'do', 'you', 'think', 'will', 'win', 'the', 'next', 'console', 'war?', 'wii,', 'ps3,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Who', 'do', 'you', 'think', 'will', 'win', 'the', 'next', 'console', 'war', '?', 'Wii', ',', 'PS3', ',', 'or', 'XBox', '360', '?']
or simple split_sent 15
, XBox
We can't recognize objects for comparision
826 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'will/would', 'you', 'get', 'xbox', '360,', 'ps3,', 'or', 'nintendo', 'wii', '...?']
['wii']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'will', '/', 'would', 'you', 'get', 'Xbox', '360', ',', 'PS3', ',', 'or', 'Nintendo', 'Wii', '...', '?']
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'Nintendo Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'greater', 'platform'] ['better to be safe', 'bigger', 'richer', 'easier to justify the purchase of a console on first party software alone']
2
winnder: nintendo wii  other: wii
acpect winner  faster, greater and easier
acpect other  better to be safe, easier to justify the purchase of a console on first party software alone and bigger
type  templates
winnder: nintendo wii  other: wii
acpect winner  faster, greater and easier
acpect other  better to be safe, easier to justify the purchase of a console on first party software alone and bigger
self predicate  better
answer begin:  The nintendo wii is better than wii. The reason are faster, greater and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, greater, platform
faster, easier, greater, platform
winner_aspects_string1 faster, greater and easier
looser_aspects_string1 better to be safe, easier to justify the purchase of a console on first party software alone and bigger
make response  I came to the conclusion that nintendo wii is better, because of faster, greater and easier. But you should know that wii is better to be safe, easier to justify the purchase of a console on first party software alone and bigger.
gen templates 3 I came to the conclusion that nintendo wii is better, because of faster, greater and easier. But you should know that wii is better to be safe, easier to justify the purchase of a console on first party software alone and bigger.
full answer  I came to the conclusion that nintendo wii is better, because of faster, greater and easier. But you should know that wii is better to be safe, easier to justify the purchase of a console on first party software alone and bigger.
I came to the conclusion that nintendo wii is better, because of faster, greater and easier. But you should know that wii is better to be safe, easier to justify the purchase of a console on first party software alone and bigger.
827 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'the', 'best', 'out', 'of', 'the', 'ps3,', 'xbox', '360,and', 'the', 'nintendo', 'wii???????']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
828 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'much', 'can', 'i', 'get', 'from', 'a', 'nes,', 'gba,', 'gbc,', 'gbasp,', 'ds,', 'ps2,', 'and', 'gamecube', 'at', 'the', 'most', '$?']
['ds,', 'gamecube']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'easier to play', 'faster', 'plants'] ['version']
2
winnder: ds  other: gamecube
acpect winner  easier to play, easier and faster
acpect other  
type  templates
winnder: ds  other: gamecube
acpect winner  easier to play, easier and faster
acpect other  
self predicate  better
answer begin:  The ds is better than gamecube. The reason are easier to play, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, easier to play, faster, plants
easier, easier to play, faster, plants
winner_aspects_string1 easier to play, easier and faster
looser_aspects_string1 version
make response  I came to the conclusion that ds is better, because of easier to play, easier and faster. But you should know that gamecube is version.
gen templates 3 I came to the conclusion that ds is better, because of easier to play, easier and faster. But you should know that gamecube is version.
full answer  I came to the conclusion that ds is better, because of easier to play, easier and faster. But you should know that gamecube is version.
I came to the conclusion that ds is better, because of easier to play, easier and faster. But you should know that gamecube is version.
829 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'ds', 'psp', 'ps2', 'or', 'x', 'box', '360?']
['ds', 'psp', 'ps2']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier to learn experience', 'cooler', 'cleaner', 'higher'] ['easier to emulate', 'inferior', 'franchises', 'longer']
2
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
type  templates
winnder: psp  other: ds
acpect winner  easier to learn experience, cleaner and higher
acpect other  easier to emulate and longer
self predicate  better
answer begin:  The psp is better than ds. The reason are easier to learn experience, cleaner and higher. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to learn experience, cooler, cleaner, higher
easier to learn experience, cooler, cleaner, higher
winner_aspects_string1 easier to learn experience, cleaner and higher
looser_aspects_string1 easier to emulate and longer
make response  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
gen templates 3 After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
full answer  After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
After much thought, I realized that  psp is better, because of easier to learn experience, cleaner and higher. But i should tell you that ds is easier to emulate and longer.
830 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'best:', 'ps3,', 'xbox', '360,', 'or', 'revolution?', 'ps2,', 'xbox,', 'or', 'gamecube?', 'psp', 'or', 'ds?']
['gamecube?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'best', ':', 'PS3', ',', 'XBox', '360', ',', 'or', 'Revolution', '?', 'PS2', ',', 'XBox', ',', 'or', 'Gamecube', '?', 'PSP', 'or', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'Revolution', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'nintendo', 'greater', 'imho'] []
2
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
type  templates
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
self predicate  better
answer begin:  The revolution is better than gamecube. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
full answer  It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
831 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'library', 'is', 'better', 'for', 'programming', 'a', 'cad', 'software', 'opengl', 'or', 'direct3d?']
['cad']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'library', 'is', 'better', 'for', 'programming', 'a', 'CAD', 'software', 'OpenGL', 'or', 'Direct3D', '?']
or simple split_sent 10
OpenGL Direct3D
aspects ['better']
weights [1]
get url
params {'objectA': 'OpenGL', 'objectB': 'Direct3D', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['hardware', 'layer', 'driver', 'hal'] ['smoother', 'easier', 'easier to use', 'greater']
2
winnder: direct3d  other: opengl
acpect winner  
acpect other  greater, easier to use and easier
type  templates
winnder: direct3d  other: opengl
acpect winner  
acpect other  greater, easier to use and easier
self predicate  better
answer begin:  The direct3d is better than opengl. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
hardware, layer, driver, hal
hardware, layer, driver, hal
smth wrong in answer generation, please try again
832 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'a', 'better', 'car', 'a', 'lexus', 'or', 'a', 'cadillac?']
[]
['better']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'a', 'better', 'car', 'a', 'lexus', 'or', 'a', 'cadillac', '?']
or simple split_sent 7
lexus a
aspects ['better']
weights [1]
get url
params {'objectA': 'lexus', 'objectB': 'a', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['lighter', 'quicker', 'quieter', 'nicer'] ['safer', 'greater', 'smoother', 'simpler']
2
winnder: a  other: lexus
acpect winner  lighter and quicker
acpect other  safer, simpler and greater
type  templates
winnder: a  other: lexus
acpect winner  lighter and quicker
acpect other  safer, simpler and greater
self predicate  better
answer begin:  The a is better than lexus. The reason are lighter and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, quicker, quieter, nicer
lighter, quicker, quieter, nicer
winner_aspects_string1 lighter and quicker
looser_aspects_string1 safer, simpler and greater
make response  I came to the conclusion that a is better, because of lighter and quicker. But you should know that lexus is safer, simpler and greater.
gen templates 3 I came to the conclusion that a is better, because of lighter and quicker. But you should know that lexus is safer, simpler and greater.
full answer  I came to the conclusion that a is better, because of lighter and quicker. But you should know that lexus is safer, simpler and greater.
I came to the conclusion that a is better, because of lighter and quicker. But you should know that lexus is safer, simpler and greater.
833 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'car', 'is', 'better', 'a', 'lexus', 'is300', 'or', 'a', 'cadillac', 'ctsv?']
['cadillac']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['what', 'car', 'is', 'better', 'a', 'lexus', 'is300', 'or', 'a', 'cadillac', 'ctsv', '?']
or simple split_sent 7
is300 a
aspects ['better']
weights [1]
get url
params {'objectA': 'is300', 'objectB': 'a', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['parts', 'power', 'nicer', 'interior'] ['faster', 'easier', 'newer', 'acura']
2
winnder: a  other: is300
acpect winner  
acpect other  faster, newer and easier
type  templates
winnder: a  other: is300
acpect winner  
acpect other  faster, newer and easier
self predicate  better
answer begin:  The a is better than is300. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
parts, power, nicer, interior
parts, power, nicer, interior
smth wrong in answer generation, please try again
834 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'a', 'better', 'vehicle', 'lexus', 'lx', 'or', 'cadillac', 'escalade?']
['cadillac']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'a', 'better', 'vehicle', 'Lexus', 'LX', 'or', 'Cadillac', 'Escalade', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'cadillac', 'objectB': 'Cadillac', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: cadillac  other: cadillac
acpect winner  
acpect other  
type  templates
winnder: cadillac  other: cadillac
acpect winner  
acpect other  
self predicate  b
answer begin:  The cadillac is b than cadillac. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer cadillac than cadillac.
full answer  I would prefer cadillac than cadillac.
I would prefer cadillac than cadillac.
835 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'seventh', 'generation', 'video', 'game', 'system', '(wii,', 'xbox', '360,', 'nintendo', 'ds,', 'psp,', 'ps3)', 'will', 'be', 'best?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
836 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'best:', 'ps3,', 'xbox', '360,', 'or', 'revolution?', 'ps2,', 'xbox,', 'or', 'gamecube?', 'psp', 'or', 'ds?']
['gamecube?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'best', ':', 'PS3', ',', 'XBox', '360', ',', 'or', 'Revolution', '?', 'PS2', ',', 'XBox', ',', 'or', 'Gamecube', '?', 'PSP', 'or', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'Revolution', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'nintendo', 'greater', 'imho'] []
2
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
type  templates
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
self predicate  better
answer begin:  The revolution is better than gamecube. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
full answer  It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
837 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'a', 'wii,gamecube,xbox,xbox', '360,gameboy', 'sp,psp', 'or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'a', 'wii', ',', 'gamecube', ',', 'xbox', ',', 'xbox', '360,gameboy', 'SP', ',', 'PSP', 'or', 'PS3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
838 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'can', 'the', 'ps3', 'do', 'compared', 'to', 'the', 'ps2,', 'psp', 'and', 'the', 'xbox360?']
['ps3', 'ps2,', 'psp']
[]
len(objects) 3
aspects []
weights []
get url
params {'objectA': 'ps3', 'objectB': 'ps2', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier', 'smoother', 'easier to develop for'] ['greater', 'x360', 'simpler', 'number']
2
winnder: ps3  other: ps2
acpect winner  faster, easier to develop for and easier
acpect other  greater and simpler
type  templates
winnder: ps3  other: ps2
acpect winner  faster, easier to develop for and easier
acpect other  greater and simpler
self predicate  better
answer begin:  The ps3 is better than ps2. The reason are faster, easier to develop for and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier, smoother, easier to develop for
faster, easier, smoother, easier to develop for
winner_aspects_string1 faster, easier to develop for and easier
looser_aspects_string1 greater and simpler
make response  I came to the conclusion that ps3 is better, because of faster, easier to develop for and easier. Ps2 is greater and simpler.
gen templates 3 I came to the conclusion that ps3 is better, because of faster, easier to develop for and easier. Ps2 is greater and simpler.
full answer  I came to the conclusion that ps3 is better, because of faster, easier to develop for and easier. Ps2 is greater and simpler.
I came to the conclusion that ps3 is better, because of faster, easier to develop for and easier. Ps2 is greater and simpler.
839 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  I came to the conclusion that psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
gen templates 3 I came to the conclusion that psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
full answer  I came to the conclusion that psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
I came to the conclusion that psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
840 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'seventh', 'generation', 'video', 'game', 'system', '(wii,', 'xbox', '360,', 'nintendo', 'ds,', 'psp,', 'ps3)', 'will', 'be', 'best?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
841 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['overall', 'best:', 'ps3,', 'xbox', '360,', 'or', 'revolution?', 'ps2,', 'xbox,', 'or', 'gamecube?', 'psp', 'or', 'ds?']
['gamecube?']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Overall', 'best', ':', 'PS3', ',', 'XBox', '360', ',', 'or', 'Revolution', '?', 'PS2', ',', 'XBox', ',', 'or', 'Gamecube', '?', 'PSP', 'or', 'DS', '?']
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'Revolution', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'nintendo', 'greater', 'imho'] []
2
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
type  templates
winnder: revolution  other: gamecube
acpect winner  greater
acpect other  
self predicate  better
answer begin:  The revolution is better than gamecube. The reason are greater. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
full answer  It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
It seems like revolution is better than gamecube because it is games, nintendo, greater, imho.
842 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'of', 'these', 'cars', 'is', 'the', 'most', 'popular', '1964', 'shelby', 'cobra,', '1967', 'ford', 'mustang,or', 'the', '1969', 'chevrolet', 'camero?']
['ford']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ford', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'smarter', 'leverage', 'newer'] ['lighter', 'higher', 'larger', 'safer']
winnder: and  other: ford
acpect winner  greater, newer and smarter
acpect other  lighter, safer and higher
type  templates
ford has undeniable advantages. They are greater, newer and smarter.
843 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['how', 'is', 'chevrolet', 'aveo', '1.4', 'in', 'india?how', 'is', 'its', 'service', 'network', 'in', 'india', 'as', 'compared', 'to', 'ford/honda,etc?']
['chevrolet']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'chevrolet', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smarter', 'stronger', 'greater', 'quieter'] ['cheaper', 'bigger', 'safer', 'faster']
winnder: chevrolet  other: and
acpect winner  stronger, greater and smarter
acpect other  safer, faster and bigger
type  templates
chevrolet has undeniable advantages. They are stronger, greater and smarter.
844 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['who', 'loves', 'basketball', 'more', 'than', 'softball', 'or', 'baseball?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Who', 'loves', 'basketball', 'more', 'than', 'softball', 'or', 'baseball', '?']
or simple split_sent 6
softball baseball
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'softball', 'objectB': 'baseball', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['greater', 'longer', 'hevier', 'balll'] ['easier to hit', 'bigger', 'easier', 'girls']
2
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
type  templates
winnder: baseball  other: softball
acpect winner  greater and longer
acpect other  easier, easier to hit and bigger
self predicate  m
answer begin:  The baseball is m than softball. The reason are greater and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, longer, hevier, balll
greater, longer, hevier, balll
winner_aspects_string1 greater and longer
looser_aspects_string1 easier, easier to hit and bigger
make response  After much thought, I realized that  baseball is better, because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
gen templates 3 After much thought, I realized that  baseball is better, because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
full answer  After much thought, I realized that  baseball is better, because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
After much thought, I realized that  baseball is better, because of greater and longer. But i should tell you that softball is easier, easier to hit and bigger.
845 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'your', 'favorite', 'sport,', 'volleyball,', 'basketball,', 'or', 'softball?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'your', 'favorite', 'sport', ',', 'volleyball', ',', 'basketball', ',', 'or', 'softball', '?']
or simple split_sent 10
, softball
We can't recognize objects for comparision
846 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'soccer,', 'basketball', 'or', 'softball', 'better?']
['basketball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Is', 'soccer', ',', 'basketball', 'or', 'softball', 'better', '?']
or simple split_sent 4
basketball softball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'basketball', 'objectB': 'softball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['faster', 'greater'] ['larger', 'bigger', 'quicker', 'babincak']
2
winnder: softball  other: basketball
acpect winner  faster and greater
acpect other  larger, quicker and bigger
type  templates
winnder: softball  other: basketball
acpect winner  faster and greater
acpect other  larger, quicker and bigger
self predicate  b
answer begin:  The softball is b than basketball. The reason are faster and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater
faster, greater
winner_aspects_string1 faster and greater
looser_aspects_string1 larger, quicker and bigger
make response  I came to the conclusion that softball is better, because of faster and greater. But you should know that basketball is larger, quicker and bigger.
gen templates 3 I came to the conclusion that softball is better, because of faster and greater. But you should know that basketball is larger, quicker and bigger.
full answer  I came to the conclusion that softball is better, because of faster and greater. But you should know that basketball is larger, quicker and bigger.
I came to the conclusion that softball is better, because of faster and greater. But you should know that basketball is larger, quicker and bigger.
847 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'pastime', 'is', 'better??', 'american', 'baseball', 'or', 'canadian', 'hockey?']
['baseball']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'pastime', 'is', 'better', '?', '?', 'American', 'baseball', 'or', 'Canadian', 'hockey', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'baseball', 'objectB': 'Canadian', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['coaches', 'chance', 'pitcher', 'catcher'] ['greater']
2
winnder: canadian  other: baseball
acpect winner  
acpect other  greater
type  templates
winnder: canadian  other: baseball
acpect winner  
acpect other  greater
self predicate  b
answer begin:  The canadian is b than baseball. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
coaches, chance, pitcher, catcher
coaches, chance, pitcher, catcher
smth wrong in answer generation, please try again
848 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i`m', 'planning', 'to', 'buy', '70-300mm', 'lens.', 'which', 'is', 'a', 'better', 'choice:', 'nikon', ',', 'sigma', 'or', 'tamaron?']
['nikon']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['I`m', 'planning', 'to', 'buy', '70', '-', '300', 'mm', 'lens', '.', 'Which', 'is', 'a', 'better', 'choice', ':', 'nikon', ',', 'sigma', 'or', 'tamaron', '?']
or simple split_sent 19
sigma tamaron
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'sigma', 'objectB': 'tamaron', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  [] []
2
winnder: tamaron  other: sigma
acpect winner  
acpect other  
type  templates
winnder: tamaron  other: sigma
acpect winner  
acpect other  
self predicate  b
answer begin:  The tamaron is b than sigma. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer tamaron than sigma.
full answer  I would prefer tamaron than sigma.
I would prefer tamaron than sigma.
849 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['when', 'deciding', 'to', 'build', 'a', 'house,', 'which', 'is', 'better', 'to', 'consider', 'timber', 'or', 'concrete,', 'for', 'cyprus?']
['timber', 'concrete,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'timber', 'objectB': 'concrete', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'safer', 'lighter', 'faster'] ['greater', 'richer', 'cheaper', 'sleepers']
2
winnder: timber  other: concrete
acpect winner  safer, easier and faster
acpect other  cheaper, greater and richer
type  templates
winnder: timber  other: concrete
acpect winner  safer, easier and faster
acpect other  cheaper, greater and richer
self predicate  better
answer begin:  The timber is better than concrete. The reason are safer, easier and faster. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, safer, lighter, faster
easier, safer, lighter, faster
winner_aspects_string1 safer, easier and faster
looser_aspects_string1 cheaper, greater and richer
make response  After much thought, I realized that  timber is better, because of safer, easier and faster. But i should tell you that concrete is cheaper, greater and richer.
gen templates 3 After much thought, I realized that  timber is better, because of safer, easier and faster. But i should tell you that concrete is cheaper, greater and richer.
full answer  After much thought, I realized that  timber is better, because of safer, easier and faster. But i should tell you that concrete is cheaper, greater and richer.
After much thought, I realized that  timber is better, because of safer, easier and faster. But i should tell you that concrete is cheaper, greater and richer.
850 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'more', 'likely', 'your', 'weakness', 'and', 'why?', 'sodas', 'or', 'chocolate?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['What', 'is', 'more', 'likely', 'your', 'weakness', 'and', 'why', '?', ' ', 'Sodas', 'or', 'Chocolate', '?']
aspects more
weights [1, 1, 1, 1]
get url
params {'objectA': 'Sodas', 'objectB': 'Chocolate', 'fs': 'true', 'aspect1': 'm', 'aspect2': 'o', 'aspect3': 'r', 'aspect4': 'e', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1}
1
create fro json predicates more
create fro json self.predicates m
aspects  ['better for you'] []
2
winnder: chocolate  other: sodas
acpect winner  better for you
acpect other  
type  templates
winnder: chocolate  other: sodas
acpect winner  better for you
acpect other  
self predicate  m
answer begin:  The chocolate is m than sodas. The reason are better for you. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like chocolate is better than sodas because it is better for you.
full answer  It seems like chocolate is better than sodas because it is better for you.
It seems like chocolate is better than sodas because it is better for you.
851 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['what', 'can', 'you', 'do', 'with', 'oracle', 'that', 'would', 'be', 'difficult', 'to', 'do', 'with', 'postgresql,', 'or', 'mysql?']
['oracle', 'postgresql,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'oracle', 'objectB': 'postgresql', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'easier to work with and manage', 'performance', 'source'] ['boxes', 'faster', 'closer to oracle compatibility', 'machines']
2
winnder: postgresql  other: oracle
acpect winner  easier and easier to work with and manage
acpect other  faster and closer to oracle compatibility
type  templates
winnder: postgresql  other: oracle
acpect winner  easier and easier to work with and manage
acpect other  faster and closer to oracle compatibility
self predicate  better
answer begin:  The postgresql is better than oracle. The reason are easier and easier to work with and manage. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, easier to work with and manage, performance, source
easier, easier to work with and manage, performance, source
winner_aspects_string1 easier and easier to work with and manage
looser_aspects_string1 faster and closer to oracle compatibility
make response  It's simple! Postgresql is better, because of easier and easier to work with and manage. But you should know that oracle is faster and closer to oracle compatibility.
gen templates 3 It's simple! Postgresql is better, because of easier and easier to work with and manage. But you should know that oracle is faster and closer to oracle compatibility.
full answer  It's simple! Postgresql is better, because of easier and easier to work with and manage. But you should know that oracle is faster and closer to oracle compatibility.
It's simple! Postgresql is better, because of easier and easier to work with and manage. But you should know that oracle is faster and closer to oracle compatibility.
852 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['differences', 'between', "oracle's", '10g', 'and', 'mysql?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
853 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['nintendo', 'wii,', 'xbox', '360,', 'or', 'playstation', '3?', 'your', 'pick', 'and', 'why?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Nintendo', 'Wii', ',', 'XBOX', '360', ',', 'or', 'PlayStation', '3', '?', 'Your', 'pick', 'and', 'why', '?']
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'PlayStation 3', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'cooler', 'lighter', 'older'] []
2
winnder: playstation  other: playstation 3
acpect winner  lighter, faster and older
acpect other  
type  templates
winnder: playstation  other: playstation 3
acpect winner  lighter, faster and older
acpect other  
self predicate  better
answer begin:  The playstation is better than playstation 3. The reason are lighter, faster and older. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like playstation is better than playstation 3 because it is faster, cooler, lighter, older.
full answer  It seems like playstation is better than playstation 3 because it is faster, cooler, lighter, older.
It seems like playstation is better than playstation 3 because it is faster, cooler, lighter, older.
854 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'playstation', '3', 'or', 'nintendo', 'wii', 'and', 'why?']
['playstation', 'wii']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'playstation', 'objectB': 'wii', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['games', 'month', 'longer', 'consoles'] ['lighter', 'smoother', 'tiger', 'heftier']
2
winnder: playstation  other: wii
acpect winner  longer
acpect other  lighter and heftier
type  templates
winnder: playstation  other: wii
acpect winner  longer
acpect other  lighter and heftier
self predicate  better
answer begin:  The playstation is better than wii. The reason are longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
games, month, longer, consoles
games, month, longer, consoles
winner_aspects_string1  and longer
looser_aspects_string1 lighter and heftier
make response  Looks like playstation is better, because of  and longer. But it will be useful for you to know that wii is lighter and heftier.
gen templates 3 Looks like playstation is better, because of  and longer. But it will be useful for you to know that wii is lighter and heftier.
full answer  Looks like playstation is better, because of  and longer. But it will be useful for you to know that wii is lighter and heftier.
Looks like playstation is better, because of  and longer. But it will be useful for you to know that wii is lighter and heftier.
855 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'the', 'wii', 'xbox', '360', 'playstation', '3?']
['wii', 'playstation']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'playstation', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['graphics', 'games', 'faster', 'stronger'] ['tiger', 'quicker', 'larger', 'easier to switch on']
2
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
type  templates
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
self predicate  better
answer begin:  The playstation is better than wii. The reason are faster and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
graphics, games, faster, stronger
graphics, games, faster, stronger
winner_aspects_string1 faster and stronger
looser_aspects_string1 easier to switch on, larger and quicker
make response  I came to the conclusion that playstation is better, because of faster and stronger. But you should know that wii is easier to switch on, larger and quicker.
gen templates 3 I came to the conclusion that playstation is better, because of faster and stronger. But you should know that wii is easier to switch on, larger and quicker.
full answer  I came to the conclusion that playstation is better, because of faster and stronger. But you should know that wii is easier to switch on, larger and quicker.
I came to the conclusion that playstation is better, because of faster and stronger. But you should know that wii is easier to switch on, larger and quicker.
856 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'should', 'i', 'get', 'playstation', '3', 'or', 'a', 'wii?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['What', 'should', 'I', 'get', 'Playstation', '3', 'or', 'a', 'Wii', '?']
or simple split_sent 6
3 a
aspects []
weights []
get url
params {'objectA': '3', 'objectB': 'a', 'fs': 'true'}
smth wrong in response, please try again
857 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'playstation', '3', 'or', 'xbox', '360', 'or', 'nintendo', 'wii?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'Playstation', '3', 'or', 'XBOX', '360', 'or', 'Nintendo', 'Wii', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Playstation 3', 'objectB': 'XBOX 360', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['easier', 'playstation', 'easier to use operating environment', 'easier to work with'] ['easier to harness', 'hardware', 'bigger', 'lighter']
2
winnder: xbox 360  other: playstation 3
acpect winner  easier to work with, easier and easier to use operating environment
acpect other  lighter, easier to harness and bigger
type  templates
winnder: xbox 360  other: playstation 3
acpect winner  easier to work with, easier and easier to use operating environment
acpect other  lighter, easier to harness and bigger
self predicate  b
answer begin:  The xbox 360 is b than playstation 3. The reason are easier to work with, easier and easier to use operating environment. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, playstation, easier to use operating environment, easier to work with
easier, playstation, easier to use operating environment, easier to work with
winner_aspects_string1 easier to work with, easier and easier to use operating environment
looser_aspects_string1 lighter, easier to harness and bigger
make response  I came to the conclusion that xbox 360 is better, because of easier to work with, easier and easier to use operating environment. But you should know that playstation 3 is lighter, easier to harness and bigger.
gen templates 3 I came to the conclusion that xbox 360 is better, because of easier to work with, easier and easier to use operating environment. But you should know that playstation 3 is lighter, easier to harness and bigger.
full answer  I came to the conclusion that xbox 360 is better, because of easier to work with, easier and easier to use operating environment. But you should know that playstation 3 is lighter, easier to harness and bigger.
I came to the conclusion that xbox 360 is better, because of easier to work with, easier and easier to use operating environment. But you should know that playstation 3 is lighter, easier to harness and bigger.
858 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'would', 'you', 'rather', 'have,', 'playstation', '3', 'or', 'nintendo', 'wii?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'would', 'you', 'rather', 'have', ',', 'Playstation', '3', 'or', 'Nintendo', 'Wii', '?']
aspects []
weights []
get url
params {'objectA': 'Playstation 3', 'objectB': 'Nintendo Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['cheaper', 'faster', 'older'] ['heftier', 'lighter', 'easier', 'smoother']
2
winnder: playstation 3  other: nintendo wii
acpect winner  faster, older and cheaper
acpect other  heftier, easier and lighter
type  templates
winnder: playstation 3  other: nintendo wii
acpect winner  faster, older and cheaper
acpect other  heftier, easier and lighter
self predicate  better
answer begin:  The playstation 3 is better than nintendo wii. The reason are faster, older and cheaper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
cheaper, faster, older
cheaper, faster, older
winner_aspects_string1 faster, older and cheaper
looser_aspects_string1 heftier, easier and lighter
make response  Looks like playstation 3 is better, because of faster, older and cheaper. But you should know that nintendo wii is heftier, easier and lighter.
gen templates 3 Looks like playstation 3 is better, because of faster, older and cheaper. But you should know that nintendo wii is heftier, easier and lighter.
full answer  Looks like playstation 3 is better, because of faster, older and cheaper. But you should know that nintendo wii is heftier, easier and lighter.
Looks like playstation 3 is better, because of faster, older and cheaper. But you should know that nintendo wii is heftier, easier and lighter.
859 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'system', 'should', 'i', 'ask', 'for', 'christmas?', '-', 'xbox', '360,', 'nintendo', 'wii,', 'or', 'the', 'playstation', '3?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'system', 'should', 'I', 'ask', 'for', 'Christmas', '?', '-', 'Xbox', '360', ',', 'Nintendo', 'Wii', ',', 'or', 'the', 'Playstation', '3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['child', 'protection', 'laws', 'lawyer'] ['longer', 'easier to use', 'quicker', 'cheaper']
winnder: and  other: playstation
acpect winner  
acpect other  longer, quicker and easier to use
type  templates
playstation has undeniable advantages. They are .
860 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'has', 'better', 'graphics?', 'nintendo', 'wii', 'or', 'playstation', '3?']
['wii', 'playstation']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'playstation', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['graphics', 'games', 'faster', 'stronger'] ['tiger', 'quicker', 'larger', 'easier to switch on']
2
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
type  templates
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
self predicate  better
answer begin:  The playstation is better than wii. The reason are faster and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
graphics, games, faster, stronger
graphics, games, faster, stronger
winner_aspects_string1 faster and stronger
looser_aspects_string1 easier to switch on, larger and quicker
make response  I came to the conclusion that playstation is better, because of faster and stronger. But i should tell you that wii is easier to switch on, larger and quicker.
gen templates 3 I came to the conclusion that playstation is better, because of faster and stronger. But i should tell you that wii is easier to switch on, larger and quicker.
full answer  I came to the conclusion that playstation is better, because of faster and stronger. But i should tell you that wii is easier to switch on, larger and quicker.
I came to the conclusion that playstation is better, because of faster and stronger. But i should tell you that wii is easier to switch on, larger and quicker.
861 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['playstation', '3', 'vs', 'nintendo', 'wii', 'vs', 'xbox', '360-?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem vs
tokens ['Playstation', '3', 'vs', 'Nintendo', 'Wii', 'vs', 'Xbox', '360-', '?']
or simple split_sent 2
3 Nintendo
aspects []
weights []
get url
params {'objectA': '3', 'objectB': 'Nintendo', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'lighter', 'bigger', 'heftier'] ['sort', 'grip', 'nostalgia', 'sheer']
2
winnder: nintendo  other: 3
acpect winner  lighter, greater and heftier
acpect other  
type  templates
winnder: nintendo  other: 3
acpect winner  lighter, greater and heftier
acpect other  
self predicate  better
answer begin:  The nintendo is better than 3. The reason are lighter, greater and heftier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, lighter, bigger, heftier
greater, lighter, bigger, heftier
winner_aspects_string1 lighter, greater and heftier
smth wrong in answer generation, please try again
862 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['playstation', 'iii', 'vs.', 'wii?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem vs.
tokens ['Playstation', 'III', 'vs.', 'Wii', '?']
or simple split_sent 2
III Wii
aspects []
weights []
get url
params {'objectA': 'III', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: wii  other: iii
acpect winner  
acpect other  
type  templates
winnder: wii  other: iii
acpect winner  
acpect other  
self predicate  better
answer begin:  The wii is better than iii. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer wii than iii.
full answer  I would prefer wii than iii.
I would prefer wii than iii.
863 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['the', 'wii,', 'playstation', '3,', 'and', 'the', 'xbox', '360.....', 'which', 'would', 'you', 'choose?']
['wii,', 'playstation']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'playstation', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['graphics', 'games', 'faster', 'stronger'] ['tiger', 'quicker', 'larger', 'easier to switch on']
2
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
type  templates
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
self predicate  better
answer begin:  The playstation is better than wii. The reason are faster and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
graphics, games, faster, stronger
graphics, games, faster, stronger
winner_aspects_string1 faster and stronger
looser_aspects_string1 easier to switch on, larger and quicker
make response  I would prefer to use playstation because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
gen templates 3 I would prefer to use playstation because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
full answer  I would prefer to use playstation because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
I would prefer to use playstation because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
864 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'playstation3,', 'nintendo', 'wii,', 'or', 'xbox', '360?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'playstation3', ',', 'nintendo', 'wii', ',', 'or', 'xbox', '360', '?']
or simple split_sent 8
, xbox
We can't recognize objects for comparision
865 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['playstation', '3', 'or', 'xbox', '360', 'or', 'nintendo', 'wii?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['PlayStation', '3', 'or', 'Xbox', '360', 'or', 'Nintendo', 'Wii', '?']
or simple split_sent 2
3 Xbox
aspects []
weights []
get url
params {'objectA': '3', 'objectB': 'Xbox', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'easier to use operating environment', 'years', 'greater'] ['playstation', 'sony', 'easier to harness', 'gddr5']
2
winnder: xbox  other: 3
acpect winner  faster, greater and easier to use operating environment
acpect other  easier to harness
type  templates
winnder: xbox  other: 3
acpect winner  faster, greater and easier to use operating environment
acpect other  easier to harness
self predicate  better
answer begin:  The xbox is better than 3. The reason are faster, greater and easier to use operating environment. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, easier to use operating environment, years, greater
faster, easier to use operating environment, years, greater
winner_aspects_string1 faster, greater and easier to use operating environment
looser_aspects_string1  and easier to harness
make response  It's simple! Xbox is better, because of faster, greater and easier to use operating environment. But i should tell you that 3 is  and easier to harness.
gen templates 3 It's simple! Xbox is better, because of faster, greater and easier to use operating environment. But i should tell you that 3 is  and easier to harness.
full answer  It's simple! Xbox is better, because of faster, greater and easier to use operating environment. But i should tell you that 3 is  and easier to harness.
It's simple! Xbox is better, because of faster, greater and easier to use operating environment. But i should tell you that 3 is  and easier to harness.
866 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'game', 'system', 'should', 'i', 'purchase?', 'playstation', '3,', 'nintendo', 'wii', 'or', 'xbox', '360?']
['playstation', 'wii']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'month', 'hd', 'graphics'] ['lighter', 'smoother', 'tiger', 'heftier']
2
winnder: playstation  other: wii
acpect winner  
acpect other  lighter and heftier
type  templates
winnder: playstation  other: wii
acpect winner  
acpect other  lighter and heftier
self predicate  better
answer begin:  The playstation is better than wii. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
games, month, hd, graphics
games, month, hd, graphics
smth wrong in answer generation, please try again
867 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better', 'the', 'wii', 'console,', 'playstation', '3', 'or', 'x-box', '360?', 'or', 'atleast', 'on', 'paper', 'what', 'is', 'best?']
['wii', 'playstation']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'playstation', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['graphics', 'games', 'faster', 'stronger'] ['tiger', 'quicker', 'larger', 'easier to switch on']
2
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
type  templates
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
self predicate  better
answer begin:  The playstation is better than wii. The reason are faster and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
graphics, games, faster, stronger
graphics, games, faster, stronger
winner_aspects_string1 faster and stronger
looser_aspects_string1 easier to switch on, larger and quicker
make response  It's simple! Playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
gen templates 3 It's simple! Playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
full answer  It's simple! Playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
It's simple! Playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
868 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['do', 'you', 'think', 'i', 'should', 'get', 'a', 'playstation', '3,', 'or', 'a', 'nintendo', 'wii?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Do', 'you', 'think', 'I', 'should', 'get', 'a', 'PLAYSTATION', '3', ',', 'OR', 'A', 'NINTENDO', 'WII', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['child', 'protection', 'laws', 'lawyer'] ['longer', 'easier to use', 'quicker', 'cheaper']
winnder: and  other: playstation
acpect winner  
acpect other  longer, quicker and easier to use
type  templates
playstation has undeniable advantages. They are .
869 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better', 'of', 'these', 'systems:', 'nintendo', 'wii,', 'xbox', '360,', 'playstation', '3?']
['playstation']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'playstation', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['child', 'protection', 'laws', 'lawyer'] ['longer', 'easier to use', 'quicker', 'cheaper']
winnder: and  other: playstation
acpect winner  
acpect other  longer, quicker and easier to use
type  templates
playstation has undeniable advantages. They are .
870 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['are', 'you', 'more', 'for', 'the', 'nintendo', 'wii', 'or', 'the', 'playstation', '3?']
['wii', 'playstation']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'playstation', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['graphics', 'games', 'faster', 'stronger'] ['tiger', 'quicker', 'larger', 'easier to switch on']
2
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
type  templates
winnder: playstation  other: wii
acpect winner  faster and stronger
acpect other  easier to switch on, larger and quicker
self predicate  better
answer begin:  The playstation is better than wii. The reason are faster and stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
graphics, games, faster, stronger
graphics, games, faster, stronger
winner_aspects_string1 faster and stronger
looser_aspects_string1 easier to switch on, larger and quicker
make response  After much thought, I realized that  playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
gen templates 3 After much thought, I realized that  playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
full answer  After much thought, I realized that  playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
After much thought, I realized that  playstation is better, because of faster and stronger. But it will be useful for you to know that wii is easier to switch on, larger and quicker.
871 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'B-OBJ', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'best', 'and', 'most', 'economical', 'video', 'system', '-', 'xbox,', 'playstation', 'wii', '?']
['playstation', 'wii']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'month', 'hd', 'graphics'] ['lighter', 'smoother', 'tiger', 'heftier']
2
winnder: playstation  other: wii
acpect winner  
acpect other  lighter and heftier
type  templates
winnder: playstation  other: wii
acpect winner  
acpect other  lighter and heftier
self predicate  better
answer begin:  The playstation is better than wii. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
games, month, hd, graphics
games, month, hd, graphics
smth wrong in answer generation, please try again
872 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'best?', 'xbox', '360,', 'playstation', '3', 'or', 'wii?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'best', '?', 'Xbox', '360', ',', 'Playstation', '3', 'or', 'Wii', '?']
or simple split_sent 9
3 Wii
aspects []
weights []
get url
params {'objectA': '3', 'objectB': 'Wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'easier', 'greater', 'smoother'] ['faster', 'hd', 'graphics', 'longer']
2
winnder: wii  other: 3
acpect winner  lighter, easier and greater
acpect other  faster and longer
type  templates
winnder: wii  other: 3
acpect winner  lighter, easier and greater
acpect other  faster and longer
self predicate  better
answer begin:  The wii is better than 3. The reason are lighter, easier and greater. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, easier, greater, smoother
lighter, easier, greater, smoother
winner_aspects_string1 lighter, easier and greater
looser_aspects_string1 faster and longer
make response  After much thought, I realized that  wii is better, because of lighter, easier and greater. 3 is faster and longer.
gen templates 3 After much thought, I realized that  wii is better, because of lighter, easier and greater. 3 is faster and longer.
full answer  After much thought, I realized that  wii is better, because of lighter, easier and greater. 3 is faster and longer.
After much thought, I realized that  wii is better, because of lighter, easier and greater. 3 is faster and longer.
873 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better,', 'the', 'xbox', 'preminum', '360,', 'nintendo', 'wii,', 'or', 'playstation', '3?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', ',', 'the', 'Xbox', 'preminum', '360', ',', 'Nintendo', 'Wii', ',', 'or', 'Playstation', '3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'playstation', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['child', 'protection', 'laws', 'lawyer'] ['longer', 'easier to use', 'quicker', 'cheaper']
winnder: and  other: playstation
acpect winner  
acpect other  longer, quicker and easier to use
type  templates
playstation has undeniable advantages. They are .
874 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'need', 'some', 'comparison', 'between', 'the', 'nintendo', 'wii,', 'playstation', '3,', 'and', 'the', 'xbox', '360?']
['playstation']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['child', 'protection', 'laws', 'lawyer'] ['longer', 'easier to use', 'quicker', 'cheaper']
winnder: and  other: playstation
acpect winner  
acpect other  longer, quicker and easier to use
type  templates
playstation has undeniable advantages. They are .
875 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['is', 'the', 'playstation', '3', 'better', 'than', 'the', 'wii??']
['playstation']
['better']
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects ['better']
weights [1]
get url
params {'objectA': 'playstation', 'objectB': 'and', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['child', 'protection', 'laws', 'lawyer'] ['longer', 'easier to use', 'quicker', 'cheaper']
winnder: and  other: playstation
acpect winner  
acpect other  longer, quicker and easier to use
type  templates
playstation has undeniable advantages. They are .
876 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'one', 'is', 'better:', 'nintendo', 'wii', 'or', 'playstation', '3???', 'which', 'one', 'do', 'you', 'have??']
['wii', 'playstation']
['better:']
len(objects) 2
aspects ['better:']
weights [1]
get url
params {'objectA': 'wii', 'objectB': 'playstation', 'fs': 'true', 'aspect1': 'better:', 'weight1': 1}
1
create fro json predicates ['better:']
create fro json self.predicates better:
aspects  ['graphics', 'games', 'faster', 'longer'] ['tiger', 'quicker', 'larger', 'easier to switch on']
2
winnder: playstation  other: wii
acpect winner  faster and longer
acpect other  easier to switch on, larger and quicker
type  templates
winnder: playstation  other: wii
acpect winner  faster and longer
acpect other  easier to switch on, larger and quicker
self predicate  better:
answer begin:  The playstation is better: than wii. The reason are faster and longer. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
graphics, games, faster, longer
graphics, games, faster, longer
winner_aspects_string1 faster and longer
looser_aspects_string1 easier to switch on, larger and quicker
make response  I came to the conclusion that playstation is better, because of faster and longer. But you should know that wii is easier to switch on, larger and quicker.
gen templates 3 I came to the conclusion that playstation is better, because of faster and longer. But you should know that wii is easier to switch on, larger and quicker.
full answer  I came to the conclusion that playstation is better, because of faster and longer. But you should know that wii is easier to switch on, larger and quicker.
I came to the conclusion that playstation is better, because of faster and longer. But you should know that wii is easier to switch on, larger and quicker.
877 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['playstation', '3-xbox', '360-nintendo', 'wii', 'which', 'console', 'is', 'more', 'innovative', 'of', 'them', 'all???']
['playstation', 'wii']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'playstation', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['games', 'month', 'hd', 'graphics'] ['lighter', 'smoother', 'tiger', 'heftier']
2
winnder: playstation  other: wii
acpect winner  
acpect other  lighter and heftier
type  templates
winnder: playstation  other: wii
acpect winner  
acpect other  lighter and heftier
self predicate  better
answer begin:  The playstation is better than wii. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
games, month, hd, graphics
games, month, hd, graphics
smth wrong in answer generation, please try again
878 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['xbox', '360', 'vs.', 'playstation', '3', 'vs.', 'wii...now', 'pick', 'one!?']
['playstation']
[]
len(objects) 1
We try to use spacy
comp_elem vs.
tokens ['XBOX', '360', 'vs.', 'PLAYSTATION', '3', 'vs.', 'Wii', '...', 'Now', 'Pick', 'one', '!', '?']
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': '360', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'lighter', 'easier to manipulate', 'longer'] ['quicker', 'alot', 'higher', 'easier']
winnder: and  other: 360
acpect winner  lighter, easier to manipulate and longer
acpect other  easier, quicker and higher
type  templates
360 has undeniable advantages. They are lighter, easier to manipulate and longer.
879 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'will', 'be', 'better,', 'wii,', 'xbox', '360,', 'playstation', '3?']
['playstation']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'playstation', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['child', 'protection', 'laws', 'lawyer'] ['longer', 'easier to use', 'quicker', 'cheaper']
winnder: and  other: playstation
acpect winner  
acpect other  longer, quicker and easier to use
type  templates
playstation has undeniable advantages. They are .
880 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'soccer,', 'tennis,', 'volleyball,', 'badminton', 'or', 'basketball??']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['which', 'is', 'better', 'soccer', ',', 'tennis', ',', 'volleyball', ',', 'badminton', 'or', 'basketball', '?', '?']
or simple split_sent 10
badminton basketball
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'badminton', 'objectB': 'basketball', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['lighter', 'easier', 'faster'] []
2
winnder: basketball  other: badminton
acpect winner  lighter, easier and faster
acpect other  
type  templates
winnder: basketball  other: badminton
acpect winner  lighter, easier and faster
acpect other  
self predicate  b
answer begin:  The basketball is b than badminton. The reason are lighter, easier and faster. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 It seems like basketball is better than badminton because it is lighter, easier, faster.
full answer  It seems like basketball is better than badminton because it is lighter, easier, faster.
It seems like basketball is better than badminton because it is lighter, easier, faster.
881 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['for', 'guys:what', 'sport', 'is', 'sexier', 'for', 'a', 'girl?tennis', 'or', 'volleyball?']
[]
['sexier']
len(objects) 0
We try to use spacy
comp_elem or
tokens ['for', 'guys', ':', 'what', 'sport', 'is', 'sexier', 'for', 'a', 'girl?tennis', 'or', 'volleyball', '?']
or simple split_sent 10
girl?tennis volleyball
aspects ['sexier']
weights [1]
get url
params {'objectA': 'girl?tennis', 'objectB': 'volleyball', 'fs': 'true', 'aspect1': 'sexier', 'weight1': 1}
1
create fro json predicates ['sexier']
create fro json self.predicates sexier
aspects  [] []
2
winnder: volleyball  other: girl?tennis
acpect winner  
acpect other  
type  templates
winnder: volleyball  other: girl?tennis
acpect winner  
acpect other  
self predicate  sexier
answer begin:  The volleyball is sexier than girl?tennis. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer volleyball than girl?tennis.
full answer  I would prefer volleyball than girl?tennis.
I would prefer volleyball than girl?tennis.
882 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'a', 'wii,gamecube,xbox,xbox', '360,gameboy', 'sp,psp', 'or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'a', 'wii', ',', 'gamecube', ',', 'xbox', ',', 'xbox', '360,gameboy', 'SP', ',', 'PSP', 'or', 'PS3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
883 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['if', 'you', 'play', 'a', 'gamecube', 'game', 'on', 'the', 'wii,', 'will', 'the', 'graphics', 'be', 'better', 'or', 'the', 'same?']
['gamecube', 'wii,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'gamecube', 'objectB': 'wii', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'greater', 'graphics', 'easier'] ['kind', 'list', 'better to just take it', 'easier to use']
2
winnder: wii  other: gamecube
acpect winner  faster, greater and easier
acpect other  better to just take it and easier to use
type  templates
winnder: wii  other: gamecube
acpect winner  faster, greater and easier
acpect other  better to just take it and easier to use
self predicate  better
answer begin:  The wii is better than gamecube. The reason are faster, greater and easier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, graphics, easier
faster, greater, graphics, easier
winner_aspects_string1 faster, greater and easier
looser_aspects_string1 better to just take it and easier to use
make response  Looks like wii is better, because of faster, greater and easier. But i should tell you that gamecube is better to just take it and easier to use.
gen templates 3 Looks like wii is better, because of faster, greater and easier. But i should tell you that gamecube is better to just take it and easier to use.
full answer  Looks like wii is better, because of faster, greater and easier. But i should tell you that gamecube is better to just take it and easier to use.
Looks like wii is better, because of faster, greater and easier. But i should tell you that gamecube is better to just take it and easier to use.
884 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['will', 'the', 'game', 'play', 'for', 'the', 'legend', 'of', 'zelda', 'twilight', 'princess', 'be', 'different', 'on', 'the', 'wii', 'system', 'than', 'the', 'gamecube?']
['wii']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['smoother', 'safer', 'faster', 'easier for me to use and control'] ['greater', 'quicker', 'easier to use', 'cheaper']
winnder: and  other: wii
acpect winner  safer, faster and easier for me to use and control
acpect other  greater, quicker and easier to use
type  templates
wii has undeniable advantages. They are safer, faster and easier for me to use and control.
885 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['wii,', 'ps2', 'or', 'gamecube...what', 'you', 'recommend?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['Wii', ',', 'PS2', 'or', 'GameCube', '...', 'what', 'you', 'recommend', '?']
or simple split_sent 3
PS2 GameCube
aspects []
weights []
get url
params {'objectA': 'PS2', 'objectB': 'GameCube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['faster', 'nicersmoother', 'smoother', 'older'] ['play', 'dvds', 'friend', 'time']
2
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
type  templates
winnder: gamecube  other: ps2
acpect winner  faster and older
acpect other  
self predicate  better
answer begin:  The gamecube is better than ps2. The reason are faster and older. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, nicersmoother, smoother, older
faster, nicersmoother, smoother, older
winner_aspects_string1 faster and older
smth wrong in answer generation, please try again
886 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  Looks like psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
gen templates 3 Looks like psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
full answer  Looks like psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
Looks like psp is better, because of  and stronger. But it will be useful for you to know that gamecube is  and faster.
887 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'better', 'a', 'wii,gamecube,xbox,xbox', '360,gameboy', 'sp,psp', 'or', 'ps3?']
[]
[]
len(objects) 0
We try to use spacy
comp_elem or
tokens ['what', 'is', 'better', 'a', 'wii', ',', 'gamecube', ',', 'xbox', ',', 'xbox', '360,gameboy', 'SP', ',', 'PSP', 'or', 'PS3', '?']
len(obj1) > 0 and len(obj2) == 0
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'PSP', 'objectB': 'and', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
create fro json predicates better
create fro json self.predicates b
aspects  ['slimmer', 'easier to learn experience', 'easier', 'faster'] ['easier to use and better for their small hands', 'better for their small hands', 'greater', 'bigger']
winnder: psp  other: and
acpect winner  easier to learn experience, faster and easier
acpect other  easier to use and better for their small hands, greater and bigger
type  templates
psp has undeniable advantages. They are easier to learn experience, faster and easier.
888 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['i', 'have', 'a', 'difficult', 'choice', 'to', 'make.', 'if', 'i', 'could', 'have', 'either', 'a', 'nintendo', 'wii', 'or', 'a', 'psp,', 'which', 'one', 'should', 'i', 'get?']
['wii', 'psp,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'psp', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['greater', 'experiences', 'smoother', 'lighter to carry around'] ['faster', 'higher', 'easier to port from wii to psp', 'analogs']
2
winnder: psp  other: wii
acpect winner  greater and lighter to carry around
acpect other  faster, higher and easier to port from wii to psp
type  templates
winnder: psp  other: wii
acpect winner  greater and lighter to carry around
acpect other  faster, higher and easier to port from wii to psp
self predicate  better
answer begin:  The psp is better than wii. The reason are greater and lighter to carry around. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, experiences, smoother, lighter to carry around
greater, experiences, smoother, lighter to carry around
winner_aspects_string1 greater and lighter to carry around
looser_aspects_string1 faster, higher and easier to port from wii to psp
make response  After much thought, I realized that  psp is better, because of greater and lighter to carry around. But you should know that wii is faster, higher and easier to port from wii to psp.
gen templates 3 After much thought, I realized that  psp is better, because of greater and lighter to carry around. But you should know that wii is faster, higher and easier to port from wii to psp.
full answer  After much thought, I realized that  psp is better, because of greater and lighter to carry around. But you should know that wii is faster, higher and easier to port from wii to psp.
After much thought, I realized that  psp is better, because of greater and lighter to carry around. But you should know that wii is faster, higher and easier to port from wii to psp.
889 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['whats', 'better:', 'psp,', 'ps2,', 'gamecube,', 'xbox,', 'xbox', '360,', 'ps3', 'or', 'wii?']
['psp,', 'gamecube,']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'psp', 'objectB': 'gamecube', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['computer', 'stronger'] ['loading', 'screen', 'faster', 'games']
2
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
type  templates
winnder: psp  other: gamecube
acpect winner  stronger
acpect other  faster
self predicate  better
answer begin:  The psp is better than gamecube. The reason are stronger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
computer, stronger
computer, stronger
winner_aspects_string1  and stronger
looser_aspects_string1  and faster
make response  After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
gen templates 3 After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
full answer  After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
After much thought, I realized that  psp is better, because of  and stronger. But you should know that gamecube is  and faster.
890 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'seventh', 'generation', 'video', 'game', 'system', '(wii,', 'xbox', '360,', 'nintendo', 'ds,', 'psp,', 'ps3)', 'will', 'be', 'best?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
891 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['any', 'opinions', 'of', 'a', 'toshiba', 'mk8032gsx', 'hard', 'drive', 'versus', 'samsung', 'hm080ii?']
['toshiba']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'toshiba', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['bigger', 'lighter', 'faster', 'easier to use'] ['cheaper', 'heavier', 'slimmer', 'greater']
winnder: and  other: toshiba
acpect winner  lighter, faster and easier to use
acpect other  heavier, greater and cheaper
type  templates
toshiba has undeniable advantages. They are lighter, faster and easier to use.
892 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'B-OBJ', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'java', 'ide', 'is', 'better?.', 'netbeans', 'or', 'eclipse?']
['java']
['better?.']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'JAVA', 'IDE', 'is', 'better', '?', '.', 'Netbeans', 'or', 'eclipse', '?']
or simple split_sent 8
Netbeans eclipse
aspects ['better?.']
weights [1]
get url
params {'objectA': 'Netbeans', 'objectB': 'eclipse', 'fs': 'true', 'aspect1': 'better?.', 'weight1': 1}
1
create fro json predicates ['better?.']
create fro json self.predicates better?.
aspects  ['easier to get up to speed with', 'blogger', 'position', 'complexity'] ['time', 'easier to use', 'easier for bea to switch to eclipse', 'easier to build appserver integration']
2
winnder: netbeans  other: eclipse
acpect winner  easier to get up to speed with
acpect other  easier to build appserver integration, easier for bea to switch to eclipse and easier to use
type  templates
winnder: netbeans  other: eclipse
acpect winner  easier to get up to speed with
acpect other  easier to build appserver integration, easier for bea to switch to eclipse and easier to use
self predicate  better?.
answer begin:  The netbeans is better?. than eclipse. The reason are easier to get up to speed with. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier to get up to speed with, blogger, position, complexity
easier to get up to speed with, blogger, position, complexity
winner_aspects_string1  and easier to get up to speed with
looser_aspects_string1 easier to build appserver integration, easier for bea to switch to eclipse and easier to use
make response  It's simple! Netbeans is better, because of  and easier to get up to speed with. But it will be useful for you to know that eclipse is easier to build appserver integration, easier for bea to switch to eclipse and easier to use.
gen templates 3 It's simple! Netbeans is better, because of  and easier to get up to speed with. But it will be useful for you to know that eclipse is easier to build appserver integration, easier for bea to switch to eclipse and easier to use.
full answer  It's simple! Netbeans is better, because of  and easier to get up to speed with. But it will be useful for you to know that eclipse is easier to build appserver integration, easier for bea to switch to eclipse and easier to use.
It's simple! Netbeans is better, because of  and easier to get up to speed with. But it will be useful for you to know that eclipse is easier to build appserver integration, easier for bea to switch to eclipse and easier to use.
893 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O']
extract_objects_predicates words ['what', 'is', 'the', 'difference', 'between', 'nitendo', 'ds', 'and', 'nitendo', 'wii?']
['ds']
[]
len(objects) 1
We try to use spacy
len(obj1) > 0 and len(obj2) == 0
aspects []
weights []
get url
params {'objectA': 'ds', 'objectB': 'and', 'fs': 'true'}
create fro json predicates []
create fro json self.predicates 
aspects  ['lighter', 'quicker', 'faster to play', 'smoother'] ['easier to learn experience', 'brighter', 'older', 'simpler']
winnder: and  other: ds
acpect winner  lighter, quicker and faster to play
acpect other  brighter, easier to learn experience and simpler
type  templates
ds has undeniable advantages. They are lighter, quicker and faster to play.
894 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['should', 'you', 'go', 'for', 'the', 'wii', 'or', 'ds', 'lite?']
['wii', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'wii', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['version', 'quicker', 'easier', 'device'] ['faster', 'friendlier', 'more to enjoy that game', 'richer']
2
winnder: ds  other: wii
acpect winner  easier and quicker
acpect other  faster, friendlier and more to enjoy that game
type  templates
winnder: ds  other: wii
acpect winner  easier and quicker
acpect other  faster, friendlier and more to enjoy that game
self predicate  better
answer begin:  The ds is better than wii. The reason are easier and quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
version, quicker, easier, device
version, quicker, easier, device
winner_aspects_string1 easier and quicker
looser_aspects_string1 faster, friendlier and more to enjoy that game
make response  I came to the conclusion that ds is better, because of easier and quicker. But it will be useful for you to know that wii is faster, friendlier and more to enjoy that game.
gen templates 3 I came to the conclusion that ds is better, because of easier and quicker. But it will be useful for you to know that wii is faster, friendlier and more to enjoy that game.
full answer  I came to the conclusion that ds is better, because of easier and quicker. But it will be useful for you to know that wii is faster, friendlier and more to enjoy that game.
I came to the conclusion that ds is better, because of easier and quicker. But it will be useful for you to know that wii is faster, friendlier and more to enjoy that game.
895 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'seventh', 'generation', 'video', 'game', 'system', '(wii,', 'xbox', '360,', 'nintendo', 'ds,', 'psp,', 'ps3)', 'will', 'be', 'best?']
[]
[]
len(objects) 0
We try to use spacy
We can't recognize objects for comparision
896 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'of', 'these', 'is', 'the', 'best', 'and', 'how', '-', 'xbox', '360,', 'psii', '(or', 'ps', 'iii),', 'or', 'nintendo', 'ds', '(or', 'wii)?']
['ps', 'ds']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'ps', 'objectB': 'ds', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  ['easier', 'questions', 'bigger', 'easier to tackle'] ['wider', 'finger', 'faster']
2
winnder: ps  other: ds
acpect winner  easier, easier to tackle and bigger
acpect other  wider and faster
type  templates
winnder: ps  other: ds
acpect winner  easier, easier to tackle and bigger
acpect other  wider and faster
self predicate  better
answer begin:  The ps is better than ds. The reason are easier, easier to tackle and bigger. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
easier, questions, bigger, easier to tackle
easier, questions, bigger, easier to tackle
winner_aspects_string1 easier, easier to tackle and bigger
looser_aspects_string1 wider and faster
make response  Looks like ps is better, because of easier, easier to tackle and bigger. But it will be useful for you to know that ds is wider and faster.
gen templates 3 Looks like ps is better, because of easier, easier to tackle and bigger. But it will be useful for you to know that ds is wider and faster.
full answer  Looks like ps is better, because of easier, easier to tackle and bigger. But it will be useful for you to know that ds is wider and faster.
Looks like ps is better, because of easier, easier to tackle and bigger. But it will be useful for you to know that ds is wider and faster.
897 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'in', 'quality,', 'power,', 'and', 'fuel', 'economy,', '2007', 'toyota', 'tundra', 'or', '2007', 'chevrolet', 'silverado?']
['toyota']
[]
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'in', 'quality', ',', 'power', ',', 'and', 'fuel', 'economy', ',', '2007', 'Toyota', 'Tundra', 'or', '2007', 'Chevrolet', 'Silverado', '?']
aspects better
weights [1, 1, 1, 1, 1, 1]
get url
params {'objectA': 'Tundra', 'objectB': '2007', 'fs': 'true', 'aspect1': 'b', 'aspect2': 'e', 'aspect3': 't', 'aspect4': 't', 'aspect5': 'e', 'aspect6': 'r', 'weight1': 1, 'weight2': 1, 'weight3': 1, 'weight4': 1, 'weight5': 1, 'weight6': 1}
1
create fro json predicates better
create fro json self.predicates b
aspects  ['quicker', 'factors', 'methane', 'release'] ['longer', 'flaws', 'camry', 'pickup']
2
winnder: 2007  other: tundra
acpect winner  quicker
acpect other  longer
type  templates
winnder: 2007  other: tundra
acpect winner  quicker
acpect other  longer
self predicate  b
answer begin:  The 2007 is b than tundra. The reason are quicker. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
quicker, factors, methane, release
quicker, factors, methane, release
winner_aspects_string1  and quicker
looser_aspects_string1  and longer
make response  Looks like 2007 is better, because of  and quicker. Tundra is  and longer.
gen templates 3 Looks like 2007 is better, because of  and quicker. Tundra is  and longer.
full answer  Looks like 2007 is better, because of  and quicker. Tundra is  and longer.
Looks like 2007 is better, because of  and quicker. Tundra is  and longer.
898 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['which', 'is', 'better', 'for', 'on-road', 'and', 'light', 'off-road', 'use,', '2007', 'chevrolet', 'tahoe', 'or', '2007', 'toyota', 'sequoia?']
['toyota']
['better']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['Which', 'is', 'better', 'for', 'on', '-', 'road', 'and', 'light', 'off', '-', 'road', 'use', ',', '2007', 'Chevrolet', 'Tahoe', 'or', '2007', 'Toyota', 'Sequoia', '?']
aspects ['better']
weights [1]
get url
params {'objectA': 'Tahoe', 'objectB': '2007', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['faster', 'greater', 'deeper', 'easier to move'] ['larger']
2
winnder: 2007  other: tahoe
acpect winner  faster, easier to move and deeper
acpect other  larger
type  templates
winnder: 2007  other: tahoe
acpect winner  faster, easier to move and deeper
acpect other  larger
self predicate  better
answer begin:  The 2007 is better than tahoe. The reason are faster, easier to move and deeper. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
faster, greater, deeper, easier to move
faster, greater, deeper, easier to move
winner_aspects_string1 faster, easier to move and deeper
looser_aspects_string1 larger
make response  I would prefer to use 2007 because of faster, easier to move and deeper. But you should know that tahoe is larger.
gen templates 3 I would prefer to use 2007 because of faster, easier to move and deeper. But you should know that tahoe is larger.
full answer  I would prefer to use 2007 because of faster, easier to move and deeper. But you should know that tahoe is larger.
I would prefer to use 2007 because of faster, easier to move and deeper. But you should know that tahoe is larger.
899 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O', 'O', 'O', 'B-OBJ', 'O']
extract_objects_predicates words ['would', 'it', 'be', 'better', 'to', 'buy', 'a', 'new', 'honda', 'civic', 'or', 'a', '2000', 'bmw', '323?']
['honda', 'bmw']
['better']
len(objects) 2
aspects ['better']
weights [1]
get url
params {'objectA': 'honda', 'objectB': 'bmw', 'fs': 'true', 'aspect1': 'better', 'weight1': 1}
1
create fro json predicates ['better']
create fro json self.predicates better
aspects  ['greater', 'easier', 'higher', 'heavier'] ['simpler', 'deeper', 'faster', 'easier to ride']
2
winnder: bmw  other: honda
acpect winner  greater, higher and heavier
acpect other  faster, easier to ride and simpler
type  templates
winnder: bmw  other: honda
acpect winner  greater, higher and heavier
acpect other  faster, easier to ride and simpler
self predicate  better
answer begin:  The bmw is better than honda. The reason are greater, higher and heavier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
greater, easier, higher, heavier
greater, easier, higher, heavier
winner_aspects_string1 greater, higher and heavier
looser_aspects_string1 faster, easier to ride and simpler
make response  After much thought, I realized that  bmw is better, because of greater, higher and heavier. Honda is faster, easier to ride and simpler.
gen templates 3 After much thought, I realized that  bmw is better, because of greater, higher and heavier. Honda is faster, easier to ride and simpler.
full answer  After much thought, I realized that  bmw is better, because of greater, higher and heavier. Honda is faster, easier to ride and simpler.
After much thought, I realized that  bmw is better, because of greater, higher and heavier. Honda is faster, easier to ride and simpler.
900 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'B-PREDFULL', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['which', 'is', 'easier,', 'less', 'expensive,', 'and', 'pays', 'more', 'golf', 'or', 'tennis?']
['golf']
['easier,']
len(objects) 1
We try to use spacy
comp_elem or
tokens ['which', 'is', 'easier', ',', 'less', 'expensive', ',', 'and', 'pays', 'more', 'golf', 'or', 'tennis', '?']
or simple split_sent 11
golf tennis
aspects ['easier,']
weights [1]
get url
params {'objectA': 'golf', 'objectB': 'tennis', 'fs': 'true', 'aspect1': 'easier,', 'weight1': 1}
1
create fro json predicates ['easier,']
create fro json self.predicates easier,
aspects  ['lighter', 'sweetspot', 'clubs', 'heavier'] ['easier to win in tennis for superstars at their peaks', 'faster', 'easier for a child to learn to hit a tennis ball faster', 'harder']
2
winnder: golf  other: tennis
acpect winner  lighter and heavier
acpect other  easier for a child to learn to hit a tennis ball faster, faster and harder
type  templates
winnder: golf  other: tennis
acpect winner  lighter and heavier
acpect other  easier for a child to learn to hit a tennis ball faster, faster and harder
self predicate  easier,
answer begin:  The golf is easier, than tennis. The reason are lighter and heavier. 
self type templates
gen templates
gen templates 2
generate template 0
generate template 1
generate template 22
lighter, sweetspot, clubs, heavier
lighter, sweetspot, clubs, heavier
winner_aspects_string1 lighter and heavier
looser_aspects_string1 easier for a child to learn to hit a tennis ball faster, faster and harder
make response  I came to the conclusion that golf is better, because of lighter and heavier. Tennis is easier for a child to learn to hit a tennis ball faster, faster and harder.
gen templates 3 I came to the conclusion that golf is better, because of lighter and heavier. Tennis is easier for a child to learn to hit a tennis ball faster, faster and harder.
full answer  I came to the conclusion that golf is better, because of lighter and heavier. Tennis is easier for a child to learn to hit a tennis ball faster, faster and harder.
I came to the conclusion that golf is better, because of lighter and heavier. Tennis is easier for a child to learn to hit a tennis ball faster, faster and harder.
901 


in extractor get params 0
in batch_to_ids
torch.cuda.device_of -1
torch.cuda.device_of -1
extract_objects_predicates tags ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-OBJ', 'O', 'B-OBJ', 'O', 'O']
extract_objects_predicates words ['would', 'you', 'rather', 'live', 'your', 'life', 'as', 'a', 'professional', 'golfer', 'or', 'baseball', 'player?', 'why?']
['golfer', 'baseball']
[]
len(objects) 2
aspects []
weights []
get url
params {'objectA': 'golfer', 'objectB': 'baseball', 'fs': 'true'}
1
create fro json predicates []
create fro json self.predicates 
aspects  [] []
2
winnder: baseball  other: golfer
acpect winner  
acpect other  
type  templates
winnder: baseball  other: golfer
acpect winner  
acpect other  
self predicate  better
answer begin:  The baseball is better than golfer. 
self type templates
gen templates
gen templates 2
generate template default
gen templates 3 I would prefer baseball than golfer.
full answer  I would prefer baseball than golfer.
I would prefer baseball than golfer.
